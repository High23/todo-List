(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>d});var r=n(537),o=n.n(r),a=n(879),i=n.n(a)()(o());i.push([e.id,':root {\n    --zinc600: #525252;\n    --zinc800: #27272a;\n    --orange100: #ffedd5;\n    --gray600: #4b5563;\n    --green300: #86efac;\n    --green400: #4ade80;\n    --emerald300: #6ee7b7;\n    --red400: #f87171;\n    --red500: #ef4444;\n    --sky400: #38bdf8;\n    --sky500: #0ea5e9;\n    --light-gray-tp: rgba(136, 136, 136, 0.445);\n}\n\nhtml, body {\n    height: 100%;\n    margin: 0;\n    font-family: system-ui, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n}\n\n#content {\n    display: grid;\n    height: inherit;\n    grid-template-rows: auto 1fr;\n    grid-template-columns: auto 1fr;\n}\n\n.header {\n    display: flex;\n    align-items: center;\n    grid-column: 1 / 3;\n    padding: 10px 30px;\n    font-size: 2.1rem;\n    font-weight: 700;\n    background-color: var(--zinc800);\n    color: white;\n    gap: 10px;\n}\n\n.sidebar {\n    background-color: var(--orange100);\n}\n\n.todo-form {\n    display: grid;\n    grid-template-columns: repeat(3, auto);\n    grid-template-rows: repeat(2, auto);\n    row-gap: 15px;\n    font-size: 1.07rem;\n}\n\n.title {\n    grid-column: 1 / 2;\n}\n\n.due-date {\n    grid-column: 2 / 3;\n}\n\n.priority {\n    grid-column: 3 / 4;\n}\n\n.note {\n    grid-row: 2 / 3;\n    grid-column: 1 / 3;\n}\n\ndiv > label {\n    padding-right: 3px;\n}\n\nlabel[for="note"] {\n    display: block;\n    width: fit-content;\n    padding-bottom: 5px;\n}\n\n.buttons {\n    display: flex;\n    align-items: flex-end;\n    gap: 14px;\n}\n\n.title-of-tab {\n    padding: 30px 50px;\n    padding-bottom: 5px;\n    font-size: 1.2rem;\n    font-weight: 500;\n}\n\ninput, button, textarea {\n    appearance: none;\n    border: 1px solid var(--gray600);\n    padding: 3px 5px;\n}\n\ntextarea {\n    resize: none;\n    width: 90%;\n    padding-top: 5px;\n}\n\ninput[type="text"] {\n    width: 250px;\n    border-radius: 5px;\n}\n\ninput[type="date"] {\n    width: 150px;\n}\n\ninput:hover, textarea:hover {\n    border-color: black;\n}\n\nbutton {\n    padding: 5px 15px;\n}\n\n.submit, .edit {\n    background-color: var(--green400);\n    border-radius: 10px;\n}\n\n.cancel, .delete {\n    background-color: var(--red500);\n    border-radius: 10px;\n}\n\n.submit:active  {\n    background-color: var(--green300);\n}\n\n.cancel:active, .delete:active {\n    background-color: var(--red400);\n}\n\n#priority {\n    width: 80px;\n    padding: 2px;\n}\n\n.tabs, .projects {\n    list-style-type: none;\n    padding: 25px;\n    padding-left: 35px;\n    padding-right: 70px;\n    margin: 0;\n    display: grid;\n    row-gap: 15px;\n    font-size: 1.2rem;\n}\n\n.tabs {\n    border-bottom: 1px solid black;\n}\n\n.projects {\n    padding-left: 30px;\n    row-gap: 10px;\n}\n\n.projects > span {\n    font-size: 1.5rem;\n    font-weight: 500;\n}\n\n.task, .project {\n    display: grid;\n    grid-template-columns: 1fr auto;\n    justify-content: space-between;\n    padding-bottom: 10px;\n    border-bottom: 1px solid black;\n    gap: 12px;\n}\n\n.todos {\n    display: grid;\n    gap: 15px;\n    list-style-type: none;\n    padding: 25px;\n    padding-left: 60px;\n    margin: 0;\n    width: clamp(550px, 80%, 1400px);\n    font-size: 1rem;\n}\n\n.task > span {\n    display: grid;\n    grid-auto-flow: column;\n    align-items: center;\n    gap: 25px;\n}\n\ninput[type="radio"] {\n    width: 22px;\n    height: 22px;\n    border-radius: 50%;\n    border: 2px solid;\n}\n\ninput[type="radio"]:checked {\n    background-color: var(--emerald300);\n}\n\n.check {\n    position: relative;\n    display: flex;\n    align-items: center;\n}\n\n.check > span {\n    padding-left: 10px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n.plus-icon {\n    width: 22px;\n}\n\n.add-task, .add-project {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    font-weight: 500;\n    border-radius: 10px;\n    padding: 3px 0;\n    padding-left: 3px;\n}\n\n.add-task:hover,\n.add-project:hover,\n.sidebar-tab:hover,\n.project > span:hover {\n    background-color: var(--light-gray-tp);\n    cursor: pointer;\n}\n\n.details {\n    height: 15px;\n}\n\n.header-icon {\n    width: 80px;\n}\n\n.sidebar-icon {\n    width: 35px;\n}\n\n.sidebar-tab {\n    display: flex;\n    align-items: center;\n    gap: 7px;\n}\n\n#input-project-name {\n    width: 175px;\n    overflow: auto;\n}\n\n.create-project > div {\n    display: grid;\n    grid-auto-flow: column;\n}\n\n.add-project, .project {\n    font-size: 0.98rem;\n    border-radius: 5px;\n    padding-left: 0;\n}\n\n.add-project > .plus-icon {\n    width: 22px;\n}\n\n.delete-icon {\n    width: 20px;\n}\n\n.project {\n    font-weight: 400;\n    padding-bottom: 6px;\n    border-radius: 0;\n    gap: 5px;\n}\n\n.add-task > span {\n    padding-left: 8px;\n}\n\n.details:hover {\n    cursor: pointer;\n}\n\n.sidebar-tab:hover {\n    padding: 3px 0;\n    padding-left: 2px;\n    border-radius: 5px;\n    padding-right: 3px;\n}\n\n.view {\n    display: flex;\n    grid-column: 1/3;\n    justify-content: space-between;\n}\n\n.edit, .delete {\n    width: 100%;\n}\n\n.note-span {\n    width: clamp(550px, 80%, 1400px);\n}\n\n.priority-edit-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    width: clamp(80px, 100%, 130px);\n}\n\n.priority-edit-container > span {\n    text-align: center;    \n}\n\n.project > span {\n    width: 140px;\n    padding: 3px 0;\n    padding-left: 10px;\n    border-radius: 5px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n.title-of-tab > span {\n    font-size: 0.8rem;\n    padding-left: 10px;\n    color: var(--zinc600);\n}\n\n.project-drop-down-buttons {\n    display: flex;\n    grid-column: 1/2;\n}\n\n.edit {\n    background-color: var(--sky500)\n}\n\n.edit:active {\n    background-color: var(--sky400)\n}\n\n.hidden {\n    display: none;\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:[':root {\n    --zinc600: #525252;\n    --zinc800: #27272a;\n    --orange100: #ffedd5;\n    --gray600: #4b5563;\n    --green300: #86efac;\n    --green400: #4ade80;\n    --emerald300: #6ee7b7;\n    --red400: #f87171;\n    --red500: #ef4444;\n    --sky400: #38bdf8;\n    --sky500: #0ea5e9;\n    --light-gray-tp: rgba(136, 136, 136, 0.445);\n}\n\nhtml, body {\n    height: 100%;\n    margin: 0;\n    font-family: system-ui, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";\n}\n\n#content {\n    display: grid;\n    height: inherit;\n    grid-template-rows: auto 1fr;\n    grid-template-columns: auto 1fr;\n}\n\n.header {\n    display: flex;\n    align-items: center;\n    grid-column: 1 / 3;\n    padding: 10px 30px;\n    font-size: 2.1rem;\n    font-weight: 700;\n    background-color: var(--zinc800);\n    color: white;\n    gap: 10px;\n}\n\n.sidebar {\n    background-color: var(--orange100);\n}\n\n.todo-form {\n    display: grid;\n    grid-template-columns: repeat(3, auto);\n    grid-template-rows: repeat(2, auto);\n    row-gap: 15px;\n    font-size: 1.07rem;\n}\n\n.title {\n    grid-column: 1 / 2;\n}\n\n.due-date {\n    grid-column: 2 / 3;\n}\n\n.priority {\n    grid-column: 3 / 4;\n}\n\n.note {\n    grid-row: 2 / 3;\n    grid-column: 1 / 3;\n}\n\ndiv > label {\n    padding-right: 3px;\n}\n\nlabel[for="note"] {\n    display: block;\n    width: fit-content;\n    padding-bottom: 5px;\n}\n\n.buttons {\n    display: flex;\n    align-items: flex-end;\n    gap: 14px;\n}\n\n.title-of-tab {\n    padding: 30px 50px;\n    padding-bottom: 5px;\n    font-size: 1.2rem;\n    font-weight: 500;\n}\n\ninput, button, textarea {\n    appearance: none;\n    border: 1px solid var(--gray600);\n    padding: 3px 5px;\n}\n\ntextarea {\n    resize: none;\n    width: 90%;\n    padding-top: 5px;\n}\n\ninput[type="text"] {\n    width: 250px;\n    border-radius: 5px;\n}\n\ninput[type="date"] {\n    width: 150px;\n}\n\ninput:hover, textarea:hover {\n    border-color: black;\n}\n\nbutton {\n    padding: 5px 15px;\n}\n\n.submit, .edit {\n    background-color: var(--green400);\n    border-radius: 10px;\n}\n\n.cancel, .delete {\n    background-color: var(--red500);\n    border-radius: 10px;\n}\n\n.submit:active  {\n    background-color: var(--green300);\n}\n\n.cancel:active, .delete:active {\n    background-color: var(--red400);\n}\n\n#priority {\n    width: 80px;\n    padding: 2px;\n}\n\n.tabs, .projects {\n    list-style-type: none;\n    padding: 25px;\n    padding-left: 35px;\n    padding-right: 70px;\n    margin: 0;\n    display: grid;\n    row-gap: 15px;\n    font-size: 1.2rem;\n}\n\n.tabs {\n    border-bottom: 1px solid black;\n}\n\n.projects {\n    padding-left: 30px;\n    row-gap: 10px;\n}\n\n.projects > span {\n    font-size: 1.5rem;\n    font-weight: 500;\n}\n\n.task, .project {\n    display: grid;\n    grid-template-columns: 1fr auto;\n    justify-content: space-between;\n    padding-bottom: 10px;\n    border-bottom: 1px solid black;\n    gap: 12px;\n}\n\n.todos {\n    display: grid;\n    gap: 15px;\n    list-style-type: none;\n    padding: 25px;\n    padding-left: 60px;\n    margin: 0;\n    width: clamp(550px, 80%, 1400px);\n    font-size: 1rem;\n}\n\n.task > span {\n    display: grid;\n    grid-auto-flow: column;\n    align-items: center;\n    gap: 25px;\n}\n\ninput[type="radio"] {\n    width: 22px;\n    height: 22px;\n    border-radius: 50%;\n    border: 2px solid;\n}\n\ninput[type="radio"]:checked {\n    background-color: var(--emerald300);\n}\n\n.check {\n    position: relative;\n    display: flex;\n    align-items: center;\n}\n\n.check > span {\n    padding-left: 10px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n.plus-icon {\n    width: 22px;\n}\n\n.add-task, .add-project {\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    font-weight: 500;\n    border-radius: 10px;\n    padding: 3px 0;\n    padding-left: 3px;\n}\n\n.add-task:hover,\n.add-project:hover,\n.sidebar-tab:hover,\n.project > span:hover {\n    background-color: var(--light-gray-tp);\n    cursor: pointer;\n}\n\n.details {\n    height: 15px;\n}\n\n.header-icon {\n    width: 80px;\n}\n\n.sidebar-icon {\n    width: 35px;\n}\n\n.sidebar-tab {\n    display: flex;\n    align-items: center;\n    gap: 7px;\n}\n\n#input-project-name {\n    width: 175px;\n    overflow: auto;\n}\n\n.create-project > div {\n    display: grid;\n    grid-auto-flow: column;\n}\n\n.add-project, .project {\n    font-size: 0.98rem;\n    border-radius: 5px;\n    padding-left: 0;\n}\n\n.add-project > .plus-icon {\n    width: 22px;\n}\n\n.delete-icon {\n    width: 20px;\n}\n\n.project {\n    font-weight: 400;\n    padding-bottom: 6px;\n    border-radius: 0;\n    gap: 5px;\n}\n\n.add-task > span {\n    padding-left: 8px;\n}\n\n.details:hover {\n    cursor: pointer;\n}\n\n.sidebar-tab:hover {\n    padding: 3px 0;\n    padding-left: 2px;\n    border-radius: 5px;\n    padding-right: 3px;\n}\n\n.view {\n    display: flex;\n    grid-column: 1/3;\n    justify-content: space-between;\n}\n\n.edit, .delete {\n    width: 100%;\n}\n\n.note-span {\n    width: clamp(550px, 80%, 1400px);\n}\n\n.priority-edit-container {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    width: clamp(80px, 100%, 130px);\n}\n\n.priority-edit-container > span {\n    text-align: center;    \n}\n\n.project > span {\n    width: 140px;\n    padding: 3px 0;\n    padding-left: 10px;\n    border-radius: 5px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n}\n\n.title-of-tab > span {\n    font-size: 0.8rem;\n    padding-left: 10px;\n    color: var(--zinc600);\n}\n\n.project-drop-down-buttons {\n    display: flex;\n    grid-column: 1/2;\n}\n\n.edit {\n    background-color: var(--sky500)\n}\n\n.edit:active {\n    background-color: var(--sky400)\n}\n\n.hidden {\n    display: none;\n}'],sourceRoot:""}]);const d=i},879:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var d=0;d<this.length;d++){var l=this[d][0];null!=l&&(i[l]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],d=0;d<e.length;d++){var l=e[d],s=r.base?l[0]+r.base:l[0],c=a[s]||0,u="".concat(s," ").concat(c);a[s]=c+1;var A=n(u),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==A)t[A].references++,t[A].updater(p);else{var m=o(p,r);r.byIndex=d,t.splice(d,0,{identifier:u,updater:m,references:1})}i.push(u)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var d=n(a[i]);t[d].references--}for(var l=r(e,o),s=0;s<a.length;s++){var c=n(a[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}a=l}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function r(n){t(1,arguments);var r=Object.prototype.toString.call(n);return n instanceof Date||"object"===e(n)&&"[object Date]"===r?new Date(n.getTime()):"number"==typeof n||"[object Number]"===r?new Date(n):("string"!=typeof n&&"[object String]"!==r||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function o(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function a(e){t(1,arguments);var n=r(e),o=n.getUTCDay(),a=(o<1?7:0)+o-1;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function i(e){t(1,arguments);var n=r(e),o=n.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(o+1,0,4),i.setUTCHours(0,0,0,0);var d=a(i),l=new Date(0);l.setUTCFullYear(o,0,4),l.setUTCHours(0,0,0,0);var s=a(l);return n.getTime()>=d.getTime()?o+1:n.getTime()>=s.getTime()?o:o-1}var d={};function l(){return d}function s(e,n){var a,i,d,s,c,u,A,p;t(1,arguments);var m=l(),g=o(null!==(a=null!==(i=null!==(d=null!==(s=null==n?void 0:n.weekStartsOn)&&void 0!==s?s:null==n||null===(c=n.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==d?d:m.weekStartsOn)&&void 0!==i?i:null===(A=m.locale)||void 0===A||null===(p=A.options)||void 0===p?void 0:p.weekStartsOn)&&void 0!==a?a:0);if(!(g>=0&&g<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var h=r(e),f=h.getUTCDay(),b=(f<g?7:0)+f-g;return h.setUTCDate(h.getUTCDate()-b),h.setUTCHours(0,0,0,0),h}function c(e,n){var a,i,d,c,u,A,p,m;t(1,arguments);var g=r(e),h=g.getUTCFullYear(),f=l(),b=o(null!==(a=null!==(i=null!==(d=null!==(c=null==n?void 0:n.firstWeekContainsDate)&&void 0!==c?c:null==n||null===(u=n.locale)||void 0===u||null===(A=u.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==d?d:f.firstWeekContainsDate)&&void 0!==i?i:null===(p=f.locale)||void 0===p||null===(m=p.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==a?a:1);if(!(b>=1&&b<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var v=new Date(0);v.setUTCFullYear(h+1,0,b),v.setUTCHours(0,0,0,0);var C=s(v,n),y=new Date(0);y.setUTCFullYear(h,0,b),y.setUTCHours(0,0,0,0);var w=s(y,n);return g.getTime()>=C.getTime()?h+1:g.getTime()>=w.getTime()?h:h-1}function u(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const A=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return u("yy"===t?r%100:r,t.length)},p=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):u(n+1,2)},m=function(e,t){return u(e.getUTCDate(),t.length)},g=function(e,t){return u(e.getUTCHours()%12||12,t.length)},h=function(e,t){return u(e.getUTCHours(),t.length)},f=function(e,t){return u(e.getUTCMinutes(),t.length)},b=function(e,t){return u(e.getUTCSeconds(),t.length)},v=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return u(Math.floor(r*Math.pow(10,n-3)),t.length)};var C={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),o=r>0?r:1-r;return n.ordinalNumber(o,{unit:"year"})}return A(e,t)},Y:function(e,t,n,r){var o=c(e,r),a=o>0?o:1-o;return"YY"===t?u(a%100,2):"Yo"===t?n.ordinalNumber(a,{unit:"year"}):u(a,t.length)},R:function(e,t){return u(i(e),t.length)},u:function(e,t){return u(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return u(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return u(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return p(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return u(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,n,a,i){var d=function(e,n){t(1,arguments);var a=r(e),i=s(a,n).getTime()-function(e,n){var r,a,i,d,u,A,p,m;t(1,arguments);var g=l(),h=o(null!==(r=null!==(a=null!==(i=null!==(d=null==n?void 0:n.firstWeekContainsDate)&&void 0!==d?d:null==n||null===(u=n.locale)||void 0===u||null===(A=u.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==i?i:g.firstWeekContainsDate)&&void 0!==a?a:null===(p=g.locale)||void 0===p||null===(m=p.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==r?r:1),f=c(e,n),b=new Date(0);return b.setUTCFullYear(f,0,h),b.setUTCHours(0,0,0,0),s(b,n)}(a,n).getTime();return Math.round(i/6048e5)+1}(e,i);return"wo"===n?a.ordinalNumber(d,{unit:"week"}):u(d,n.length)},I:function(e,n,o){var d=function(e){t(1,arguments);var n=r(e),o=a(n).getTime()-function(e){t(1,arguments);var n=i(e),r=new Date(0);return r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0),a(r)}(n).getTime();return Math.round(o/6048e5)+1}(e);return"Io"===n?o.ordinalNumber(d,{unit:"week"}):u(d,n.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):m(e,t)},D:function(e,n,o){var a=function(e){t(1,arguments);var n=r(e),o=n.getTime();n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0);var a=o-n.getTime();return Math.floor(a/864e5)+1}(e);return"Do"===n?o.ordinalNumber(a,{unit:"dayOfYear"}):u(a,n.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var o=e.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(a);case"ee":return u(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var o=e.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(a);case"cc":return u(a,t.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),o=0===r?7:r;switch(t){case"i":return String(o);case"ii":return u(o,t.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,o=e.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,o=e.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return g(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):h(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):u(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):u(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):f(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):b(e,t)},S:function(e,t){return v(e,t)},X:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();if(0===o)return"Z";switch(t){case"X":return w(o);case"XXXX":case"XX":return B(o);default:return B(o,":")}},x:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return w(o);case"xxxx":case"xx":return B(o);default:return B(o,":")}},O:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+y(o,":");default:return"GMT"+B(o,":")}},z:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+y(o,":");default:return"GMT"+B(o,":")}},t:function(e,t,n,r){var o=r._originalDate||e;return u(Math.floor(o.getTime()/1e3),t.length)},T:function(e,t,n,r){return u((r._originalDate||e).getTime(),t.length)}};function y(e,t){var n=e>0?"-":"+",r=Math.abs(e),o=Math.floor(r/60),a=r%60;if(0===a)return n+String(o);var i=t||"";return n+String(o)+i+u(a,2)}function w(e,t){return e%60==0?(e>0?"-":"+")+u(Math.abs(e)/60,2):B(e,t)}function B(e,t){var n=t||"",r=e>0?"-":"+",o=Math.abs(e);return r+u(Math.floor(o/60),2)+n+u(o%60,2)}const x=C;var I=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},k=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}};const S={p:k,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return I(e,t);switch(o){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",I(o,t)).replace("{{time}}",k(a,t))}};var E=["D","DD"],T=["YY","YYYY"];function M(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var j={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function N(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}const D={date:N({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:N({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:N({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var L={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function q(e){return function(t,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,a=null!=n&&n.width?String(n.width):o;r=e.formattingValues[a]||e.formattingValues[o]}else{var i=e.defaultWidth,d=null!=n&&n.width?String(n.width):e.defaultWidth;r=e.values[d]||e.values[i]}return r[e.argumentCallback?e.argumentCallback(t):t]}}const O={ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:q({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:q({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:q({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:q({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:q({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function P(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,o=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],a=t.match(o);if(!a)return null;var i,d=a[0],l=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],s=Array.isArray(l)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(d))return n}(l):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(d))return n}(l);return i=e.valueCallback?e.valueCallback(s):s,{value:i=n.valueCallback?n.valueCallback(i):i,rest:t.slice(d.length)}}}var U,W={ordinalNumber:(U={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(U.matchPattern);if(!n)return null;var r=n[0],o=e.match(U.parsePattern);if(!o)return null;var a=U.valueCallback?U.valueCallback(o[0]):o[0];return{value:a=t.valueCallback?t.valueCallback(a):a,rest:e.slice(r.length)}}),era:P({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:P({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:P({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:P({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:P({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const Y={code:"en-US",formatDistance:function(e,t,n){var r,o=j[e];return r="string"==typeof o?o:1===t?o.one:o.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:D,formatRelative:function(e,t,n,r){return L[e]},localize:O,match:W,options:{weekStartsOn:0,firstWeekContainsDate:1}};var H=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,z=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,J=/^'([^]*?)'?$/,F=/''/g,R=/[a-zA-Z]/;function Q(n,a,i){var d,s,c,u,A,p,m,g,h,f,b,v,C,y,w,B,I,k;t(2,arguments);var j=String(a),N=l(),D=null!==(d=null!==(s=null==i?void 0:i.locale)&&void 0!==s?s:N.locale)&&void 0!==d?d:Y,L=o(null!==(c=null!==(u=null!==(A=null!==(p=null==i?void 0:i.firstWeekContainsDate)&&void 0!==p?p:null==i||null===(m=i.locale)||void 0===m||null===(g=m.options)||void 0===g?void 0:g.firstWeekContainsDate)&&void 0!==A?A:N.firstWeekContainsDate)&&void 0!==u?u:null===(h=N.locale)||void 0===h||null===(f=h.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==c?c:1);if(!(L>=1&&L<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var q=o(null!==(b=null!==(v=null!==(C=null!==(y=null==i?void 0:i.weekStartsOn)&&void 0!==y?y:null==i||null===(w=i.locale)||void 0===w||null===(B=w.options)||void 0===B?void 0:B.weekStartsOn)&&void 0!==C?C:N.weekStartsOn)&&void 0!==v?v:null===(I=N.locale)||void 0===I||null===(k=I.options)||void 0===k?void 0:k.weekStartsOn)&&void 0!==b?b:0);if(!(q>=0&&q<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!D.localize)throw new RangeError("locale must contain localize property");if(!D.formatLong)throw new RangeError("locale must contain formatLong property");var O=r(n);if(!function(n){if(t(1,arguments),!function(n){return t(1,arguments),n instanceof Date||"object"===e(n)&&"[object Date]"===Object.prototype.toString.call(n)}(n)&&"number"!=typeof n)return!1;var o=r(n);return!isNaN(Number(o))}(O))throw new RangeError("Invalid time value");var P=function(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}(O),U=function(e,n){return t(2,arguments),function(e,n){t(2,arguments);var a=r(e).getTime(),i=o(n);return new Date(a+i)}(e,-o(n))}(O,P),W={firstWeekContainsDate:L,weekStartsOn:q,locale:D,_originalDate:O};return j.match(z).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,S[t])(e,D.formatLong):e})).join("").match(H).map((function(e){if("''"===e)return"'";var t,r,o=e[0];if("'"===o)return(r=(t=e).match(J))?r[1].replace(F,"'"):t;var d,l=x[o];if(l)return null!=i&&i.useAdditionalWeekYearTokens||(d=e,-1===T.indexOf(d))||M(e,a,String(n)),null!=i&&i.useAdditionalDayOfYearTokens||!function(e){return-1!==E.indexOf(e)}(e)||M(e,a,String(n)),l(U,e,D.localize,W);if(o.match(R))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return e})).join("")}function X(e){return t(1,arguments),function(e,n){t(2,arguments);var o=r(e),a=r(n);return o.getFullYear()===a.getFullYear()&&o.getMonth()===a.getMonth()}(Date.now(),e)}function G(e){const t=e[0].childNodes[3].value;let n=e[1].childNodes[3].value;return n=n.split("-"),n=Q(new Date(n[0],n[1]-1,n[2]),"MM/dd/yyyy"),{titleName:t,dueDate:n,priority:e[2].childNodes[3].value,note:e[3].childNodes[3].value}}function Z(e,t=""){if("task"!==t)return Number(e.dataset.id);document.querySelectorAll(".task").forEach(((e,t)=>{e.dataset.id=t}))}function $(e,t){if("task"===t){const t=document.querySelectorAll(".priority-edit-container > .edit");let n=t.length;for(let r=0;r<n;r++){let n=t[r];n!==e&&n.classList.add("hidden")}}else if("project"===t){const t=document.querySelectorAll(".project-drop-down-buttons > .edit");let n=t.length;for(let r=0;r<n;r++){let n=t[r];n!==e&&n.classList.add("hidden")}}}function _(e){"task"===e?document.querySelectorAll(".priority-edit-container > .edit").forEach((e=>{e.classList.remove("hidden")})):"project"===e&&document.querySelectorAll(".project-drop-down-buttons > .edit").forEach((e=>{e.classList.remove("hidden")}))}function V(e=""){const t=document.querySelectorAll(".priority-edit-container > .edit");"hide"===e?t.forEach((e=>{e.classList.add("hidden")})):t.forEach((e=>{e.classList.remove("hidden")}))}function K(e=""){const t=document.querySelectorAll(".project-drop-down-buttons > .edit");"hide"===e?t.forEach((e=>{e.classList.add("hidden")})):t.forEach((e=>{e.classList.remove("hidden")}))}function ee(e){const t=e[0].childNodes[3].value;let n=e[1].childNodes[3].value;return n=n.split("-"),t.length<1?(alert("Project must at least have one letter"),!1):!!X(new Date(n[0],n[1]-1,n[2]))||(alert("Due dates MUST be in the current month"),!1)}function te(e){t(1,arguments);var n=r(e);return n.setHours(0,0,0,0),n}function ne(e){return t(1,arguments),function(e,n){t(2,arguments);var r=te(e),o=te(n);return r.getTime()===o.getTime()}(e,Date.now())}function re(e,n){var a,i,d,s,c,u,A,p;t(1,arguments);var m=l(),g=o(null!==(a=null!==(i=null!==(d=null!==(s=null==n?void 0:n.weekStartsOn)&&void 0!==s?s:null==n||null===(c=n.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==d?d:m.weekStartsOn)&&void 0!==i?i:null===(A=m.locale)||void 0===A||null===(p=A.options)||void 0===p?void 0:p.weekStartsOn)&&void 0!==a?a:0);if(!(g>=0&&g<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var h=r(e),f=h.getDay(),b=(f<g?7:0)+f-g;return h.setDate(h.getDate()-b),h.setHours(0,0,0,0),h}function oe(e,n){return t(1,arguments),function(e,n,r){t(2,arguments);var o=re(e,r),a=re(n,r);return o.getTime()===a.getTime()}(e,Date.now(),n)}function ae(e){const t=JSON.parse(localStorage.getItem("inbox")),n=JSON.parse(localStorage.getItem("projects"));if(!1!==Boolean(t[0])||!1!==Boolean(n[0])){for(let n=0;n<t.length;n++)(ne(new Date(t[n].dueDate))&&"Today"===e||oe(new Date(t[n].dueDate))&&"Week"===e||X(new Date(t[n].dueDate))&&"Month"===e)&&fe(t[n].titleName,t[n].dueDate,t[n].priority,t[n].note,"(Inbox)");if(!1!==Boolean(n[0]))for(let t=0;t<n.length;t++){let r=Object.getOwnPropertyNames(n[t])[0];n[t][[r]].forEach((t=>{(ne(new Date(t.dueDate))&&"Today"===e||oe(new Date(t.dueDate))&&"Week"===e||X(new Date(t.dueDate))&&"Month"===e)&&fe(t.titleName,t.dueDate,t.priority,t.note,`(${r})`)}))}}}function ie(e){const n=document.querySelector(".title-of-tab"),a=document.createElement("span");"Today"===e?(document.querySelectorAll(".date").forEach((e=>{e.remove()})),n.textContent=e,a.innerHTML=`${Q(new Date,"MMM do")}`,n.appendChild(a)):"Week"===e?(n.textContent=`This ${e}`,a.innerHTML=`${Q(re(new Date),"MM/dd")} - ${Q(function(e,n){var a,i,d,s,c,u,A,p;t(1,arguments);var m=l(),g=o(null!==(a=null!==(i=null!==(d=null!==(s=null==n?void 0:n.weekStartsOn)&&void 0!==s?s:null==n||null===(c=n.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==d?d:m.weekStartsOn)&&void 0!==i?i:null===(A=m.locale)||void 0===A||null===(p=A.options)||void 0===p?void 0:p.weekStartsOn)&&void 0!==a?a:0);if(!(g>=0&&g<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var h=r(e),f=h.getDay(),b=6+(f<g?-7:0)-(f-g);return h.setDate(h.getDate()+b),h.setHours(23,59,59,999),h}(new Date),"MM/dd")}`,n.appendChild(a)):"Month"===e&&(n.innerHTML=`This ${e}`,a.innerHTML=`${Q(new Date,"MMMM")}`,n.appendChild(a))}function de(){const e=document.querySelector(".projects"),t=document.createElement("li");t.setAttribute("class","add-project"),t.innerHTML='<img src="./icons/plus.svg" alt="Plus icon" class="plus-icon">\n                              <span>Add project</span>',e.appendChild(t),t.addEventListener("click",(()=>{K("hide"),ce(),function(e){const t=document.createElement("form");t.setAttribute("class","create-project"),t.innerHTML='<label for="input-project-name"></label>\n        <input type="text" name="project-name" id="input-project-name" maxlength="20" autocomplete="off">\n        <div class="project-form-buttons">\n            <button class="submit" type="button">Create</button>\n            <button class="cancel" type="button">Cancel</button>\n        </div>',e.appendChild(t),function(e){document.querySelector(".project-form-buttons > .cancel").addEventListener("click",(()=>{e.remove(),de(),K()}))}(t),function(e){document.querySelector(".project-form-buttons > .submit").addEventListener("click",(()=>{Ce(e.childNodes[2].value)?alert("Projects must have different names"):(le(document.querySelector("#input-project-name").value),function(e){let t=JSON.parse(localStorage.getItem("projects"));t.push({[e]:[]}),localStorage.setItem("projects",JSON.stringify(t))}(e.childNodes[2].value),e.remove(),de(),K())}))}(t)}(e)}))}function le(e){const t=document.querySelector(".projects"),n=document.createElement("li");n.setAttribute("class","project");const r=document.createElement("span"),o=document.createElement("img");o.setAttribute("src","./icons/triangle-down.png"),o.setAttribute("alt","Drop down icon"),o.setAttribute("class","details"),n.appendChild(r),n.appendChild(o),r.innerHTML=e,t.append(n);const a=document.querySelectorAll(".project").length-1;n.setAttribute("data-Id",a),r.addEventListener("click",(()=>{he(),se(e=r.innerHTML,n)})),function(e,t){let n=ue(e);const r=document.querySelectorAll(".project"),o=document.createElement("div");o.classList.add("project-drop-down-buttons","hidden");const a=document.createElement("button");a.innerHTML="Edit",a.setAttribute("class","edit");const i=document.createElement("button");i.innerHTML="Delete",i.setAttribute("class","delete"),o.appendChild(a),o.appendChild(i),r[e].appendChild(o),function(e,t){e.addEventListener("click",(()=>{if(e.setAttribute("src","./icons/triangle.png"),t.childNodes[2])return t.childNodes[2].classList.toggle("hidden"),void("hidden"===t.childNodes[2].classList[1]&&e.setAttribute("src","./icons/triangle-down.png"))}))}(t,n),a.addEventListener("click",(()=>{e=Z(n),$(a,"project"),function(e){let t=ue(e);const n=document.createElement("form");n.setAttribute("class","create-project"),n.innerHTML='<label for="input-project-name"></label>\n        <input type="text" name="project-name" id="input-project-name" maxlength="20" autocomplete="off" class="new-name-form" required>\n        <div class="project-form-buttons new-name">\n            <button class="submit" type="button">Save</button>\n            <button class="cancel" type="button">Cancel</button>\n        </div>',Ae(t),t.insertBefore(n,t.childNodes[0]),function(e,t){document.querySelector(".new-name > button.cancel").addEventListener("click",(()=>{e.remove(),Ae(t),_("project")}))}(n,t),function(e,t,n){document.querySelector(".new-name > button.submit").addEventListener("click",(()=>{Ce(e.childNodes[2].value)?alert("Projects must have different names"):!1!==Boolean(e.childNodes[2].value)?(e.remove(),t.childNodes[0].classList.toggle("hidden"),t.childNodes[1].classList.toggle("hidden"),t.childNodes[1].setAttribute("src","./icons/triangle-down.png"),function(e,t,n){let r=JSON.parse(localStorage.getItem("projects")),o=t.childNodes[0].innerHTML,a=e.childNodes[2].value;const i={[a]:[]};for(let e=0;e<r[n][o].length;e++)i[a].push(r[n][[o]][e]);r.splice(n,1),r.splice(n,0,i),localStorage.setItem("projects",JSON.stringify(r)),t.childNodes[0].innerHTML=e.childNodes[2].value}(e,t,n),he(),se(e.childNodes[2].value,t),_("project")):alert("Projects must have a name")}))}(n,t,e)}(e)})),i.addEventListener("click",(()=>{(function(e){let t=JSON.parse(localStorage.getItem("projects"));ue(e).remove(),t.splice(e,1),localStorage.setItem("projects",JSON.stringify(t)),function(){const e=document.querySelectorAll(".project");!1!==e&&e.forEach(((e,t)=>{e.setAttribute("data-Id",t)}))}()})(e=Z(n)),document.querySelector(".title-of-tab").innerHTML="Inbox",he(),ye(JSON.parse(localStorage.getItem("inbox")))}))}(a,o)}function se(e,t){document.querySelector(".title-of-tab").innerHTML=e,ye(JSON.parse(localStorage.getItem("projects"))[t.dataset.id][[e]])}function ce(){document.querySelector("li.add-project").remove()}function ue(e){let t=document.querySelectorAll(".project");for(let n=0;n<t.length;n++)if(Number(t[n].dataset.id)===e)return t[n]}function Ae(e){for(let t=0;t<e.childNodes.length;t++)e.childNodes[t].classList.toggle("hidden")}const pe=document.getElementById("content");function me(){const e=document.querySelector(".todos"),t=document.createElement("li");t.setAttribute("class","add-task"),t.innerHTML='<img src="./icons/plus.svg" alt="Plus icon" class="plus-icon">\n                           <span>Add task</span>',t.addEventListener("click",(()=>{V("hide"),function(){const e=document.querySelector(".todos"),t=document.createElement("form");t.setAttribute("action"," "),t.setAttribute("class","todo-form"),t.innerHTML='\n            <div class="title">\n                <label for="title">Title:</label>\n                <input type="text" name="title" id="title" autofocus autocomplete="off" maxlength="50" placeholder="Take the trash out" min="1" required>\n            </div>\n\n            <div class="due-date">\n                <label for="due-date">Due Date</label>\n                <input type="date" name="due-date" id="due-date" required>\n            </div>\n\n            <div class="priority">\n                <label for="priority">Priority</label>\n                <select name="priority" id="priority" required>\n                    <option value="low">Low</option>\n                    <option value="medium">Medium</option>\n                    <option value="high">High</option>\n                </select>\n            </div>\n\n            <div class="note">\n                <label for="note">Note: (Optional)</label>\n                <textarea name="note" id="note" cols="90" rows="6" maxlength="500" placeholder="Something extra about taking the trash out"></textarea>\n            </div>\n            <div class="buttons">\n                <button type="button" class="submit">Submit</button>\n                <button type="button" class="cancel">Cancel</button>\n            </div>',e.appendChild(t),function(e){document.querySelector(".buttons > .cancel").addEventListener("click",(()=>{e.remove(),me(),V()}))}(t),function(e){document.querySelector(".buttons > .submit").addEventListener("click",(()=>{const t=document.querySelectorAll(".todo-form > div");if(!ee(t))return;const n=document.querySelector(".title-of-tab").textContent,r=G(t);!function(e,t){if("Inbox"===t){let t=JSON.parse(localStorage.getItem("inbox"));if(!1===Boolean(t[0]))return;for(let n=0;n<t.length;n++)if(t[n].titleName===e)return!0}else{let n,r=JSON.parse(localStorage.getItem("projects"));if(document.querySelectorAll(".project").forEach((e=>{e.childNodes[0].textContent===t&&(n=e.dataset.id)})),!1===Boolean(r[n][[t]][0]))return;for(let o=0;o<r[n][[t]].length;o++)if(r[n][[t]][o].titleName===e)return!0}}(r.titleName,n)?("Inbox"===n?function(e){let t=JSON.parse(localStorage.getItem("inbox"));t.push(e),localStorage.setItem("inbox",JSON.stringify(t))}(r):function(e,t){let n=JSON.parse(localStorage.getItem("projects"));document.querySelectorAll(".project").forEach(((r,o)=>{r=r.childNodes[0].textContent,t===r&&n[o][[t]].push(e)})),localStorage.setItem("projects",JSON.stringify(n))}(r,n),fe(r.titleName,r.dueDate,r.priority,r.note),e.remove(),me(),V()):alert("ToDos must have different names")}))}(t)}(),ge()})),e.appendChild(t)}function ge(){const e=document.querySelector("li.add-task");if(!e)return me(),void ge();e.remove()}function he(){document.querySelectorAll(".task").forEach((e=>{e.remove()}));const e=document.querySelector(".todo-form");e&&e.remove()}function fe(e,t,n,r,o=""){const a=document.querySelector(".todos"),i=document.createElement("li");i.setAttribute("class","task");const d=document.createElement("form");d.setAttribute("class","check"),d.innerHTML='<label for="mark-task"></label>';const l=document.createElement("input");l.setAttribute("type","radio"),l.setAttribute("name","mark-task"),l.setAttribute("id","mark-task"),l.style["border-color"]=localStorage.getItem(n),d.append(l);const s=document.createElement("span");s.innerHTML=e;const c=document.createElement("span");c.innerHTML=o,c.setAttribute("class","origin"),d.appendChild(s),d.appendChild(c),i.appendChild(d);const u=document.createElement("span"),A=document.createElement("span");A.setAttribute("class","date"),A.innerHTML=t;const p=document.createElement("img");p.setAttribute("src","./icons/triangle-down.png"),p.setAttribute("alt","Drop down icon"),p.setAttribute("class","details"),u.appendChild(A),u.appendChild(p),i.appendChild(u),a.appendChild(i);let m=document.querySelectorAll(".task").length-1;i.setAttribute("data-Id",m);let g=ve(m);l.addEventListener("click",(()=>{setTimeout((()=>{g.remove(),be(g.dataset.id)}),"1000"),Z(g,"task")})),function(e,t,n,r){let o=ve(n);const a=document.createElement("div");a.setAttribute("class","view"),a.classList.add("hidden"),a.innerHTML='<textarea class="note-span" rows="6" readonly></textarea>';const i=document.createElement("div");i.setAttribute("class","priority-edit-container"),i.innerHTML="<span></span>";const d=document.createElement("button");d.innerHTML="Edit",d.setAttribute("class","edit");const l=document.createElement("button");l.innerHTML="Delete",l.setAttribute("class","delete"),i.appendChild(d),i.appendChild(l),a.appendChild(i),o.appendChild(a);o.childNodes[2].childNodes[0].innerHTML=`Note: ${t}`;o.childNodes[2].childNodes[1].childNodes[0].innerHTML=`Priority: ${e}`,function(e,t){e.addEventListener("click",(()=>{if(e.setAttribute("src","./icons/triangle.png"),t.childNodes[2])return t.childNodes[2].classList.toggle("hidden"),void("hidden"===t.childNodes[2].classList[1]&&e.setAttribute("src","./icons/triangle-down.png"))}))}(r,o),d.addEventListener("click",(()=>{o.classList.add("hidden"),ge(),$(d,"task"),function(e){const t=document.querySelector(".todos"),n=document.createElement("form");n.setAttribute("class","todo-form"),n.innerHTML='\n            <div class="title">\n                <label for="title">Title:</label>\n                <input type="text" name="title" id="title" autofocus autocomplete="off" maxlength="50" placeholder="Take the trash out">\n            </div>\n\n            <div class="due-date">\n                <label for="due-date">Due Date</label>\n                <input type="date" name="due-date" id="due-date">\n            </div>\n\n            <div class="priority">\n                <label for="priority">Priority</label>\n                <select name="priority" id="priority">\n                    <option value="low">Low</option>\n                    <option value="medium">Medium</option>\n                    <option value="high">High</option>\n                </select>\n            </div>\n\n            <div class="note">\n                <label for="note">Note: (Optional)</label>\n                <textarea name="note" id="note" cols="90" rows="6" maxlength="500" placeholder="Something extra about taking the trash out"></textarea>\n            </div>\n            <div class="buttons edit-todo">\n                <button type="button" class="submit">Save</button>\n                <button type="button" class="cancel">Cancel</button>\n            </div>',t.insertBefore(n,e),document.querySelector(".edit-todo > .submit").addEventListener("click",(()=>{const t=document.querySelectorAll(".todo-form > div");if(!ee(t))return;const r=document.querySelector(".title-of-tab").textContent,o=G(t);let a=e.dataset.id;if("Inbox"===r){const e=JSON.parse(localStorage.getItem("inbox"));e.splice(a,1,o),localStorage.setItem("inbox",JSON.stringify(e))}else{let e=JSON.parse(localStorage.getItem("projects"));document.querySelectorAll(".project").forEach(((t,n)=>{t=t.childNodes[0].textContent,r===t&&e[n][[r]].splice(a,1,o)})),localStorage.setItem("projects",JSON.stringify(e))}e.classList.remove("hidden"),e.childNodes[0].childNodes[3].textContent=o.titleName,e.childNodes[0].childNodes[2].style["border-color"]=localStorage.getItem(o.priority);const i=e.childNodes[2],d=e.childNodes[1].childNodes[1];i.classList.add("hidden"),d.setAttribute("src","./icons/triangle-down.png"),n.remove(),me(),_("task")})),document.querySelector(".edit-todo > .cancel").addEventListener("click",(()=>{e.classList.remove("hidden");const t=e.childNodes[2],r=e.childNodes[1].childNodes[1];t.classList.add("hidden"),r.setAttribute("src","./icons/triangle-down.png"),n.remove(),me(),_("task")}))}(o)})),l.addEventListener("click",(()=>{o.remove(),be(o.dataset.id),Z(o,"task")}))}(n,r,m,p)}function be(e){const t=document.querySelector(".title-of-tab").textContent;if("Inbox"===t){const t=JSON.parse(localStorage.getItem("inbox"));t.splice(e,1),localStorage.setItem("inbox",JSON.stringify(t))}else{let n=JSON.parse(localStorage.getItem("projects"));document.querySelectorAll(".project").forEach(((r,o)=>{r=r.childNodes[0].textContent,t===r&&n[o][[t]].splice(e,1)})),localStorage.setItem("projects",JSON.stringify(n))}}function ve(e){let t=document.querySelectorAll(".task");for(let n=0;n<t.length;n++)if(Number(t[n].dataset.id)===e)return t[n]}function Ce(e){let t=JSON.parse(localStorage.getItem("projects"));for(let n=0;n<t.length;n++)return!!t[n].hasOwnProperty(e)}function ye(e){ge();for(let t=0;t<e.length;t++)fe(e[t].titleName,e[t].dueDate,e[t].priority,e[t].note);me()}var we=n(379),Be=n.n(we),xe=n(795),Ie=n.n(xe),ke=n(569),Se=n.n(ke),Ee=n(565),Te=n.n(Ee),Me=n(216),je=n.n(Me),Ne=n(589),De=n.n(Ne),Le=n(426),qe={};qe.styleTagTransform=De(),qe.setAttributes=Te(),qe.insert=Se().bind(null,"head"),qe.domAPI=Ie(),qe.insertStyleElement=je(),Be()(Le.Z,qe),Le.Z&&Le.Z.locals&&Le.Z.locals,function(){const e=document.createElement("div");e.setAttribute("class","header"),e.innerHTML='<img src="./icons/list-box-outline.svg" alt="Header icon that resembles a checklist" class="header-icon"> \n                            ToDo List',pe.appendChild(e)}(),function(){const e=document.createElement("div");e.setAttribute("class","sidebar"),e.innerHTML='\n    <div class="sidebar">\n        <ul class="tabs">\n            <li class="sidebar-tab inbox">\n                <img src="./icons/inbox-outline.png" alt="Inbox icon" class="sidebar-icon"> \n                Inbox\n            </li>\n            <li class="sidebar-tab today">\n                <img src="./icons/calendar-today-outline.png" alt="A calendar with a day highlighted" class="sidebar-icon">\n                Today\n            </li>\n            <li class="sidebar-tab week">\n                <img src="./icons/calendar-week-outline.png" alt="A calendar with a week highlighted" class="sidebar-icon">\n                This Week\n            </li>\n            <li class="sidebar-tab month">\n                <img src="./icons/calendar-month-outline.png" alt="A calendar with a week highlighted" class="sidebar-icon">\n                This Month\n            </li>\n        </ul>\n        <ul class="projects">\n            <span>Projects</span>\n        </ul>\n    </div>',pe.appendChild(e),de()}(),function(){const e=document.createElement("div");e.setAttribute("class","todos-container"),e.innerHTML='\n        <div class="title-of-tab">Inbox</div>\n        <ul class="todos"></ul>',pe.appendChild(e),me()}(),document.querySelector(".inbox").addEventListener("click",(()=>{document.querySelector(".title-of-tab").innerHTML="Inbox",he(),ye(JSON.parse(localStorage.getItem("inbox")))})),document.querySelector(".today").addEventListener("click",(()=>{let e="Today";he(),ge(),ae(e),ie(e)})),document.querySelector(".week").addEventListener("click",(()=>{let e="Week";he(),ge(),ae(e),ie(e)})),document.querySelector(".month").addEventListener("click",(()=>{let e="Month";he(),ge(),ae(e),ie(e)})),localStorage.setItem("high","red"),localStorage.setItem("medium","#fbbf24"),localStorage.setItem("low","blue"),!1===Boolean(localStorage.getItem("inbox"))&&(localStorage.setItem("inbox",JSON.stringify([])),localStorage.setItem("projects",JSON.stringify([]))),function(){const e=JSON.parse(localStorage.getItem("projects"));Boolean(e[0])&&function(e){ce();for(let t=0;t<e.length;t++)le(Object.getOwnPropertyNames(e[t])[0]);de()}(e);const t=JSON.parse(localStorage.getItem("inbox"));Boolean(t[0])&&ye(t)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Li9zcmMvc3R5bGUuY3NzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdG9kby1saXN0L3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS90b0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3RvSW50ZWdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9saWdodEZvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDV2Vla1llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENJU09XZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDRGF5T2ZZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL21hdGNoL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZGVmYXVsdExvY2FsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2Zvcm1hdC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzVmFsaWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdWJNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9hZGRNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1RoaXNNb250aC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzU2FtZU1vbnRoL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL2FwcC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3N0YXJ0T2ZEYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1RvZGF5L2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vaXNTYW1lRGF5L2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vc3RhcnRPZldlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1RoaXNXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vaXNTYW1lV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvbW9kdWxlcy90YWJzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZW5kT2ZXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL3Byb2plY3QuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL21vZHVsZXMvc3RvcmFnZS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvbW9kdWxlcy9VSS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvbW9kdWxlcy9Ub0RvLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9zdHlsZS5jc3M/NzE2MyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYDpyb290IHtcbiAgICAtLXppbmM2MDA6ICM1MjUyNTI7XG4gICAgLS16aW5jODAwOiAjMjcyNzJhO1xuICAgIC0tb3JhbmdlMTAwOiAjZmZlZGQ1O1xuICAgIC0tZ3JheTYwMDogIzRiNTU2MztcbiAgICAtLWdyZWVuMzAwOiAjODZlZmFjO1xuICAgIC0tZ3JlZW40MDA6ICM0YWRlODA7XG4gICAgLS1lbWVyYWxkMzAwOiAjNmVlN2I3O1xuICAgIC0tcmVkNDAwOiAjZjg3MTcxO1xuICAgIC0tcmVkNTAwOiAjZWY0NDQ0O1xuICAgIC0tc2t5NDAwOiAjMzhiZGY4O1xuICAgIC0tc2t5NTAwOiAjMGVhNWU5O1xuICAgIC0tbGlnaHQtZ3JheS10cDogcmdiYSgxMzYsIDEzNiwgMTM2LCAwLjQ0NSk7XG59XG5cbmh0bWwsIGJvZHkge1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBtYXJnaW46IDA7XG4gICAgZm9udC1mYW1pbHk6IHN5c3RlbS11aSwgXCJTZWdvZSBVSVwiLCBSb2JvdG8sIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWYsIFwiQXBwbGUgQ29sb3IgRW1vamlcIiwgXCJTZWdvZSBVSSBFbW9qaVwiLCBcIlNlZ29lIFVJIFN5bWJvbFwiO1xufVxuXG4jY29udGVudCB7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBoZWlnaHQ6IGluaGVyaXQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBhdXRvIDFmcjtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG8gMWZyO1xufVxuXG4uaGVhZGVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgZ3JpZC1jb2x1bW46IDEgLyAzO1xuICAgIHBhZGRpbmc6IDEwcHggMzBweDtcbiAgICBmb250LXNpemU6IDIuMXJlbTtcbiAgICBmb250LXdlaWdodDogNzAwO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXppbmM4MDApO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgICBnYXA6IDEwcHg7XG59XG5cbi5zaWRlYmFyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1vcmFuZ2UxMDApO1xufVxuXG4udG9kby1mb3JtIHtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDMsIGF1dG8pO1xuICAgIGdyaWQtdGVtcGxhdGUtcm93czogcmVwZWF0KDIsIGF1dG8pO1xuICAgIHJvdy1nYXA6IDE1cHg7XG4gICAgZm9udC1zaXplOiAxLjA3cmVtO1xufVxuXG4udGl0bGUge1xuICAgIGdyaWQtY29sdW1uOiAxIC8gMjtcbn1cblxuLmR1ZS1kYXRlIHtcbiAgICBncmlkLWNvbHVtbjogMiAvIDM7XG59XG5cbi5wcmlvcml0eSB7XG4gICAgZ3JpZC1jb2x1bW46IDMgLyA0O1xufVxuXG4ubm90ZSB7XG4gICAgZ3JpZC1yb3c6IDIgLyAzO1xuICAgIGdyaWQtY29sdW1uOiAxIC8gMztcbn1cblxuZGl2ID4gbGFiZWwge1xuICAgIHBhZGRpbmctcmlnaHQ6IDNweDtcbn1cblxubGFiZWxbZm9yPVwibm90ZVwiXSB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgd2lkdGg6IGZpdC1jb250ZW50O1xuICAgIHBhZGRpbmctYm90dG9tOiA1cHg7XG59XG5cbi5idXR0b25zIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBmbGV4LWVuZDtcbiAgICBnYXA6IDE0cHg7XG59XG5cbi50aXRsZS1vZi10YWIge1xuICAgIHBhZGRpbmc6IDMwcHggNTBweDtcbiAgICBwYWRkaW5nLWJvdHRvbTogNXB4O1xuICAgIGZvbnQtc2l6ZTogMS4ycmVtO1xuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG59XG5cbmlucHV0LCBidXR0b24sIHRleHRhcmVhIHtcbiAgICBhcHBlYXJhbmNlOiBub25lO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWdyYXk2MDApO1xuICAgIHBhZGRpbmc6IDNweCA1cHg7XG59XG5cbnRleHRhcmVhIHtcbiAgICByZXNpemU6IG5vbmU7XG4gICAgd2lkdGg6IDkwJTtcbiAgICBwYWRkaW5nLXRvcDogNXB4O1xufVxuXG5pbnB1dFt0eXBlPVwidGV4dFwiXSB7XG4gICAgd2lkdGg6IDI1MHB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbn1cblxuaW5wdXRbdHlwZT1cImRhdGVcIl0ge1xuICAgIHdpZHRoOiAxNTBweDtcbn1cblxuaW5wdXQ6aG92ZXIsIHRleHRhcmVhOmhvdmVyIHtcbiAgICBib3JkZXItY29sb3I6IGJsYWNrO1xufVxuXG5idXR0b24ge1xuICAgIHBhZGRpbmc6IDVweCAxNXB4O1xufVxuXG4uc3VibWl0LCAuZWRpdCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZ3JlZW40MDApO1xuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XG59XG5cbi5jYW5jZWwsIC5kZWxldGUge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXJlZDUwMCk7XG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcbn1cblxuLnN1Ym1pdDphY3RpdmUgIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ncmVlbjMwMCk7XG59XG5cbi5jYW5jZWw6YWN0aXZlLCAuZGVsZXRlOmFjdGl2ZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tcmVkNDAwKTtcbn1cblxuI3ByaW9yaXR5IHtcbiAgICB3aWR0aDogODBweDtcbiAgICBwYWRkaW5nOiAycHg7XG59XG5cbi50YWJzLCAucHJvamVjdHMge1xuICAgIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcbiAgICBwYWRkaW5nOiAyNXB4O1xuICAgIHBhZGRpbmctbGVmdDogMzVweDtcbiAgICBwYWRkaW5nLXJpZ2h0OiA3MHB4O1xuICAgIG1hcmdpbjogMDtcbiAgICBkaXNwbGF5OiBncmlkO1xuICAgIHJvdy1nYXA6IDE1cHg7XG4gICAgZm9udC1zaXplOiAxLjJyZW07XG59XG5cbi50YWJzIHtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgYmxhY2s7XG59XG5cbi5wcm9qZWN0cyB7XG4gICAgcGFkZGluZy1sZWZ0OiAzMHB4O1xuICAgIHJvdy1nYXA6IDEwcHg7XG59XG5cbi5wcm9qZWN0cyA+IHNwYW4ge1xuICAgIGZvbnQtc2l6ZTogMS41cmVtO1xuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG59XG5cbi50YXNrLCAucHJvamVjdCB7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciBhdXRvO1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICBwYWRkaW5nLWJvdHRvbTogMTBweDtcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgYmxhY2s7XG4gICAgZ2FwOiAxMnB4O1xufVxuXG4udG9kb3Mge1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ2FwOiAxNXB4O1xuICAgIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcbiAgICBwYWRkaW5nOiAyNXB4O1xuICAgIHBhZGRpbmctbGVmdDogNjBweDtcbiAgICBtYXJnaW46IDA7XG4gICAgd2lkdGg6IGNsYW1wKDU1MHB4LCA4MCUsIDE0MDBweCk7XG4gICAgZm9udC1zaXplOiAxcmVtO1xufVxuXG4udGFzayA+IHNwYW4ge1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC1hdXRvLWZsb3c6IGNvbHVtbjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGdhcDogMjVweDtcbn1cblxuaW5wdXRbdHlwZT1cInJhZGlvXCJdIHtcbiAgICB3aWR0aDogMjJweDtcbiAgICBoZWlnaHQ6IDIycHg7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIGJvcmRlcjogMnB4IHNvbGlkO1xufVxuXG5pbnB1dFt0eXBlPVwicmFkaW9cIl06Y2hlY2tlZCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZW1lcmFsZDMwMCk7XG59XG5cbi5jaGVjayB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cblxuLmNoZWNrID4gc3BhbiB7XG4gICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbn1cblxuLnBsdXMtaWNvbiB7XG4gICAgd2lkdGg6IDIycHg7XG59XG5cbi5hZGQtdGFzaywgLmFkZC1wcm9qZWN0IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgZ2FwOiAxMHB4O1xuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgICBwYWRkaW5nOiAzcHggMDtcbiAgICBwYWRkaW5nLWxlZnQ6IDNweDtcbn1cblxuLmFkZC10YXNrOmhvdmVyLFxuLmFkZC1wcm9qZWN0OmhvdmVyLFxuLnNpZGViYXItdGFiOmhvdmVyLFxuLnByb2plY3QgPiBzcGFuOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1saWdodC1ncmF5LXRwKTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbi5kZXRhaWxzIHtcbiAgICBoZWlnaHQ6IDE1cHg7XG59XG5cbi5oZWFkZXItaWNvbiB7XG4gICAgd2lkdGg6IDgwcHg7XG59XG5cbi5zaWRlYmFyLWljb24ge1xuICAgIHdpZHRoOiAzNXB4O1xufVxuXG4uc2lkZWJhci10YWIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBnYXA6IDdweDtcbn1cblxuI2lucHV0LXByb2plY3QtbmFtZSB7XG4gICAgd2lkdGg6IDE3NXB4O1xuICAgIG92ZXJmbG93OiBhdXRvO1xufVxuXG4uY3JlYXRlLXByb2plY3QgPiBkaXYge1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC1hdXRvLWZsb3c6IGNvbHVtbjtcbn1cblxuLmFkZC1wcm9qZWN0LCAucHJvamVjdCB7XG4gICAgZm9udC1zaXplOiAwLjk4cmVtO1xuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICBwYWRkaW5nLWxlZnQ6IDA7XG59XG5cbi5hZGQtcHJvamVjdCA+IC5wbHVzLWljb24ge1xuICAgIHdpZHRoOiAyMnB4O1xufVxuXG4uZGVsZXRlLWljb24ge1xuICAgIHdpZHRoOiAyMHB4O1xufVxuXG4ucHJvamVjdCB7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICBwYWRkaW5nLWJvdHRvbTogNnB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDA7XG4gICAgZ2FwOiA1cHg7XG59XG5cbi5hZGQtdGFzayA+IHNwYW4ge1xuICAgIHBhZGRpbmctbGVmdDogOHB4O1xufVxuXG4uZGV0YWlsczpob3ZlciB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4uc2lkZWJhci10YWI6aG92ZXIge1xuICAgIHBhZGRpbmc6IDNweCAwO1xuICAgIHBhZGRpbmctbGVmdDogMnB4O1xuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcbiAgICBwYWRkaW5nLXJpZ2h0OiAzcHg7XG59XG5cbi52aWV3IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGdyaWQtY29sdW1uOiAxLzM7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xufVxuXG4uZWRpdCwgLmRlbGV0ZSB7XG4gICAgd2lkdGg6IDEwMCU7XG59XG5cbi5ub3RlLXNwYW4ge1xuICAgIHdpZHRoOiBjbGFtcCg1NTBweCwgODAlLCAxNDAwcHgpO1xufVxuXG4ucHJpb3JpdHktZWRpdC1jb250YWluZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcbiAgICB3aWR0aDogY2xhbXAoODBweCwgMTAwJSwgMTMwcHgpO1xufVxuXG4ucHJpb3JpdHktZWRpdC1jb250YWluZXIgPiBzcGFuIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7ICAgIFxufVxuXG4ucHJvamVjdCA+IHNwYW4ge1xuICAgIHdpZHRoOiAxNDBweDtcbiAgICBwYWRkaW5nOiAzcHggMDtcbiAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbn1cblxuLnRpdGxlLW9mLXRhYiA+IHNwYW4ge1xuICAgIGZvbnQtc2l6ZTogMC44cmVtO1xuICAgIHBhZGRpbmctbGVmdDogMTBweDtcbiAgICBjb2xvcjogdmFyKC0temluYzYwMCk7XG59XG5cbi5wcm9qZWN0LWRyb3AtZG93bi1idXR0b25zIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGdyaWQtY29sdW1uOiAxLzI7XG59XG5cbi5lZGl0IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1za3k1MDApXG59XG5cbi5lZGl0OmFjdGl2ZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2t5NDAwKVxufVxuXG4uaGlkZGVuIHtcbiAgICBkaXNwbGF5OiBub25lO1xufWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsb0JBQW9CO0lBQ3BCLGtCQUFrQjtJQUNsQixtQkFBbUI7SUFDbkIsbUJBQW1CO0lBQ25CLHFCQUFxQjtJQUNyQixpQkFBaUI7SUFDakIsaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsMkNBQTJDO0FBQy9DOztBQUVBO0lBQ0ksWUFBWTtJQUNaLFNBQVM7SUFDVCxrSUFBa0k7QUFDdEk7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsZUFBZTtJQUNmLDRCQUE0QjtJQUM1QiwrQkFBK0I7QUFDbkM7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsbUJBQW1CO0lBQ25CLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLGdCQUFnQjtJQUNoQixnQ0FBZ0M7SUFDaEMsWUFBWTtJQUNaLFNBQVM7QUFDYjs7QUFFQTtJQUNJLGtDQUFrQztBQUN0Qzs7QUFFQTtJQUNJLGFBQWE7SUFDYixzQ0FBc0M7SUFDdEMsbUNBQW1DO0lB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SUFDSSxlQUFlO0FBQ25COztBQUVBO0lBQ0ksY0FBYztJQUNkLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLGdCQUFnQjtJQUNoQiw4QkFBOEI7QUFDbEM7O0FBRUE7SUFDSSxXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxnQ0FBZ0M7QUFDcEM7O0FBRUE7SUFDSSxhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLDZCQUE2QjtJQUM3QiwrQkFBK0I7QUFDbkM7O0FBRUE7SUFDSSxrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osY0FBYztJQUNkLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsbUJBQW1CO0lBQ25CLGdCQUFnQjtJQUNoQix1QkFBdUI7QUFDM0I7O0FBRUE7SUFDSSxpQkFBaUI7SUFDakIsa0JBQWtCO0lBQ2xCLHFCQUFxQjtBQUN6Qjs7QUFFQTtJQUNJLGFBQWE7SUFDYixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSTtBQUNKOztBQUVBO0lBQ0k7QUFDSjs7QUFFQTtJQUNJLGFBQWE7QUFDakJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiOnJvb3Qge1xcbiAgICAtLXppbmM2MDA6ICM1MjUyNTI7XFxuICAgIC0temluYzgwMDogIzI3MjcyYTtcXG4gICAgLS1vcmFuZ2UxMDA6ICNmZmVkZDU7XFxuICAgIC0tZ3JheTYwMDogIzRiNTU2MztcXG4gICAgLS1ncmVlbjMwMDogIzg2ZWZhYztcXG4gICAgLS1ncmVlbjQwMDogIzRhZGU4MDtcXG4gICAgLS1lbWVyYWxkMzAwOiAjNmVlN2I3O1xcbiAgICAtLXJlZDQwMDogI2Y4NzE3MTtcXG4gICAgLS1yZWQ1MDA6ICNlZjQ0NDQ7XFxuICAgIC0tc2t5NDAwOiAjMzhiZGY4O1xcbiAgICAtLXNreTUwMDogIzBlYTVlOTtcXG4gICAgLS1saWdodC1ncmF5LXRwOiByZ2JhKDEzNiwgMTM2LCAxMzYsIDAuNDQ1KTtcXG59XFxuXFxuaHRtbCwgYm9keSB7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBmb250LWZhbWlseTogc3lzdGVtLXVpLCBcXFwiU2Vnb2UgVUlcXFwiLCBSb2JvdG8sIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWYsIFxcXCJBcHBsZSBDb2xvciBFbW9qaVxcXCIsIFxcXCJTZWdvZSBVSSBFbW9qaVxcXCIsIFxcXCJTZWdvZSBVSSBTeW1ib2xcXFwiO1xcbn1cXG5cXG4jY29udGVudCB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGhlaWdodDogaW5oZXJpdDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBhdXRvIDFmcjtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBhdXRvIDFmcjtcXG59XFxuXFxuLmhlYWRlciB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGdyaWQtY29sdW1uOiAxIC8gMztcXG4gICAgcGFkZGluZzogMTBweCAzMHB4O1xcbiAgICBmb250LXNpemU6IDIuMXJlbTtcXG4gICAgZm9udC13ZWlnaHQ6IDcwMDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0temluYzgwMCk7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgZ2FwOiAxMHB4O1xcbn1cXG5cXG4uc2lkZWJhciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW9yYW5nZTEwMCk7XFxufVxcblxcbi50b2RvLWZvcm0ge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgzLCBhdXRvKTtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQoMiwgYXV0byk7XFxuICAgIHJvdy1nYXA6IDE1cHg7XFxuICAgIGZvbnQtc2l6ZTogMS4wN3JlbTtcXG59XFxuXFxuLnRpdGxlIHtcXG4gICAgZ3JpZC1jb2x1bW46IDEgLyAyO1xcbn1cXG5cXG4uZHVlLWRhdGUge1xcbiAgICBncmlkLWNvbHVtbjogMiAvIDM7XFxufVxcblxcbi5wcmlvcml0eSB7XFxuICAgIGdyaWQtY29sdW1uOiAzIC8gNDtcXG59XFxuXFxuLm5vdGUge1xcbiAgICBncmlkLXJvdzogMiAvIDM7XFxuICAgIGdyaWQtY29sdW1uOiAxIC8gMztcXG59XFxuXFxuZGl2ID4gbGFiZWwge1xcbiAgICBwYWRkaW5nLXJpZ2h0OiAzcHg7XFxufVxcblxcbmxhYmVsW2Zvcj1cXFwibm90ZVxcXCJdIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIHdpZHRoOiBmaXQtY29udGVudDtcXG4gICAgcGFkZGluZy1ib3R0b206IDVweDtcXG59XFxuXFxuLmJ1dHRvbnMge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogZmxleC1lbmQ7XFxuICAgIGdhcDogMTRweDtcXG59XFxuXFxuLnRpdGxlLW9mLXRhYiB7XFxuICAgIHBhZGRpbmc6IDMwcHggNTBweDtcXG4gICAgcGFkZGluZy1ib3R0b206IDVweDtcXG4gICAgZm9udC1zaXplOiAxLjJyZW07XFxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XFxufVxcblxcbmlucHV0LCBidXR0b24sIHRleHRhcmVhIHtcXG4gICAgYXBwZWFyYW5jZTogbm9uZTtcXG4gICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZ3JheTYwMCk7XFxuICAgIHBhZGRpbmc6IDNweCA1cHg7XFxufVxcblxcbnRleHRhcmVhIHtcXG4gICAgcmVzaXplOiBub25lO1xcbiAgICB3aWR0aDogOTAlO1xcbiAgICBwYWRkaW5nLXRvcDogNXB4O1xcbn1cXG5cXG5pbnB1dFt0eXBlPVxcXCJ0ZXh0XFxcIl0ge1xcbiAgICB3aWR0aDogMjUwcHg7XFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG59XFxuXFxuaW5wdXRbdHlwZT1cXFwiZGF0ZVxcXCJdIHtcXG4gICAgd2lkdGg6IDE1MHB4O1xcbn1cXG5cXG5pbnB1dDpob3ZlciwgdGV4dGFyZWE6aG92ZXIge1xcbiAgICBib3JkZXItY29sb3I6IGJsYWNrO1xcbn1cXG5cXG5idXR0b24ge1xcbiAgICBwYWRkaW5nOiA1cHggMTVweDtcXG59XFxuXFxuLnN1Ym1pdCwgLmVkaXQge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ncmVlbjQwMCk7XFxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxufVxcblxcbi5jYW5jZWwsIC5kZWxldGUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1yZWQ1MDApO1xcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xcbn1cXG5cXG4uc3VibWl0OmFjdGl2ZSAge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ncmVlbjMwMCk7XFxufVxcblxcbi5jYW5jZWw6YWN0aXZlLCAuZGVsZXRlOmFjdGl2ZSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXJlZDQwMCk7XFxufVxcblxcbiNwcmlvcml0eSB7XFxuICAgIHdpZHRoOiA4MHB4O1xcbiAgICBwYWRkaW5nOiAycHg7XFxufVxcblxcbi50YWJzLCAucHJvamVjdHMge1xcbiAgICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxuICAgIHBhZGRpbmc6IDI1cHg7XFxuICAgIHBhZGRpbmctbGVmdDogMzVweDtcXG4gICAgcGFkZGluZy1yaWdodDogNzBweDtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICByb3ctZ2FwOiAxNXB4O1xcbiAgICBmb250LXNpemU6IDEuMnJlbTtcXG59XFxuXFxuLnRhYnMge1xcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgYmxhY2s7XFxufVxcblxcbi5wcm9qZWN0cyB7XFxuICAgIHBhZGRpbmctbGVmdDogMzBweDtcXG4gICAgcm93LWdhcDogMTBweDtcXG59XFxuXFxuLnByb2plY3RzID4gc3BhbiB7XFxuICAgIGZvbnQtc2l6ZTogMS41cmVtO1xcbiAgICBmb250LXdlaWdodDogNTAwO1xcbn1cXG5cXG4udGFzaywgLnByb2plY3Qge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciBhdXRvO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgYmxhY2s7XFxuICAgIGdhcDogMTJweDtcXG59XFxuXFxuLnRvZG9zIHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ2FwOiAxNXB4O1xcbiAgICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XFxuICAgIHBhZGRpbmc6IDI1cHg7XFxuICAgIHBhZGRpbmctbGVmdDogNjBweDtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICB3aWR0aDogY2xhbXAoNTUwcHgsIDgwJSwgMTQwMHB4KTtcXG4gICAgZm9udC1zaXplOiAxcmVtO1xcbn1cXG5cXG4udGFzayA+IHNwYW4ge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLWF1dG8tZmxvdzogY29sdW1uO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBnYXA6IDI1cHg7XFxufVxcblxcbmlucHV0W3R5cGU9XFxcInJhZGlvXFxcIl0ge1xcbiAgICB3aWR0aDogMjJweDtcXG4gICAgaGVpZ2h0OiAyMnB4O1xcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICAgIGJvcmRlcjogMnB4IHNvbGlkO1xcbn1cXG5cXG5pbnB1dFt0eXBlPVxcXCJyYWRpb1xcXCJdOmNoZWNrZWQge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1lbWVyYWxkMzAwKTtcXG59XFxuXFxuLmNoZWNrIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uY2hlY2sgPiBzcGFuIHtcXG4gICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXG59XFxuXFxuLnBsdXMtaWNvbiB7XFxuICAgIHdpZHRoOiAyMnB4O1xcbn1cXG5cXG4uYWRkLXRhc2ssIC5hZGQtcHJvamVjdCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGdhcDogMTBweDtcXG4gICAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gICAgcGFkZGluZzogM3B4IDA7XFxuICAgIHBhZGRpbmctbGVmdDogM3B4O1xcbn1cXG5cXG4uYWRkLXRhc2s6aG92ZXIsXFxuLmFkZC1wcm9qZWN0OmhvdmVyLFxcbi5zaWRlYmFyLXRhYjpob3ZlcixcXG4ucHJvamVjdCA+IHNwYW46aG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1saWdodC1ncmF5LXRwKTtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uZGV0YWlscyB7XFxuICAgIGhlaWdodDogMTVweDtcXG59XFxuXFxuLmhlYWRlci1pY29uIHtcXG4gICAgd2lkdGg6IDgwcHg7XFxufVxcblxcbi5zaWRlYmFyLWljb24ge1xcbiAgICB3aWR0aDogMzVweDtcXG59XFxuXFxuLnNpZGViYXItdGFiIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgZ2FwOiA3cHg7XFxufVxcblxcbiNpbnB1dC1wcm9qZWN0LW5hbWUge1xcbiAgICB3aWR0aDogMTc1cHg7XFxuICAgIG92ZXJmbG93OiBhdXRvO1xcbn1cXG5cXG4uY3JlYXRlLXByb2plY3QgPiBkaXYge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLWF1dG8tZmxvdzogY29sdW1uO1xcbn1cXG5cXG4uYWRkLXByb2plY3QsIC5wcm9qZWN0IHtcXG4gICAgZm9udC1zaXplOiAwLjk4cmVtO1xcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICAgIHBhZGRpbmctbGVmdDogMDtcXG59XFxuXFxuLmFkZC1wcm9qZWN0ID4gLnBsdXMtaWNvbiB7XFxuICAgIHdpZHRoOiAyMnB4O1xcbn1cXG5cXG4uZGVsZXRlLWljb24ge1xcbiAgICB3aWR0aDogMjBweDtcXG59XFxuXFxuLnByb2plY3Qge1xcbiAgICBmb250LXdlaWdodDogNDAwO1xcbiAgICBwYWRkaW5nLWJvdHRvbTogNnB4O1xcbiAgICBib3JkZXItcmFkaXVzOiAwO1xcbiAgICBnYXA6IDVweDtcXG59XFxuXFxuLmFkZC10YXNrID4gc3BhbiB7XFxuICAgIHBhZGRpbmctbGVmdDogOHB4O1xcbn1cXG5cXG4uZGV0YWlsczpob3ZlciB7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnNpZGViYXItdGFiOmhvdmVyIHtcXG4gICAgcGFkZGluZzogM3B4IDA7XFxuICAgIHBhZGRpbmctbGVmdDogMnB4O1xcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDNweDtcXG59XFxuXFxuLnZpZXcge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBncmlkLWNvbHVtbjogMS8zO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxufVxcblxcbi5lZGl0LCAuZGVsZXRlIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxufVxcblxcbi5ub3RlLXNwYW4ge1xcbiAgICB3aWR0aDogY2xhbXAoNTUwcHgsIDgwJSwgMTQwMHB4KTtcXG59XFxuXFxuLnByaW9yaXR5LWVkaXQtY29udGFpbmVyIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XFxuICAgIHdpZHRoOiBjbGFtcCg4MHB4LCAxMDAlLCAxMzBweCk7XFxufVxcblxcbi5wcmlvcml0eS1lZGl0LWNvbnRhaW5lciA+IHNwYW4ge1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7ICAgIFxcbn1cXG5cXG4ucHJvamVjdCA+IHNwYW4ge1xcbiAgICB3aWR0aDogMTQwcHg7XFxuICAgIHBhZGRpbmc6IDNweCAwO1xcbiAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxufVxcblxcbi50aXRsZS1vZi10YWIgPiBzcGFuIHtcXG4gICAgZm9udC1zaXplOiAwLjhyZW07XFxuICAgIHBhZGRpbmctbGVmdDogMTBweDtcXG4gICAgY29sb3I6IHZhcigtLXppbmM2MDApO1xcbn1cXG5cXG4ucHJvamVjdC1kcm9wLWRvd24tYnV0dG9ucyB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGdyaWQtY29sdW1uOiAxLzI7XFxufVxcblxcbi5lZGl0IHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc2t5NTAwKVxcbn1cXG5cXG4uZWRpdDphY3RpdmUge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1za3k0MDApXFxufVxcblxcbi5oaWRkZW4ge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICB9IDogZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gIH0sIF90eXBlb2Yob2JqKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXF1aXJlZEFyZ3MocmVxdWlyZWQsIGFyZ3MpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoIDwgcmVxdWlyZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHJlcXVpcmVkICsgJyBhcmd1bWVudCcgKyAocmVxdWlyZWQgPiAxID8gJ3MnIDogJycpICsgJyByZXF1aXJlZCwgYnV0IG9ubHkgJyArIGFyZ3MubGVuZ3RoICsgJyBwcmVzZW50Jyk7XG4gIH1cbn0iLCJpbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSB0b0RhdGVcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgQ29udmVydCB0aGUgZ2l2ZW4gYXJndW1lbnQgdG8gYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIERhdGUsIHRoZSBmdW5jdGlvbiByZXR1cm5zIGl0cyBjbG9uZS5cbiAqXG4gKiBJZiB0aGUgYXJndW1lbnQgaXMgYSBudW1iZXIsIGl0IGlzIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXAuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIG5vbmUgb2YgdGhlIGFib3ZlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBJbnZhbGlkIERhdGUuXG4gKlxuICogKipOb3RlKio6ICphbGwqIERhdGUgYXJndW1lbnRzIHBhc3NlZCB0byBhbnkgKmRhdGUtZm5zKiBmdW5jdGlvbiBpcyBwcm9jZXNzZWQgYnkgYHRvRGF0ZWAuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gYXJndW1lbnQgLSB0aGUgdmFsdWUgdG8gY29udmVydFxuICogQHJldHVybnMge0RhdGV9IHRoZSBwYXJzZWQgZGF0ZSBpbiB0aGUgbG9jYWwgdGltZSB6b25lXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ2xvbmUgdGhlIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUobmV3IERhdGUoMjAxNCwgMSwgMTEsIDExLCAzMCwgMzApKVxuICogLy89PiBUdWUgRmViIDExIDIwMTQgMTE6MzA6MzBcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29udmVydCB0aGUgdGltZXN0YW1wIHRvIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSB0b0RhdGUoMTM5MjA5ODQzMDAwMClcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvRGF0ZShhcmd1bWVudCkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGFyZ1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCk7XG5cbiAgLy8gQ2xvbmUgdGhlIGRhdGVcbiAgaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgRGF0ZSB8fCBfdHlwZW9mKGFyZ3VtZW50KSA9PT0gJ29iamVjdCcgJiYgYXJnU3RyID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICAvLyBQcmV2ZW50IHRoZSBkYXRlIHRvIGxvc2UgdGhlIG1pbGxpc2Vjb25kcyB3aGVuIHBhc3NlZCB0byBuZXcgRGF0ZSgpIGluIElFMTBcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQuZ2V0VGltZSgpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdudW1iZXInIHx8IGFyZ1N0ciA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoYXJndW1lbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmICgodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IFN0cmluZ10nKSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXCJTdGFydGluZyB3aXRoIHYyLjAuMC1iZXRhLjEgZGF0ZS1mbnMgZG9lc24ndCBhY2NlcHQgc3RyaW5ncyBhcyBkYXRlIGFyZ3VtZW50cy4gUGxlYXNlIHVzZSBgcGFyc2VJU09gIHRvIHBhcnNlIHN0cmluZ3MuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI3N0cmluZy1hcmd1bWVudHNcIik7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKG5ldyBFcnJvcigpLnN0YWNrKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0ludGVnZXIoZGlydHlOdW1iZXIpIHtcbiAgaWYgKGRpcnR5TnVtYmVyID09PSBudWxsIHx8IGRpcnR5TnVtYmVyID09PSB0cnVlIHx8IGRpcnR5TnVtYmVyID09PSBmYWxzZSkge1xuICAgIHJldHVybiBOYU47XG4gIH1cbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XG4gIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuICByZXR1cm4gbnVtYmVyIDwgMCA/IE1hdGguY2VpbChudW1iZXIpIDogTWF0aC5mbG9vcihudW1iZXIpO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDSVNPV2VlayhkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSAxO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgdmFyIGRpZmYgPSAoZGF5IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gd2Vla1N0YXJ0c09uO1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSBkaWZmKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0VVRDRnVsbFllYXIoeWVhciArIDEsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhcik7XG4gIHZhciBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mVGhpc1llYXIgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyKTtcbiAgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5ZWFyIC0gMTtcbiAgfVxufSIsInZhciBkZWZhdWx0T3B0aW9ucyA9IHt9O1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmF1bHRPcHRpb25zKCkge1xuICByZXR1cm4gZGVmYXVsdE9wdGlvbnM7XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0RGVmYXVsdE9wdGlvbnMobmV3T3B0aW9ucykge1xuICBkZWZhdWx0T3B0aW9ucyA9IG5ld09wdGlvbnM7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENXZWVrKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICB2YXIgX3JlZiwgX3JlZjIsIF9yZWYzLCBfb3B0aW9ucyR3ZWVrU3RhcnRzT24sIF9vcHRpb25zJGxvY2FsZSwgX29wdGlvbnMkbG9jYWxlJG9wdGlvLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDI7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGVmYXVsdE9wdGlvbnMgPSBnZXREZWZhdWx0T3B0aW9ucygpO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gdG9JbnRlZ2VyKChfcmVmID0gKF9yZWYyID0gKF9yZWYzID0gKF9vcHRpb25zJHdlZWtTdGFydHNPbiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9vcHRpb25zJHdlZWtTdGFydHNPbiAhPT0gdm9pZCAwID8gX29wdGlvbnMkd2Vla1N0YXJ0c09uIDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9IF9vcHRpb25zJGxvY2FsZS5vcHRpb25zKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9vcHRpb25zJGxvY2FsZSRvcHRpby53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYzICE9PSB2b2lkIDAgPyBfcmVmMyA6IGRlZmF1bHRPcHRpb25zLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9IF9kZWZhdWx0T3B0aW9ucyRsb2NhbC5vcHRpb25zKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IDApO1xuXG4gIC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG4gIGlmICghKHdlZWtTdGFydHNPbiA+PSAwICYmIHdlZWtTdGFydHNPbiA8PSA2KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd3ZWVrU3RhcnRzT24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYgaW5jbHVzaXZlbHknKTtcbiAgfVxuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgdmFyIGRpZmYgPSAoZGF5IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gd2Vla1N0YXJ0c09uO1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSBkaWZmKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vZGVmYXVsdE9wdGlvbnMvaW5kZXguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICB2YXIgX3JlZiwgX3JlZjIsIF9yZWYzLCBfb3B0aW9ucyRmaXJzdFdlZWtDb24sIF9vcHRpb25zJGxvY2FsZSwgX29wdGlvbnMkbG9jYWxlJG9wdGlvLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDI7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IHRvSW50ZWdlcigoX3JlZiA9IChfcmVmMiA9IChfcmVmMyA9IChfb3B0aW9ucyRmaXJzdFdlZWtDb24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRmaXJzdFdlZWtDb24gIT09IHZvaWQgMCA/IF9vcHRpb25zJGZpcnN0V2Vla0NvbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPSBfb3B0aW9ucyRsb2NhbGUub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlJG9wdGlvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUkb3B0aW8uZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmMyAhPT0gdm9pZCAwID8gX3JlZjMgOiBkZWZhdWx0T3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi5maXJzdFdlZWtDb250YWluc0RhdGUpICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiAxKTtcblxuICAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDEgYW5kIDcgX2FuZF8gaXMgbm90IE5hTlxuICBpZiAoIShmaXJzdFdlZWtDb250YWluc0RhdGUgPj0gMSAmJiBmaXJzdFdlZWtDb250YWluc0RhdGUgPD0gNykpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZmlyc3RXZWVrQ29udGFpbnNEYXRlIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3IGluY2x1c2l2ZWx5Jyk7XG4gIH1cbiAgdmFyIGZpcnN0V2Vla09mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrT2ZOZXh0WWVhci5zZXRVVENGdWxsWWVhcih5ZWFyICsgMSwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrT2ZOZXh0WWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZOZXh0WWVhciA9IHN0YXJ0T2ZVVENXZWVrKGZpcnN0V2Vla09mTmV4dFllYXIsIG9wdGlvbnMpO1xuICB2YXIgZmlyc3RXZWVrT2ZUaGlzWWVhciA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWtPZlRoaXNZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vla09mVGhpc1llYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mVGhpc1llYXIgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWtPZlRoaXNZZWFyLCBvcHRpb25zKTtcbiAgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5ZWFyIC0gMTtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZExlYWRpbmdaZXJvcyhudW1iZXIsIHRhcmdldExlbmd0aCkge1xuICB2YXIgc2lnbiA9IG51bWJlciA8IDAgPyAnLScgOiAnJztcbiAgdmFyIG91dHB1dCA9IE1hdGguYWJzKG51bWJlcikudG9TdHJpbmcoKTtcbiAgd2hpbGUgKG91dHB1dC5sZW5ndGggPCB0YXJnZXRMZW5ndGgpIHtcbiAgICBvdXRwdXQgPSAnMCcgKyBvdXRwdXQ7XG4gIH1cbiAgcmV0dXJuIHNpZ24gKyBvdXRwdXQ7XG59IiwiaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tIFwiLi4vLi4vYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzXCI7XG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqL1xudmFyIGZvcm1hdHRlcnMgPSB7XG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24geShkYXRlLCB0b2tlbikge1xuICAgIC8vIEZyb20gaHR0cDovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS0zMS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9Gb3JtYXRfdG9rZW5zXG4gICAgLy8gfCBZZWFyICAgICB8ICAgICB5IHwgeXkgfCAgIHl5eSB8ICB5eXl5IHwgeXl5eXkgfFxuICAgIC8vIHwtLS0tLS0tLS0tfC0tLS0tLS18LS0tLXwtLS0tLS0tfC0tLS0tLS18LS0tLS0tLXxcbiAgICAvLyB8IEFEIDEgICAgIHwgICAgIDEgfCAwMSB8ICAgMDAxIHwgIDAwMDEgfCAwMDAwMSB8XG4gICAgLy8gfCBBRCAxMiAgICB8ICAgIDEyIHwgMTIgfCAgIDAxMiB8ICAwMDEyIHwgMDAwMTIgfFxuICAgIC8vIHwgQUQgMTIzICAgfCAgIDEyMyB8IDIzIHwgICAxMjMgfCAgMDEyMyB8IDAwMTIzIHxcbiAgICAvLyB8IEFEIDEyMzQgIHwgIDEyMzQgfCAzNCB8ICAxMjM0IHwgIDEyMzQgfCAwMTIzNCB8XG4gICAgLy8gfCBBRCAxMjM0NSB8IDEyMzQ1IHwgNDUgfCAxMjM0NSB8IDEyMzQ1IHwgMTIzNDUgfFxuXG4gICAgdmFyIHNpZ25lZFllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcbiAgICB2YXIgeWVhciA9IHNpZ25lZFllYXIgPiAwID8gc2lnbmVkWWVhciA6IDEgLSBzaWduZWRZZWFyO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModG9rZW4gPT09ICd5eScgPyB5ZWFyICUgMTAwIDogeWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gTShkYXRlLCB0b2tlbikge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICByZXR1cm4gdG9rZW4gPT09ICdNJyA/IFN0cmluZyhtb250aCArIDEpIDogYWRkTGVhZGluZ1plcm9zKG1vbnRoICsgMSwgMik7XG4gIH0sXG4gIC8vIERheSBvZiB0aGUgbW9udGhcbiAgZDogZnVuY3Rpb24gZChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENEYXRlKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIGEoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF0ZS5nZXRVVENIb3VycygpIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgY2FzZSAnYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlLnRvVXBwZXJDYXNlKCk7XG4gICAgICBjYXNlICdhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlO1xuICAgICAgY2FzZSAnYWFhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlWzBdO1xuICAgICAgY2FzZSAnYWFhYSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlID09PSAnYW0nID8gJ2EubS4nIDogJ3AubS4nO1xuICAgIH1cbiAgfSxcbiAgLy8gSG91ciBbMS0xMl1cbiAgaDogZnVuY3Rpb24gaChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEg6IGZ1bmN0aW9uIEgoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDSG91cnMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWludXRlXG4gIG06IGZ1bmN0aW9uIG0oZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDTWludXRlcygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBTZWNvbmRcbiAgczogZnVuY3Rpb24gcyhkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiBTKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIG51bWJlck9mRGlnaXRzID0gdG9rZW4ubGVuZ3RoO1xuICAgIHZhciBtaWxsaXNlY29uZHMgPSBkYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICAgIHZhciBmcmFjdGlvbmFsU2Vjb25kcyA9IE1hdGguZmxvb3IobWlsbGlzZWNvbmRzICogTWF0aC5wb3coMTAsIG51bWJlck9mRGlnaXRzIC0gMykpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZnJhY3Rpb25hbFNlY29uZHMsIHRva2VuLmxlbmd0aCk7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXJzOyIsImltcG9ydCBnZXRVVENEYXlPZlllYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDRGF5T2ZZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDSVNPV2VlayBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDSVNPV2Vla1llYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENXZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENXZWVrWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tIFwiLi4vLi4vYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzXCI7XG5pbXBvcnQgbGlnaHRGb3JtYXR0ZXJzIGZyb20gXCIuLi9saWdodEZvcm1hdHRlcnMvaW5kZXguanNcIjtcbnZhciBkYXlQZXJpb2RFbnVtID0ge1xuICBhbTogJ2FtJyxcbiAgcG06ICdwbScsXG4gIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICBub29uOiAnbm9vbicsXG4gIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICBuaWdodDogJ25pZ2h0J1xufTtcbi8qXG4gKiB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8ICBhICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBBKiB8IE1pbGxpc2Vjb25kcyBpbiBkYXkgICAgICAgICAgICB8XG4gKiB8ICBiICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICB8ICBCICB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICB8XG4gKiB8ICBjICB8IFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrICB8ICBDKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8XG4gKiB8ICBkICB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICB8ICBEICB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBlICB8IExvY2FsIGRheSBvZiB3ZWVrICAgICAgICAgICAgICB8ICBFICB8IERheSBvZiB3ZWVrICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBmICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBGKiB8IERheSBvZiB3ZWVrIGluIG1vbnRoICAgICAgICAgICB8XG4gKiB8ICBnKiB8IE1vZGlmaWVkIEp1bGlhbiBkYXkgICAgICAgICAgICB8ICBHICB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBoICB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICB8ICBIICB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBpISB8IElTTyBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgICB8ICBJISB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICB8XG4gKiB8ICBqKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8ICBKKiB8IExvY2FsaXplZCBob3VyIHcvbyBkYXkgcGVyaW9kICB8XG4gKiB8ICBrICB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICB8ICBLICB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBsKiB8IChkZXByZWNhdGVkKSAgICAgICAgICAgICAgICAgICB8ICBMICB8IFN0YW5kLWFsb25lIG1vbnRoICAgICAgICAgICAgICB8XG4gKiB8ICBtICB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBNICB8IE1vbnRoICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBuICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBOICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBvISB8IE9yZGluYWwgbnVtYmVyIG1vZGlmaWVyICAgICAgICB8ICBPICB8IFRpbWV6b25lIChHTVQpICAgICAgICAgICAgICAgICB8XG4gKiB8ICBwISB8IExvbmcgbG9jYWxpemVkIHRpbWUgICAgICAgICAgICB8ICBQISB8IExvbmcgbG9jYWxpemVkIGRhdGUgICAgICAgICAgICB8XG4gKiB8ICBxICB8IFN0YW5kLWFsb25lIHF1YXJ0ZXIgICAgICAgICAgICB8ICBRICB8IFF1YXJ0ZXIgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICByKiB8IFJlbGF0ZWQgR3JlZ29yaWFuIHllYXIgICAgICAgICB8ICBSISB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICB8XG4gKiB8ICBzICB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICB8ICBTICB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICB8XG4gKiB8ICB0ISB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICB8ICBUISB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICB8XG4gKiB8ICB1ICB8IEV4dGVuZGVkIHllYXIgICAgICAgICAgICAgICAgICB8ICBVKiB8IEN5Y2xpYyB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICB2KiB8IFRpbWV6b25lIChnZW5lcmljIG5vbi1sb2NhdC4pICB8ICBWKiB8IFRpbWV6b25lIChsb2NhdGlvbikgICAgICAgICAgICB8XG4gKiB8ICB3ICB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICB8ICBXKiB8IFdlZWsgb2YgbW9udGggICAgICAgICAgICAgICAgICB8XG4gKiB8ICB4ICB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICB8ICBYICB8IFRpbWV6b25lIChJU08tODYwMSkgICAgICAgICAgICB8XG4gKiB8ICB5ICB8IFllYXIgKGFicykgICAgICAgICAgICAgICAgICAgICB8ICBZICB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICB8XG4gKiB8ICB6ICB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSB8ICBaKiB8IFRpbWV6b25lIChhbGlhc2VzKSAgICAgICAgICAgICB8XG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgKiBhcmUgbm90IGltcGxlbWVudGVkIGJ1dCByZXNlcnZlZCBieSBVbmljb2RlIHN0YW5kYXJkLlxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICEgYXJlIG5vbi1zdGFuZGFyZCwgYnV0IGltcGxlbWVudGVkIGJ5IGRhdGUtZm5zOlxuICogLSBgb2AgbW9kaWZpZXMgdGhlIHByZXZpb3VzIHRva2VuIHRvIHR1cm4gaXQgaW50byBhbiBvcmRpbmFsIChzZWUgYGZvcm1hdGAgZG9jcylcbiAqIC0gYGlgIGlzIElTTyBkYXkgb2Ygd2Vlay4gRm9yIGBpYCBhbmQgYGlpYCBpcyByZXR1cm5zIG51bWVyaWMgSVNPIHdlZWsgZGF5cyxcbiAqICAgaS5lLiA3IGZvciBTdW5kYXksIDEgZm9yIE1vbmRheSwgZXRjLlxuICogLSBgSWAgaXMgSVNPIHdlZWsgb2YgeWVhciwgYXMgb3Bwb3NlZCB0byBgd2Agd2hpY2ggaXMgbG9jYWwgd2VlayBvZiB5ZWFyLlxuICogLSBgUmAgaXMgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIsIGFzIG9wcG9zZWQgdG8gYFlgIHdoaWNoIGlzIGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIuXG4gKiAgIGBSYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYElgIGFuZCBgaWBcbiAqICAgZm9yIHVuaXZlcnNhbCBJU08gd2Vlay1udW1iZXJpbmcgZGF0ZSwgd2hlcmVhc1xuICogICBgWWAgaXMgc3VwcG9zZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGB3YCBhbmQgYGVgXG4gKiAgIGZvciB3ZWVrLW51bWJlcmluZyBkYXRlIHNwZWNpZmljIHRvIHRoZSBsb2NhbGUuXG4gKiAtIGBQYCBpcyBsb25nIGxvY2FsaXplZCBkYXRlIGZvcm1hdFxuICogLSBgcGAgaXMgbG9uZyBsb2NhbGl6ZWQgdGltZSBmb3JtYXRcbiAqL1xuXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gRXJhXG4gIEc6IGZ1bmN0aW9uIEcoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGVyYSA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKSA+IDAgPyAxIDogMDtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBBRCwgQkNcbiAgICAgIGNhc2UgJ0cnOlxuICAgICAgY2FzZSAnR0cnOlxuICAgICAgY2FzZSAnR0dHJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEEsIEJcbiAgICAgIGNhc2UgJ0dHR0dHJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdydcbiAgICAgICAgfSk7XG4gICAgICAvLyBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdFxuICAgICAgY2FzZSAnR0dHRyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBZZWFyXG4gIHk6IGZ1bmN0aW9uIHkoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgLy8gT3JkaW5hbCBudW1iZXJcbiAgICBpZiAodG9rZW4gPT09ICd5bycpIHtcbiAgICAgIHZhciBzaWduZWRZZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICAgICAgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcbiAgICAgIHZhciB5ZWFyID0gc2lnbmVkWWVhciA+IDAgPyBzaWduZWRZZWFyIDogMSAtIHNpZ25lZFllYXI7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih5ZWFyLCB7XG4gICAgICAgIHVuaXQ6ICd5ZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMueShkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgWTogZnVuY3Rpb24gWShkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgc2lnbmVkV2Vla1llYXIgPSBnZXRVVENXZWVrWWVhcihkYXRlLCBvcHRpb25zKTtcbiAgICAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuICAgIHZhciB3ZWVrWWVhciA9IHNpZ25lZFdlZWtZZWFyID4gMCA/IHNpZ25lZFdlZWtZZWFyIDogMSAtIHNpZ25lZFdlZWtZZWFyO1xuXG4gICAgLy8gVHdvIGRpZ2l0IHllYXJcbiAgICBpZiAodG9rZW4gPT09ICdZWScpIHtcbiAgICAgIHZhciB0d29EaWdpdFllYXIgPSB3ZWVrWWVhciAlIDEwMDtcbiAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModHdvRGlnaXRZZWFyLCAyKTtcbiAgICB9XG5cbiAgICAvLyBPcmRpbmFsIG51bWJlclxuICAgIGlmICh0b2tlbiA9PT0gJ1lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vla1llYXIsIHtcbiAgICAgICAgdW5pdDogJ3llYXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBQYWRkaW5nXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh3ZWVrWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAgUjogZnVuY3Rpb24gUihkYXRlLCB0b2tlbikge1xuICAgIHZhciBpc29XZWVrWWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRhdGUpO1xuXG4gICAgLy8gUGFkZGluZ1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvV2Vla1llYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEV4dGVuZGVkIHllYXIuIFRoaXMgaXMgYSBzaW5nbGUgbnVtYmVyIGRlc2lnbmF0aW5nIHRoZSB5ZWFyIG9mIHRoaXMgY2FsZW5kYXIgc3lzdGVtLlxuICAvLyBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgbG9jYWxpemVycyBhcmUgQi5DLiB5ZWFyczpcbiAgLy8gfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAgLy8gfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAgLy8gfCBBQyAxIHwgICAxIHwgICAxIHxcbiAgLy8gfCBCQyAxIHwgICAxIHwgICAwIHxcbiAgLy8gfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAgLy8gQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICAvLyB3aGlsZSBgdXVgIHBhZHMgc2luZ2xlIGRpZ2l0IHllYXJzIHRvIDIgY2hhcmFjdGVycyBhbmQgcmV0dXJucyBvdGhlciB5ZWFycyB1bmNoYW5nZWQuXG4gIHU6IGZ1bmN0aW9uIHUoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIFF1YXJ0ZXJcbiAgUTogZnVuY3Rpb24gUShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgcXVhcnRlciA9IE1hdGguY2VpbCgoZGF0ZS5nZXRVVENNb250aCgpICsgMSkgLyAzKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdRJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG4gICAgICBjYXNlICdRUSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcbiAgICAgIGNhc2UgJ1FvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIocXVhcnRlciwge1xuICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG4gICAgICBjYXNlICdRUVEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG4gICAgICBjYXNlICdRUVFRUSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cbiAgICAgIGNhc2UgJ1FRUVEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgcXVhcnRlclxuICBxOiBmdW5jdGlvbiBxKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSAvIDMpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgIGNhc2UgJ3EnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKHF1YXJ0ZXIpO1xuICAgICAgLy8gMDEsIDAyLCAwMywgMDRcbiAgICAgIGNhc2UgJ3FxJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhxdWFydGVyLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuICAgICAgY2FzZSAncW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7XG4gICAgICAgICAgdW5pdDogJ3F1YXJ0ZXInXG4gICAgICAgIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcbiAgICAgIGNhc2UgJ3FxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcbiAgICAgIGNhc2UgJ3FxcXFxJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLlxuICAgICAgY2FzZSAncXFxcSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBNb250aFxuICBNOiBmdW5jdGlvbiBNKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdNJzpcbiAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5NKGRhdGUsIHRva2VuKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcbiAgICAgIGNhc2UgJ01vJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobW9udGggKyAxLCB7XG4gICAgICAgICAgdW5pdDogJ21vbnRoJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbiwgRmViLCAuLi4sIERlY1xuICAgICAgY2FzZSAnTU1NJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG4gICAgICBjYXNlICdNTU1NTSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuICAgICAgY2FzZSAnTU1NTSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIG1vbnRoXG4gIEw6IGZ1bmN0aW9uIEwoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIC4uLiwgMTJcbiAgICAgIGNhc2UgJ0wnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKG1vbnRoICsgMSk7XG4gICAgICAvLyAwMSwgMDIsIC4uLiwgMTJcbiAgICAgIGNhc2UgJ0xMJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuICAgICAgY2FzZSAnTG8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHtcbiAgICAgICAgICB1bml0OiAnbW9udGgnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG4gICAgICBjYXNlICdMTEwnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKLCBGLCAuLi4sIERcbiAgICAgIGNhc2UgJ0xMTExMJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG4gICAgICBjYXNlICdMTExMJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgd2VlayBvZiB5ZWFyXG4gIHc6IGZ1bmN0aW9uIHcoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIHdlZWsgPSBnZXRVVENXZWVrKGRhdGUsIG9wdGlvbnMpO1xuICAgIGlmICh0b2tlbiA9PT0gJ3dvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIod2Vlaywge1xuICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHdlZWssIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIElTTyB3ZWVrIG9mIHllYXJcbiAgSTogZnVuY3Rpb24gSShkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaXNvV2VlayA9IGdldFVUQ0lTT1dlZWsoZGF0ZSk7XG4gICAgaWYgKHRva2VuID09PSAnSW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29XZWVrLCB7XG4gICAgICAgIHVuaXQ6ICd3ZWVrJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHRoZSBtb250aFxuICBkOiBmdW5jdGlvbiBkKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ2RvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENEYXRlKCksIHtcbiAgICAgICAgdW5pdDogJ2RhdGUnXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5kKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHllYXJcbiAgRDogZnVuY3Rpb24gRChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZZZWFyID0gZ2V0VVRDRGF5T2ZZZWFyKGRhdGUpO1xuICAgIGlmICh0b2tlbiA9PT0gJ0RvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF5T2ZZZWFyLCB7XG4gICAgICAgIHVuaXQ6ICdkYXlPZlllYXInXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXlPZlllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIERheSBvZiB3ZWVrXG4gIEU6IGZ1bmN0aW9uIEUoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gVHVlXG4gICAgICBjYXNlICdFJzpcbiAgICAgIGNhc2UgJ0VFJzpcbiAgICAgIGNhc2UgJ0VFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuICAgICAgY2FzZSAnRUVFRUUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuICAgICAgY2FzZSAnRUVFRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG4gICAgICBjYXNlICdFRUVFJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBMb2NhbCBkYXkgb2Ygd2Vla1xuICBlOiBmdW5jdGlvbiBlKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBsb2NhbERheU9mV2VlayA9IChkYXlPZldlZWsgLSBvcHRpb25zLndlZWtTdGFydHNPbiArIDgpICUgNyB8fCA3O1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoTnRoIGRheSBvZiB3ZWVrIHdpdGggY3VycmVudCBsb2NhbGUgb3Igd2Vla1N0YXJ0c09uKVxuICAgICAgY2FzZSAnZSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobG9jYWxEYXlPZldlZWspO1xuICAgICAgLy8gUGFkZGVkIG51bWVyaWNhbCB2YWx1ZVxuICAgICAgY2FzZSAnZWUnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGxvY2FsRGF5T2ZXZWVrLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuICAgICAgY2FzZSAnZW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihsb2NhbERheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG4gICAgICBjYXNlICdlZWVlZSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG4gICAgICBjYXNlICdlZWVlZWUnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcbiAgICAgIGNhc2UgJ2VlZWUnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrXG4gIGM6IGZ1bmN0aW9uIGMoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGxvY2FsRGF5T2ZXZWVrID0gKGRheU9mV2VlayAtIG9wdGlvbnMud2Vla1N0YXJ0c09uICsgOCkgJSA3IHx8IDc7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gTnVtZXJpY2FsIHZhbHVlIChzYW1lIGFzIGluIGBlYClcbiAgICAgIGNhc2UgJ2MnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGxvY2FsRGF5T2ZXZWVrKTtcbiAgICAgIC8vIFBhZGRlZCBudW1lcmljYWwgdmFsdWVcbiAgICAgIGNhc2UgJ2NjJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuICAgICAgY2FzZSAnY28nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihsb2NhbERheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuICAgICAgY2FzZSAnY2NjJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG4gICAgICBjYXNlICdjY2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG4gICAgICBjYXNlICdjY2NjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcbiAgICAgIGNhc2UgJ2NjY2MnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIElTTyBkYXkgb2Ygd2Vla1xuICBpOiBmdW5jdGlvbiBpKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBpc29EYXlPZldlZWsgPSBkYXlPZldlZWsgPT09IDAgPyA3IDogZGF5T2ZXZWVrO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDJcbiAgICAgIGNhc2UgJ2knOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGlzb0RheU9mV2Vlayk7XG4gICAgICAvLyAwMlxuICAgICAgY2FzZSAnaWknOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb0RheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDJuZFxuICAgICAgY2FzZSAnaW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29EYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZVxuICAgICAgY2FzZSAnaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG4gICAgICBjYXNlICdpaWlpaSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG4gICAgICBjYXNlICdpaWlpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcbiAgICAgIGNhc2UgJ2lpaWknOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIGEoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICBjYXNlICdhYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KS50b0xvd2VyQ2FzZSgpO1xuICAgICAgY2FzZSAnYWFhYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICBjYXNlICdhYWFhJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSwgUE0sIG1pZG5pZ2h0LCBub29uXG4gIGI6IGZ1bmN0aW9uIGIoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWU7XG4gICAgaWYgKGhvdXJzID09PSAxMikge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5ub29uO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPT09IDApIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubWlkbmlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGhvdXJzIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuICAgIH1cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdiJzpcbiAgICAgIGNhc2UgJ2JiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICBjYXNlICdiYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KS50b0xvd2VyQ2FzZSgpO1xuICAgICAgY2FzZSAnYmJiYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICBjYXNlICdiYmJiJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBpbiB0aGUgbW9ybmluZywgaW4gdGhlIGFmdGVybm9vbiwgaW4gdGhlIGV2ZW5pbmcsIGF0IG5pZ2h0XG4gIEI6IGZ1bmN0aW9uIEIoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWU7XG4gICAgaWYgKGhvdXJzID49IDE3KSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLmV2ZW5pbmc7XG4gICAgfSBlbHNlIGlmIChob3VycyA+PSAxMikge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5hZnRlcm5vb247XG4gICAgfSBlbHNlIGlmIChob3VycyA+PSA0KSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1vcm5pbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubmlnaHQ7XG4gICAgfVxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ0InOlxuICAgICAgY2FzZSAnQkInOlxuICAgICAgY2FzZSAnQkJCJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICBjYXNlICdCQkJCQic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIGNhc2UgJ0JCQkInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIGgoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnaG8nKSB7XG4gICAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMjtcbiAgICAgIGlmIChob3VycyA9PT0gMCkgaG91cnMgPSAxMjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuaChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEg6IGZ1bmN0aW9uIEgoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnSG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ0hvdXJzKCksIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5IKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0xMV1cbiAgSzogZnVuY3Rpb24gSyhkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMjtcbiAgICBpZiAodG9rZW4gPT09ICdLbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzEtMjRdXG4gIGs6IGZ1bmN0aW9uIGsoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIGlmIChob3VycyA9PT0gMCkgaG91cnMgPSAyNDtcbiAgICBpZiAodG9rZW4gPT09ICdrbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbnV0ZVxuICBtOiBmdW5jdGlvbiBtKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ21vJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENNaW51dGVzKCksIHtcbiAgICAgICAgdW5pdDogJ21pbnV0ZSdcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLm0oZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBTZWNvbmRcbiAgczogZnVuY3Rpb24gcyhkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdzbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDU2Vjb25kcygpLCB7XG4gICAgICAgIHVuaXQ6ICdzZWNvbmQnXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5zKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gRnJhY3Rpb24gb2Ygc2Vjb25kXG4gIFM6IGZ1bmN0aW9uIFMoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLlMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuIElmIG9mZnNldCBpcyAwLCBvdXRwdXQgaXMgYWx3YXlzIGAnWidgKVxuICBYOiBmdW5jdGlvbiBYKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgaWYgKHRpbWV6b25lT2Zmc2V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gJ1onO1xuICAgIH1cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBIb3VycyBhbmQgb3B0aW9uYWwgbWludXRlc1xuICAgICAgY2FzZSAnWCc6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXModGltZXpvbmVPZmZzZXQpO1xuXG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWGBcbiAgICAgIGNhc2UgJ1hYWFgnOlxuICAgICAgY2FzZSAnWFgnOlxuICAgICAgICAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0KTtcblxuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgWFhYYFxuICAgICAgY2FzZSAnWFhYWFgnOlxuICAgICAgY2FzZSAnWFhYJzogLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuIElmIG9mZnNldCBpcyAwLCBvdXRwdXQgaXMgYCcrMDA6MDAnYCBvciBlcXVpdmFsZW50KVxuICB4OiBmdW5jdGlvbiB4KGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ3gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcblxuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgeHhgXG4gICAgICBjYXNlICd4eHh4JzpcbiAgICAgIGNhc2UgJ3h4JzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG5cbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4eGBcbiAgICAgIGNhc2UgJ3h4eHh4JzpcbiAgICAgIGNhc2UgJ3h4eCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKEdNVClcbiAgTzogZnVuY3Rpb24gTyhkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFNob3J0XG4gICAgICBjYXNlICdPJzpcbiAgICAgIGNhc2UgJ09PJzpcbiAgICAgIGNhc2UgJ09PTyc6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lU2hvcnQodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgICAvLyBMb25nXG4gICAgICBjYXNlICdPT09PJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdGlvbilcbiAgejogZnVuY3Rpb24geihkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIFNob3J0XG4gICAgICBjYXNlICd6JzpcbiAgICAgIGNhc2UgJ3p6JzpcbiAgICAgIGNhc2UgJ3p6eic6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lU2hvcnQodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgICAvLyBMb25nXG4gICAgICBjYXNlICd6enp6JzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gU2Vjb25kcyB0aW1lc3RhbXBcbiAgdDogZnVuY3Rpb24gdChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKG9yaWdpbmFsRGF0ZS5nZXRUaW1lKCkgLyAxMDAwKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRpbWVzdGFtcCwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICBUOiBmdW5jdGlvbiBUKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWVzdGFtcCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lKCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0aW1lc3RhbXAsIHRva2VuLmxlbmd0aCk7XG4gIH1cbn07XG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZVNob3J0KG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICB2YXIgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KTtcbiAgdmFyIGhvdXJzID0gTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCk7XG4gIHZhciBtaW51dGVzID0gYWJzT2Zmc2V0ICUgNjA7XG4gIGlmIChtaW51dGVzID09PSAwKSB7XG4gICAgcmV0dXJuIHNpZ24gKyBTdHJpbmcoaG91cnMpO1xuICB9XG4gIHZhciBkZWxpbWl0ZXIgPSBkaXJ0eURlbGltaXRlciB8fCAnJztcbiAgcmV0dXJuIHNpZ24gKyBTdHJpbmcoaG91cnMpICsgZGVsaW1pdGVyICsgYWRkTGVhZGluZ1plcm9zKG1pbnV0ZXMsIDIpO1xufVxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgaWYgKG9mZnNldCAlIDYwID09PSAwKSB7XG4gICAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICAgIHJldHVybiBzaWduICsgYWRkTGVhZGluZ1plcm9zKE1hdGguYWJzKG9mZnNldCkgLyA2MCwgMik7XG4gIH1cbiAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpO1xufVxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltaXRlcikge1xuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgdmFyIGFic09mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gIHZhciBob3VycyA9IGFkZExlYWRpbmdaZXJvcyhNYXRoLmZsb29yKGFic09mZnNldCAvIDYwKSwgMik7XG4gIHZhciBtaW51dGVzID0gYWRkTGVhZGluZ1plcm9zKGFic09mZnNldCAlIDYwLCAyKTtcbiAgcmV0dXJuIHNpZ24gKyBob3VycyArIGRlbGltaXRlciArIG1pbnV0ZXM7XG59XG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXJzOyIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrWWVhciBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fV0VFSyA9IDYwNDgwMDAwMDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ1dlZWsoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGlmZiA9IHN0YXJ0T2ZVVENXZWVrKGRhdGUsIG9wdGlvbnMpLmdldFRpbWUoKSAtIHN0YXJ0T2ZVVENXZWVrWWVhcihkYXRlLCBvcHRpb25zKS5nZXRUaW1lKCk7XG5cbiAgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIE1JTExJU0VDT05EU19JTl9XRUVLKSArIDE7XG59IiwiaW1wb3J0IGdldFVUQ1dlZWtZZWFyIGZyb20gXCIuLi9nZXRVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB7IGdldERlZmF1bHRPcHRpb25zIH0gZnJvbSBcIi4uL2RlZmF1bHRPcHRpb25zL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDV2Vla1llYXIoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHZhciBfcmVmLCBfcmVmMiwgX3JlZjMsIF9vcHRpb25zJGZpcnN0V2Vla0NvbiwgX29wdGlvbnMkbG9jYWxlLCBfb3B0aW9ucyRsb2NhbGUkb3B0aW8sIF9kZWZhdWx0T3B0aW9ucyRsb2NhbCwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMjtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IGdldERlZmF1bHRPcHRpb25zKCk7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSB0b0ludGVnZXIoKF9yZWYgPSAoX3JlZjIgPSAoX3JlZjMgPSAoX29wdGlvbnMkZmlyc3RXZWVrQ29uID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX29wdGlvbnMkZmlyc3RXZWVrQ29uICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRmaXJzdFdlZWtDb24gOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUgPSBvcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX29wdGlvbnMkbG9jYWxlJG9wdGlvID0gX29wdGlvbnMkbG9jYWxlLm9wdGlvbnMpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZSRvcHRpbyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbnMkbG9jYWxlJG9wdGlvLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjMgIT09IHZvaWQgMCA/IF9yZWYzIDogZGVmYXVsdE9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmMiAhPT0gdm9pZCAwID8gX3JlZjIgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsID0gZGVmYXVsdE9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsLm9wdGlvbnMpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmICE9PSB2b2lkIDAgPyBfcmVmIDogMSk7XG4gIHZhciB5ZWFyID0gZ2V0VVRDV2Vla1llYXIoZGlydHlEYXRlLCBvcHRpb25zKTtcbiAgdmFyIGZpcnN0V2VlayA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWsuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgZGF0ZSA9IHN0YXJ0T2ZVVENXZWVrKGZpcnN0V2Vlaywgb3B0aW9ucyk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fV0VFSyA9IDYwNDgwMDAwMDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0lTT1dlZWsoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGlmZiA9IHN0YXJ0T2ZVVENJU09XZWVrKGRhdGUpLmdldFRpbWUoKSAtIHN0YXJ0T2ZVVENJU09XZWVrWWVhcihkYXRlKS5nZXRUaW1lKCk7XG5cbiAgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvIE1JTExJU0VDT05EU19JTl9XRUVLKSArIDE7XG59IiwiaW1wb3J0IGdldFVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgeWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSk7XG4gIHZhciBmb3VydGhPZkphbnVhcnkgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5KTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fREFZID0gODY0MDAwMDA7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENEYXlPZlllYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgdGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mWWVhclRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICB2YXIgZGlmZmVyZW5jZSA9IHRpbWVzdGFtcCAtIHN0YXJ0T2ZZZWFyVGltZXN0YW1wO1xuICByZXR1cm4gTWF0aC5mbG9vcihkaWZmZXJlbmNlIC8gTUlMTElTRUNPTkRTX0lOX0RBWSkgKyAxO1xufSIsInZhciBkYXRlTG9uZ0Zvcm1hdHRlciA9IGZ1bmN0aW9uIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSAnUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuICAgIGNhc2UgJ1BQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuICAgIGNhc2UgJ1BQUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG4gICAgY2FzZSAnUFBQUCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgfVxufTtcbnZhciB0aW1lTG9uZ0Zvcm1hdHRlciA9IGZ1bmN0aW9uIHRpbWVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSAncCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuICAgIGNhc2UgJ3BwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuICAgIGNhc2UgJ3BwcCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG4gICAgY2FzZSAncHBwcCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgfVxufTtcbnZhciBkYXRlVGltZUxvbmdGb3JtYXR0ZXIgPSBmdW5jdGlvbiBkYXRlVGltZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICB2YXIgbWF0Y2hSZXN1bHQgPSBwYXR0ZXJuLm1hdGNoKC8oUCspKHArKT8vKSB8fCBbXTtcbiAgdmFyIGRhdGVQYXR0ZXJuID0gbWF0Y2hSZXN1bHRbMV07XG4gIHZhciB0aW1lUGF0dGVybiA9IG1hdGNoUmVzdWx0WzJdO1xuICBpZiAoIXRpbWVQYXR0ZXJuKSB7XG4gICAgcmV0dXJuIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpO1xuICB9XG4gIHZhciBkYXRlVGltZUZvcm1hdDtcbiAgc3dpdGNoIChkYXRlUGF0dGVybikge1xuICAgIGNhc2UgJ1AnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ1BQUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ1BQUFAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiBkYXRlVGltZUZvcm1hdC5yZXBsYWNlKCd7e2RhdGV9fScsIGRhdGVMb25nRm9ybWF0dGVyKGRhdGVQYXR0ZXJuLCBmb3JtYXRMb25nKSkucmVwbGFjZSgne3t0aW1lfX0nLCB0aW1lTG9uZ0Zvcm1hdHRlcih0aW1lUGF0dGVybiwgZm9ybWF0TG9uZykpO1xufTtcbnZhciBsb25nRm9ybWF0dGVycyA9IHtcbiAgcDogdGltZUxvbmdGb3JtYXR0ZXIsXG4gIFA6IGRhdGVUaW1lTG9uZ0Zvcm1hdHRlclxufTtcbmV4cG9ydCBkZWZhdWx0IGxvbmdGb3JtYXR0ZXJzOyIsInZhciBwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMgPSBbJ0QnLCAnREQnXTtcbnZhciBwcm90ZWN0ZWRXZWVrWWVhclRva2VucyA9IFsnWVknLCAnWVlZWSddO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4odG9rZW4pIHtcbiAgcmV0dXJuIHByb3RlY3RlZERheU9mWWVhclRva2Vucy5pbmRleE9mKHRva2VuKSAhPT0gLTE7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuKHRva2VuKSB7XG4gIHJldHVybiBwcm90ZWN0ZWRXZWVrWWVhclRva2Vucy5pbmRleE9mKHRva2VuKSAhPT0gLTE7XG59XG5leHBvcnQgZnVuY3Rpb24gdGhyb3dQcm90ZWN0ZWRFcnJvcih0b2tlbiwgZm9ybWF0LCBpbnB1dCkge1xuICBpZiAodG9rZW4gPT09ICdZWVlZJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGB5eXl5YCBpbnN0ZWFkIG9mIGBZWVlZYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFwiKSk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09ICdZWScpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgeXlgIGluc3RlYWQgb2YgYFlZYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFwiKSk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09ICdEJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGBkYCBpbnN0ZWFkIG9mIGBEYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFwiKSk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09ICdERCcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgZGRgIGluc3RlYWQgb2YgYEREYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFwiKSk7XG4gIH1cbn0iLCJ2YXIgZm9ybWF0RGlzdGFuY2VMb2NhbGUgPSB7XG4gIGxlc3NUaGFuWFNlY29uZHM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBzZWNvbmQnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBzZWNvbmRzJ1xuICB9LFxuICB4U2Vjb25kczoge1xuICAgIG9uZTogJzEgc2Vjb25kJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBzZWNvbmRzJ1xuICB9LFxuICBoYWxmQU1pbnV0ZTogJ2hhbGYgYSBtaW51dGUnLFxuICBsZXNzVGhhblhNaW51dGVzOiB7XG4gICAgb25lOiAnbGVzcyB0aGFuIGEgbWludXRlJyxcbiAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gbWludXRlcydcbiAgfSxcbiAgeE1pbnV0ZXM6IHtcbiAgICBvbmU6ICcxIG1pbnV0ZScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbWludXRlcydcbiAgfSxcbiAgYWJvdXRYSG91cnM6IHtcbiAgICBvbmU6ICdhYm91dCAxIGhvdXInLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IGhvdXJzJ1xuICB9LFxuICB4SG91cnM6IHtcbiAgICBvbmU6ICcxIGhvdXInLFxuICAgIG90aGVyOiAne3tjb3VudH19IGhvdXJzJ1xuICB9LFxuICB4RGF5czoge1xuICAgIG9uZTogJzEgZGF5JyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBkYXlzJ1xuICB9LFxuICBhYm91dFhXZWVrczoge1xuICAgIG9uZTogJ2Fib3V0IDEgd2VlaycsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gd2Vla3MnXG4gIH0sXG4gIHhXZWVrczoge1xuICAgIG9uZTogJzEgd2VlaycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gd2Vla3MnXG4gIH0sXG4gIGFib3V0WE1vbnRoczoge1xuICAgIG9uZTogJ2Fib3V0IDEgbW9udGgnLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IG1vbnRocydcbiAgfSxcbiAgeE1vbnRoczoge1xuICAgIG9uZTogJzEgbW9udGgnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1vbnRocydcbiAgfSxcbiAgYWJvdXRYWWVhcnM6IHtcbiAgICBvbmU6ICdhYm91dCAxIHllYXInLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHllYXJzJ1xuICB9LFxuICB4WWVhcnM6IHtcbiAgICBvbmU6ICcxIHllYXInLFxuICAgIG90aGVyOiAne3tjb3VudH19IHllYXJzJ1xuICB9LFxuICBvdmVyWFllYXJzOiB7XG4gICAgb25lOiAnb3ZlciAxIHllYXInLFxuICAgIG90aGVyOiAnb3ZlciB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIGFsbW9zdFhZZWFyczoge1xuICAgIG9uZTogJ2FsbW9zdCAxIHllYXInLFxuICAgIG90aGVyOiAnYWxtb3N0IHt7Y291bnR9fSB5ZWFycydcbiAgfVxufTtcbnZhciBmb3JtYXREaXN0YW5jZSA9IGZ1bmN0aW9uIGZvcm1hdERpc3RhbmNlKHRva2VuLCBjb3VudCwgb3B0aW9ucykge1xuICB2YXIgcmVzdWx0O1xuICB2YXIgdG9rZW5WYWx1ZSA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXTtcbiAgaWYgKHR5cGVvZiB0b2tlblZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJlc3VsdCA9IHRva2VuVmFsdWU7XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlLm9uZTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlLm90aGVyLnJlcGxhY2UoJ3t7Y291bnR9fScsIGNvdW50LnRvU3RyaW5nKCkpO1xuICB9XG4gIGlmIChvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLmFkZFN1ZmZpeCkge1xuICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gJiYgb3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuICdpbiAnICsgcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgJyBhZ28nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdERpc3RhbmNlOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRm9ybWF0TG9uZ0ZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgLy8gVE9ETzogUmVtb3ZlIFN0cmluZygpXG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgIHZhciBmb3JtYXQgPSBhcmdzLmZvcm1hdHNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0c1thcmdzLmRlZmF1bHRXaWR0aF07XG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfTtcbn0iLCJpbXBvcnQgYnVpbGRGb3JtYXRMb25nRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRGb3JtYXRMb25nRm4vaW5kZXguanNcIjtcbnZhciBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0VFRUUsIE1NTU0gZG8sIHknLFxuICBsb25nOiAnTU1NTSBkbywgeScsXG4gIG1lZGl1bTogJ01NTSBkLCB5JyxcbiAgc2hvcnQ6ICdNTS9kZC95eXl5J1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ2g6bW06c3MgYSB6enp6JyxcbiAgbG9uZzogJ2g6bW06c3MgYSB6JyxcbiAgbWVkaXVtOiAnaDptbTpzcyBhJyxcbiAgc2hvcnQ6ICdoOm1tIGEnXG59O1xudmFyIGRhdGVUaW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSwge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19LCB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIGRhdGVUaW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TG9uZzsiLCJ2YXIgZm9ybWF0UmVsYXRpdmVMb2NhbGUgPSB7XG4gIGxhc3RXZWVrOiBcIidsYXN0JyBlZWVlICdhdCcgcFwiLFxuICB5ZXN0ZXJkYXk6IFwiJ3llc3RlcmRheSBhdCcgcFwiLFxuICB0b2RheTogXCIndG9kYXkgYXQnIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ3RvbW9ycm93IGF0JyBwXCIsXG4gIG5leHRXZWVrOiBcImVlZWUgJ2F0JyBwXCIsXG4gIG90aGVyOiAnUCdcbn07XG52YXIgZm9ybWF0UmVsYXRpdmUgPSBmdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZSh0b2tlbiwgX2RhdGUsIF9iYXNlRGF0ZSwgX29wdGlvbnMpIHtcbiAgcmV0dXJuIGZvcm1hdFJlbGF0aXZlTG9jYWxlW3Rva2VuXTtcbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXRSZWxhdGl2ZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZExvY2FsaXplRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpcnR5SW5kZXgsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29udGV4dCA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMuY29udGV4dCA/IFN0cmluZyhvcHRpb25zLmNvbnRleHQpIDogJ3N0YW5kYWxvbmUnO1xuICAgIHZhciB2YWx1ZXNBcnJheTtcbiAgICBpZiAoY29udGV4dCA9PT0gJ2Zvcm1hdHRpbmcnICYmIGFyZ3MuZm9ybWF0dGluZ1ZhbHVlcykge1xuICAgICAgdmFyIGRlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdEZvcm1hdHRpbmdXaWR0aCB8fCBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICAgIHZhciB3aWR0aCA9IG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwICYmIG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBkZWZhdWx0V2lkdGg7XG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1t3aWR0aF0gfHwgYXJncy5mb3JtYXR0aW5nVmFsdWVzW2RlZmF1bHRXaWR0aF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfZGVmYXVsdFdpZHRoID0gYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgICB2YXIgX3dpZHRoID0gb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuICAgICAgdmFsdWVzQXJyYXkgPSBhcmdzLnZhbHVlc1tfd2lkdGhdIHx8IGFyZ3MudmFsdWVzW19kZWZhdWx0V2lkdGhdO1xuICAgIH1cbiAgICB2YXIgaW5kZXggPSBhcmdzLmFyZ3VtZW50Q2FsbGJhY2sgPyBhcmdzLmFyZ3VtZW50Q2FsbGJhY2soZGlydHlJbmRleCkgOiBkaXJ0eUluZGV4O1xuICAgIC8vIEB0cy1pZ25vcmU6IEZvciBzb21lIHJlYXNvbiBUeXBlU2NyaXB0IGp1c3QgZG9uJ3Qgd2FudCB0byBtYXRjaCBpdCwgbm8gbWF0dGVyIGhvdyBoYXJkIHdlIHRyeS4gSSBjaGFsbGVuZ2UgeW91IHRvIHRyeSB0byByZW1vdmUgaXQhXG4gICAgcmV0dXJuIHZhbHVlc0FycmF5W2luZGV4XTtcbiAgfTtcbn0iLCJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qc1wiO1xudmFyIGVyYVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0InLCAnQSddLFxuICBhYmJyZXZpYXRlZDogWydCQycsICdBRCddLFxuICB3aWRlOiBbJ0JlZm9yZSBDaHJpc3QnLCAnQW5ubyBEb21pbmknXVxufTtcbnZhciBxdWFydGVyVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnMScsICcyJywgJzMnLCAnNCddLFxuICBhYmJyZXZpYXRlZDogWydRMScsICdRMicsICdRMycsICdRNCddLFxuICB3aWRlOiBbJzFzdCBxdWFydGVyJywgJzJuZCBxdWFydGVyJywgJzNyZCBxdWFydGVyJywgJzR0aCBxdWFydGVyJ11cbn07XG5cbi8vIE5vdGU6IGluIEVuZ2xpc2gsIHRoZSBuYW1lcyBvZiBkYXlzIG9mIHRoZSB3ZWVrIGFuZCBtb250aHMgYXJlIGNhcGl0YWxpemVkLlxuLy8gSWYgeW91IGFyZSBtYWtpbmcgYSBuZXcgbG9jYWxlIGJhc2VkIG9uIHRoaXMgb25lLCBjaGVjayBpZiB0aGUgc2FtZSBpcyB0cnVlIGZvciB0aGUgbGFuZ3VhZ2UgeW91J3JlIHdvcmtpbmcgb24uXG4vLyBHZW5lcmFsbHksIGZvcm1hdHRlZCBkYXRlcyBzaG91bGQgbG9vayBsaWtlIHRoZXkgYXJlIGluIHRoZSBtaWRkbGUgb2YgYSBzZW50ZW5jZSxcbi8vIGUuZy4gaW4gU3BhbmlzaCBsYW5ndWFnZSB0aGUgd2Vla2RheXMgYW5kIG1vbnRocyBzaG91bGQgYmUgaW4gdGhlIGxvd2VyY2FzZS5cbnZhciBtb250aFZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0onLCAnRicsICdNJywgJ0EnLCAnTScsICdKJywgJ0onLCAnQScsICdTJywgJ08nLCAnTicsICdEJ10sXG4gIGFiYnJldmlhdGVkOiBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJywgJ09jdCcsICdOb3YnLCAnRGVjJ10sXG4gIHdpZGU6IFsnSmFudWFyeScsICdGZWJydWFyeScsICdNYXJjaCcsICdBcHJpbCcsICdNYXknLCAnSnVuZScsICdKdWx5JywgJ0F1Z3VzdCcsICdTZXB0ZW1iZXInLCAnT2N0b2JlcicsICdOb3ZlbWJlcicsICdEZWNlbWJlciddXG59O1xudmFyIGRheVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ1MnLCAnTScsICdUJywgJ1cnLCAnVCcsICdGJywgJ1MnXSxcbiAgc2hvcnQ6IFsnU3UnLCAnTW8nLCAnVHUnLCAnV2UnLCAnVGgnLCAnRnInLCAnU2EnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnU3VuJywgJ01vbicsICdUdWUnLCAnV2VkJywgJ1RodScsICdGcmknLCAnU2F0J10sXG4gIHdpZGU6IFsnU3VuZGF5JywgJ01vbmRheScsICdUdWVzZGF5JywgJ1dlZG5lc2RheScsICdUaHVyc2RheScsICdGcmlkYXknLCAnU2F0dXJkYXknXVxufTtcbnZhciBkYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfVxufTtcbnZhciBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ2EnLFxuICAgIHBtOiAncCcsXG4gICAgbWlkbmlnaHQ6ICdtaScsXG4gICAgbm9vbjogJ24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnYS5tLicsXG4gICAgcG06ICdwLm0uJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH1cbn07XG52YXIgb3JkaW5hbE51bWJlciA9IGZ1bmN0aW9uIG9yZGluYWxOdW1iZXIoZGlydHlOdW1iZXIsIF9vcHRpb25zKSB7XG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuXG4gIC8vIElmIG9yZGluYWwgbnVtYmVycyBkZXBlbmQgb24gY29udGV4dCwgZm9yIGV4YW1wbGUsXG4gIC8vIGlmIHRoZXkgYXJlIGRpZmZlcmVudCBmb3IgZGlmZmVyZW50IGdyYW1tYXRpY2FsIGdlbmRlcnMsXG4gIC8vIHVzZSBgb3B0aW9ucy51bml0YC5cbiAgLy9cbiAgLy8gYHVuaXRgIGNhbiBiZSAneWVhcicsICdxdWFydGVyJywgJ21vbnRoJywgJ3dlZWsnLCAnZGF0ZScsICdkYXlPZlllYXInLFxuICAvLyAnZGF5JywgJ2hvdXInLCAnbWludXRlJywgJ3NlY29uZCcuXG5cbiAgdmFyIHJlbTEwMCA9IG51bWJlciAlIDEwMDtcbiAgaWYgKHJlbTEwMCA+IDIwIHx8IHJlbTEwMCA8IDEwKSB7XG4gICAgc3dpdGNoIChyZW0xMDAgJSAxMCkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gbnVtYmVyICsgJ3N0JztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICduZCc7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAncmQnO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVtYmVyICsgJ3RoJztcbn07XG52YXIgbG9jYWxpemUgPSB7XG4gIG9yZGluYWxOdW1iZXI6IG9yZGluYWxOdW1iZXIsXG4gIGVyYTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGVyYVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IHF1YXJ0ZXJWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgYXJndW1lbnRDYWxsYmFjazogZnVuY3Rpb24gYXJndW1lbnRDYWxsYmFjayhxdWFydGVyKSB7XG4gICAgICByZXR1cm4gcXVhcnRlciAtIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBtb250aFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGl6ZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZE1hdGNoRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoO1xuICAgIHZhciBtYXRjaFBhdHRlcm4gPSB3aWR0aCAmJiBhcmdzLm1hdGNoUGF0dGVybnNbd2lkdGhdIHx8IGFyZ3MubWF0Y2hQYXR0ZXJuc1thcmdzLmRlZmF1bHRNYXRjaFdpZHRoXTtcbiAgICB2YXIgbWF0Y2hSZXN1bHQgPSBzdHJpbmcubWF0Y2gobWF0Y2hQYXR0ZXJuKTtcbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VQYXR0ZXJucyA9IHdpZHRoICYmIGFyZ3MucGFyc2VQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5wYXJzZVBhdHRlcm5zW2FyZ3MuZGVmYXVsdFBhcnNlV2lkdGhdO1xuICAgIHZhciBrZXkgPSBBcnJheS5pc0FycmF5KHBhcnNlUGF0dGVybnMpID8gZmluZEluZGV4KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpO1xuICAgIH0pIDogZmluZEtleShwYXJzZVBhdHRlcm5zLCBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICB9KTtcbiAgICB2YXIgdmFsdWU7XG4gICAgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2soa2V5KSA6IGtleTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB2YXIgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHJlc3RcbiAgICB9O1xuICB9O1xufVxuZnVuY3Rpb24gZmluZEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdC5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIHByZWRpY2F0ZShvYmplY3Rba2V5XSkpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgPSAwOyBrZXkgPCBhcnJheS5sZW5ndGg7IGtleSsrKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn0iLCJpbXBvcnQgYnVpbGRNYXRjaEZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qc1wiO1xuaW1wb3J0IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qc1wiO1xudmFyIG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXihcXGQrKSh0aHxzdHxuZHxyZCk/L2k7XG52YXIgcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9cXGQrL2k7XG52YXIgbWF0Y2hFcmFQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihifGEpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihiXFwuP1xccz9jXFwuP3xiXFwuP1xccz9jXFwuP1xccz9lXFwuP3xhXFwuP1xccz9kXFwuP3xjXFwuP1xccz9lXFwuPykvaSxcbiAgd2lkZTogL14oYmVmb3JlIGNocmlzdHxiZWZvcmUgY29tbW9uIGVyYXxhbm5vIGRvbWluaXxjb21tb24gZXJhKS9pXG59O1xudmFyIHBhcnNlRXJhUGF0dGVybnMgPSB7XG4gIGFueTogWy9eYi9pLCAvXihhfGMpL2ldXG59O1xudmFyIG1hdGNoUXVhcnRlclBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eWzEyMzRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXnFbMTIzNF0vaSxcbiAgd2lkZTogL15bMTIzNF0odGh8c3R8bmR8cmQpPyBxdWFydGVyL2lcbn07XG52YXIgcGFyc2VRdWFydGVyUGF0dGVybnMgPSB7XG4gIGFueTogWy8xL2ksIC8yL2ksIC8zL2ksIC80L2ldXG59O1xudmFyIG1hdGNoTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltqZm1hc29uZF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGphbnxmZWJ8bWFyfGFwcnxtYXl8anVufGp1bHxhdWd8c2VwfG9jdHxub3Z8ZGVjKS9pLFxuICB3aWRlOiAvXihqYW51YXJ5fGZlYnJ1YXJ5fG1hcmNofGFwcmlsfG1heXxqdW5lfGp1bHl8YXVndXN0fHNlcHRlbWJlcnxvY3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pXG59O1xudmFyIHBhcnNlTW9udGhQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15qL2ksIC9eZi9pLCAvXm0vaSwgL15hL2ksIC9ebS9pLCAvXmovaSwgL15qL2ksIC9eYS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV0sXG4gIGFueTogWy9eamEvaSwgL15mL2ksIC9ebWFyL2ksIC9eYXAvaSwgL15tYXkvaSwgL15qdW4vaSwgL15qdWwvaSwgL15hdS9pLCAvXnMvaSwgL15vL2ksIC9ebi9pLCAvXmQvaV1cbn07XG52YXIgbWF0Y2hEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXltzbXR3Zl0vaSxcbiAgc2hvcnQ6IC9eKHN1fG1vfHR1fHdlfHRofGZyfHNhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oc3VufG1vbnx0dWV8d2VkfHRodXxmcml8c2F0KS9pLFxuICB3aWRlOiAvXihzdW5kYXl8bW9uZGF5fHR1ZXNkYXl8d2VkbmVzZGF5fHRodXJzZGF5fGZyaWRheXxzYXR1cmRheSkvaVxufTtcbnZhciBwYXJzZURheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXnMvaSwgL15tL2ksIC9edC9pLCAvXncvaSwgL150L2ksIC9eZi9pLCAvXnMvaV0sXG4gIGFueTogWy9ec3UvaSwgL15tL2ksIC9edHUvaSwgL153L2ksIC9edGgvaSwgL15mL2ksIC9ec2EvaV1cbn07XG52YXIgbWF0Y2hEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXihhfHB8bWl8bnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2ksXG4gIGFueTogL14oW2FwXVxcLj9cXHM/bVxcLj98bWlkbmlnaHR8bm9vbnwoaW4gdGhlfGF0KSAobW9ybmluZ3xhZnRlcm5vb258ZXZlbmluZ3xuaWdodCkpL2lcbn07XG52YXIgcGFyc2VEYXlQZXJpb2RQYXR0ZXJucyA9IHtcbiAgYW55OiB7XG4gICAgYW06IC9eYS9pLFxuICAgIHBtOiAvXnAvaSxcbiAgICBtaWRuaWdodDogL15taS9pLFxuICAgIG5vb246IC9ebm8vaSxcbiAgICBtb3JuaW5nOiAvbW9ybmluZy9pLFxuICAgIGFmdGVybm9vbjogL2FmdGVybm9vbi9pLFxuICAgIGV2ZW5pbmc6IC9ldmVuaW5nL2ksXG4gICAgbmlnaHQ6IC9uaWdodC9pXG4gIH1cbn07XG52YXIgbWF0Y2ggPSB7XG4gIG9yZGluYWxOdW1iZXI6IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oe1xuICAgIG1hdGNoUGF0dGVybjogbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICBwYXJzZVBhdHRlcm46IHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gdmFsdWVDYWxsYmFjayh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9KSxcbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZUVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55JyxcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiB2YWx1ZUNhbGxiYWNrKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgbWF0Y2hSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5tYXRjaFBhdHRlcm4pO1xuICAgIGlmICghbWF0Y2hSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIHZhciBtYXRjaGVkU3RyaW5nID0gbWF0Y2hSZXN1bHRbMF07XG4gICAgdmFyIHBhcnNlUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MucGFyc2VQYXR0ZXJuKTtcbiAgICBpZiAoIXBhcnNlUmVzdWx0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2socGFyc2VSZXN1bHRbMF0pIDogcGFyc2VSZXN1bHRbMF07XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2sgPyBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpIDogdmFsdWU7XG4gICAgdmFyIHJlc3QgPSBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiByZXN0XG4gICAgfTtcbiAgfTtcbn0iLCJpbXBvcnQgZm9ybWF0RGlzdGFuY2UgZnJvbSBcIi4vX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qc1wiO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSBcIi4vX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0UmVsYXRpdmUgZnJvbSBcIi4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGxvY2FsaXplIGZyb20gXCIuL19saWIvbG9jYWxpemUvaW5kZXguanNcIjtcbmltcG9ydCBtYXRjaCBmcm9tIFwiLi9fbGliL21hdGNoL2luZGV4LmpzXCI7XG4vKipcbiAqIEB0eXBlIHtMb2NhbGV9XG4gKiBAY2F0ZWdvcnkgTG9jYWxlc1xuICogQHN1bW1hcnkgRW5nbGlzaCBsb2NhbGUgKFVuaXRlZCBTdGF0ZXMpLlxuICogQGxhbmd1YWdlIEVuZ2xpc2hcbiAqIEBpc28tNjM5LTIgZW5nXG4gKiBAYXV0aG9yIFNhc2hhIEtvc3MgW0Brb3Nzbm9jb3JwXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20va29zc25vY29ycH1cbiAqIEBhdXRob3IgTGVzaGEgS29zcyBbQGxlc2hha29zc117QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2xlc2hha29zc31cbiAqL1xudmFyIGxvY2FsZSA9IHtcbiAgY29kZTogJ2VuLVVTJyxcbiAgZm9ybWF0RGlzdGFuY2U6IGZvcm1hdERpc3RhbmNlLFxuICBmb3JtYXRMb25nOiBmb3JtYXRMb25nLFxuICBmb3JtYXRSZWxhdGl2ZTogZm9ybWF0UmVsYXRpdmUsXG4gIGxvY2FsaXplOiBsb2NhbGl6ZSxcbiAgbWF0Y2g6IG1hdGNoLFxuICBvcHRpb25zOiB7XG4gICAgd2Vla1N0YXJ0c09uOiAwIC8qIFN1bmRheSAqLyxcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IDFcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCJpbXBvcnQgZGVmYXVsdExvY2FsZSBmcm9tIFwiLi4vLi4vbG9jYWxlL2VuLVVTL2luZGV4LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0TG9jYWxlOyIsImltcG9ydCBpc1ZhbGlkIGZyb20gXCIuLi9pc1ZhbGlkL2luZGV4LmpzXCI7XG5pbXBvcnQgc3ViTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9zdWJNaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGZvcm1hdHRlcnMgZnJvbSBcIi4uL19saWIvZm9ybWF0L2Zvcm1hdHRlcnMvaW5kZXguanNcIjtcbmltcG9ydCBsb25nRm9ybWF0dGVycyBmcm9tIFwiLi4vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMvaW5kZXguanNcIjtcbmltcG9ydCBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCB7IGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4sIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbiwgdGhyb3dQcm90ZWN0ZWRFcnJvciB9IGZyb20gXCIuLi9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBnZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gXCIuLi9fbGliL2RlZmF1bHRPcHRpb25zL2luZGV4LmpzXCI7XG5pbXBvcnQgZGVmYXVsdExvY2FsZSBmcm9tIFwiLi4vX2xpYi9kZWZhdWx0TG9jYWxlL2luZGV4LmpzXCI7IC8vIFRoaXMgUmVnRXhwIGNvbnNpc3RzIG9mIHRocmVlIHBhcnRzIHNlcGFyYXRlZCBieSBgfGA6XG4vLyAtIFt5WVFxTUx3SWREZWNpaEhLa21zXW8gbWF0Y2hlcyBhbnkgYXZhaWxhYmxlIG9yZGluYWwgbnVtYmVyIHRva2VuXG4vLyAgIChvbmUgb2YgdGhlIGNlcnRhaW4gbGV0dGVycyBmb2xsb3dlZCBieSBgb2ApXG4vLyAtIChcXHcpXFwxKiBtYXRjaGVzIGFueSBzZXF1ZW5jZXMgb2YgdGhlIHNhbWUgbGV0dGVyXG4vLyAtICcnIG1hdGNoZXMgdHdvIHF1b3RlIGNoYXJhY3RlcnMgaW4gYSByb3dcbi8vIC0gJygnJ3xbXiddKSsoJ3wkKSBtYXRjaGVzIGFueXRoaW5nIHN1cnJvdW5kZWQgYnkgdHdvIHF1b3RlIGNoYXJhY3RlcnMgKCcpLFxuLy8gICBleGNlcHQgYSBzaW5nbGUgcXVvdGUgc3ltYm9sLCB3aGljaCBlbmRzIHRoZSBzZXF1ZW5jZS5cbi8vICAgVHdvIHF1b3RlIGNoYXJhY3RlcnMgZG8gbm90IGVuZCB0aGUgc2VxdWVuY2UuXG4vLyAgIElmIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHNpbmdsZSBxdW90ZVxuLy8gICB0aGVuIHRoZSBzZXF1ZW5jZSB3aWxsIGNvbnRpbnVlIHVudGlsIHRoZSBlbmQgb2YgdGhlIHN0cmluZy5cbi8vIC0gLiBtYXRjaGVzIGFueSBzaW5nbGUgY2hhcmFjdGVyIHVubWF0Y2hlZCBieSBwcmV2aW91cyBwYXJ0cyBvZiB0aGUgUmVnRXhwc1xudmFyIGZvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvW3lZUXFNTHdJZERlY2loSEtrbXNdb3woXFx3KVxcMSp8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7XG5cbi8vIFRoaXMgUmVnRXhwIGNhdGNoZXMgc3ltYm9scyBlc2NhcGVkIGJ5IHF1b3RlcywgYW5kIGFsc29cbi8vIHNlcXVlbmNlcyBvZiBzeW1ib2xzIFAsIHAsIGFuZCB0aGUgY29tYmluYXRpb25zIGxpa2UgYFBQUFBQUFBwcHBwcGBcbnZhciBsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IC9QK3ArfFArfHArfCcnfCcoJyd8W14nXSkrKCd8JCl8Li9nO1xudmFyIGVzY2FwZWRTdHJpbmdSZWdFeHAgPSAvXicoW15dKj8pJz8kLztcbnZhciBkb3VibGVRdW90ZVJlZ0V4cCA9IC8nJy9nO1xudmFyIHVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwID0gL1thLXpBLVpdLztcblxuLyoqXG4gKiBAbmFtZSBmb3JtYXRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgRm9ybWF0IHRoZSBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmcgaW4gdGhlIGdpdmVuIGZvcm1hdC4gVGhlIHJlc3VsdCBtYXkgdmFyeSBieSBsb2NhbGUuXG4gKlxuICogPiDimqDvuI8gUGxlYXNlIG5vdGUgdGhhdCB0aGUgYGZvcm1hdGAgdG9rZW5zIGRpZmZlciBmcm9tIE1vbWVudC5qcyBhbmQgb3RoZXIgbGlicmFyaWVzLlxuICogPiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqXG4gKiBUaGUgY2hhcmFjdGVycyB3cmFwcGVkIGJldHdlZW4gdHdvIHNpbmdsZSBxdW90ZXMgY2hhcmFjdGVycyAoJykgYXJlIGVzY2FwZWQuXG4gKiBUd28gc2luZ2xlIHF1b3RlcyBpbiBhIHJvdywgd2hldGhlciBpbnNpZGUgb3Igb3V0c2lkZSBhIHF1b3RlZCBzZXF1ZW5jZSwgcmVwcmVzZW50IGEgJ3JlYWwnIHNpbmdsZSBxdW90ZS5cbiAqIChzZWUgdGhlIGxhc3QgZXhhbXBsZSlcbiAqXG4gKiBGb3JtYXQgb2YgdGhlIHN0cmluZyBpcyBiYXNlZCBvbiBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiBodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI0RhdGVfRmllbGRfU3ltYm9sX1RhYmxlXG4gKiB3aXRoIGEgZmV3IGFkZGl0aW9ucyAoc2VlIG5vdGUgNyBiZWxvdyB0aGUgdGFibGUpLlxuICpcbiAqIEFjY2VwdGVkIHBhdHRlcm5zOlxuICogfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUGF0dGVybiB8IFJlc3VsdCBleGFtcGxlcyAgICAgICAgICAgICAgICAgICB8IE5vdGVzIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS18XG4gKiB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHLi5HR0cgIHwgQUQsIEJDICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHRyAgICB8IEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0dHICAgfCBBLCBCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IENhbGVuZGFyIHllYXIgICAgICAgICAgICAgICAgICAgfCB5ICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeW8gICAgICB8IDQ0dGgsIDFzdCwgMHRoLCAxN3RoICAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5ICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXl5ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgfCBZICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWW8gICAgICB8IDQ0dGgsIDFzdCwgMTkwMHRoLCAyMDE3dGggICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVlZICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICAgfCBSICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlIgICAgICB8IC00MywgMDAsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUiAgICAgfCAtMDQzLCAwMDAsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSICAgIHwgLTAwNDMsIDAwMDAsIDAwMDEsIDE5MDAsIDIwMTcgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUlIgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSw3IHxcbiAqIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgICB8IHUgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dSAgICAgIHwgLTQzLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1ICAgICB8IC0wNDMsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXUgICAgfCAtMDA0MywgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1dSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBRdWFydGVyIChmb3JtYXR0aW5nKSAgICAgICAgICAgIHwgUSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRUSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBRdWFydGVyIChzdGFuZC1hbG9uZSkgICAgICAgICAgIHwgcSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxcSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBNb250aCAoZm9ybWF0dGluZykgICAgICAgICAgICAgIHwgTSAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1vICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTSAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU0gICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NTSAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNb250aCAoc3RhbmQtYWxvbmUpICAgICAgICAgICAgIHwgTCAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTCAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTEwgICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMTCAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgIHwgdyAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHdvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3dyAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgIHwgSSAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJSSAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgIHwgZCAgICAgICB8IDEsIDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzMXN0ICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkZCAgICAgIHwgMDEsIDAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgIHwgRCAgICAgICB8IDEsIDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgICB8IDkgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzNjV0aCwgMzY2dGggICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBERCAgICAgIHwgMDEsIDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREREICAgICB8IDAwMSwgMDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREREQgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IERheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICAgICAgfCBFLi5FRUUgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRUUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgIHwgaSAgICAgICB8IDEsIDIsIDMsIC4uLiwgNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA3dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaSAgICAgIHwgMDEsIDAyLCAuLi4sIDA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWkgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyLDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWlpICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8IDcgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICB8IGUgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWUgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlZSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChzdGFuZC1hbG9uZSkgfCBjICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY28gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2MgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjYyAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjY2MgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgYS4uYWEgICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYSAgICAgfCBhbSwgcG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhICAgIHwgYS5tLiwgcC5tLiAgICAgICAgICAgICAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYWEgICB8IGEsIHAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICB8IGIuLmJiICAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmIgICAgIHwgYW0sIHBtLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYiAgICB8IGEubS4sIHAubS4sIG5vb24sIG1pZG5pZ2h0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmJiICAgfCBhLCBwLCBuLCBtaSAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICAgfCBCLi5CQkIgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQiAgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkJCICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICAgfCBoICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDEydGggICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhoICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICAgfCBIICAgICAgIHwgMCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSG8gICAgICB8IDB0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhIICAgICAgfCAwMCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICAgfCBLICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMCAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDB0aCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtLICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICAgfCBrICAgICAgIHwgMjQsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga28gICAgICB8IDI0dGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtrICAgICAgfCAyNCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW8gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1tICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc28gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNzICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICAgfCBTICAgICAgIHwgMCwgMSwgLi4uLCA5ICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1MgICAgICB8IDAwLCAwMSwgLi4uLCA5OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTUyAgICAgfCAwMDAsIDAwMSwgLi4uLCA5OTkgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1NTICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy8gWikgICAgICAgIHwgWCAgICAgICB8IC0wOCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYICAgICAgfCAtMDgwMCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFggICAgIHwgLTA4OjAwLCArMDU6MzAsIFogICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWCAgICB8IC0wODAwLCArMDUzMCwgWiwgKzEyMzQ1NiAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFhYICAgfCAtMDg6MDAsICswNTozMCwgWiwgKzEyOjM0OjU2ICAgICAgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICAgfCB4ICAgICAgIHwgLTA4LCArMDUzMCwgKzAwICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHggICAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eCAgICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4ICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCwgKzEyMzQ1NiAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eHggICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAsICsxMjozNDo1NiB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgICB8IE8uLi5PT08gfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBPT09PICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiAgICAgfFxuICogfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgIHwgei4uLnp6eiB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8IDYgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHp6enogICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyLDYgICB8XG4gKiB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICAgfCB0ICAgICAgIHwgNTEyOTY5NTIwICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdHQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICB8IFQgICAgICAgfCA1MTI5Njk1MjA5MDAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBUVCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgIHwgUCAgICAgICB8IDA0LzI5LzE0NTMgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQICAgICAgfCBBcHIgMjksIDE0NTMgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFAgICAgIHwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUCAgICB8IEZyaWRheSwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgICB8IHAgICAgICAgfCAxMjowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcCAgICAgIHwgMTI6MDA6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwICAgICB8IDEyOjAwOjAwIEFNIEdNVCsyICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcHAgICAgfCAxMjowMDowMCBBTSBHTVQrMDI6MDAgICAgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IENvbWJpbmF0aW9uIG9mIGRhdGUgYW5kIHRpbWUgICAgfCBQcCAgICAgIHwgMDQvMjkvMTQ1MywgMTI6MDAgQU0gICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBwcCAgICB8IEFwciAyOSwgMTQ1MywgMTI6MDA6MDAgQU0gICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUHBwcCAgfCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQcHBwcHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgIHwgMiw3ICAgfFxuICogTm90ZXM6XG4gKiAxLiBcIkZvcm1hdHRpbmdcIiB1bml0cyAoZS5nLiBmb3JtYXR0aW5nIHF1YXJ0ZXIpIGluIHRoZSBkZWZhdWx0IGVuLVVTIGxvY2FsZVxuICogICAgYXJlIHRoZSBzYW1lIGFzIFwic3RhbmQtYWxvbmVcIiB1bml0cywgYnV0IGFyZSBkaWZmZXJlbnQgaW4gc29tZSBsYW5ndWFnZXMuXG4gKiAgICBcIkZvcm1hdHRpbmdcIiB1bml0cyBhcmUgZGVjbGluZWQgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBvZiB0aGUgbGFuZ3VhZ2VcbiAqICAgIGluIHRoZSBjb250ZXh0IG9mIGEgZGF0ZS4gXCJTdGFuZC1hbG9uZVwiIHVuaXRzIGFyZSBhbHdheXMgbm9taW5hdGl2ZSBzaW5ndWxhcjpcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIExMTEwnLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIE1NTU0nLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkdSdgXG4gKlxuICogMi4gQW55IHNlcXVlbmNlIG9mIHRoZSBpZGVudGljYWwgbGV0dGVycyBpcyBhIHBhdHRlcm4sIHVubGVzcyBpdCBpcyBlc2NhcGVkIGJ5XG4gKiAgICB0aGUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgKHNlZSBiZWxvdykuXG4gKiAgICBJZiB0aGUgc2VxdWVuY2UgaXMgbG9uZ2VyIHRoYW4gbGlzdGVkIGluIHRhYmxlIChlLmcuIGBFRUVFRUVFRUVFRWApXG4gKiAgICB0aGUgb3V0cHV0IHdpbGwgYmUgdGhlIHNhbWUgYXMgZGVmYXVsdCBwYXR0ZXJuIGZvciB0aGlzIHVuaXQsIHVzdWFsbHlcbiAqICAgIHRoZSBsb25nZXN0IG9uZSAoaW4gY2FzZSBvZiBJU08gd2Vla2RheXMsIGBFRUVFYCkuIERlZmF1bHQgcGF0dGVybnMgZm9yIHVuaXRzXG4gKiAgICBhcmUgbWFya2VkIHdpdGggXCIyXCIgaW4gdGhlIGxhc3QgY29sdW1uIG9mIHRoZSB0YWJsZS5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTScpIC8vPT4gJ05vdidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU0nKSAvLz0+ICdOJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogMy4gU29tZSBwYXR0ZXJucyBjb3VsZCBiZSB1bmxpbWl0ZWQgbGVuZ3RoIChzdWNoIGFzIGB5eXl5eXl5eWApLlxuICogICAgVGhlIG91dHB1dCB3aWxsIGJlIHBhZGRlZCB3aXRoIHplcm9zIHRvIG1hdGNoIHRoZSBsZW5ndGggb2YgdGhlIHBhdHRlcm4uXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICd5eXl5eXl5eScpIC8vPT4gJzAwMDAyMDE3J2BcbiAqXG4gKiA0LiBgUVFRUVFgIGFuZCBgcXFxcXFgIGNvdWxkIGJlIG5vdCBzdHJpY3RseSBudW1lcmljYWwgaW4gc29tZSBsb2NhbGVzLlxuICogICAgVGhlc2UgdG9rZW5zIHJlcHJlc2VudCB0aGUgc2hvcnRlc3QgZm9ybSBvZiB0aGUgcXVhcnRlci5cbiAqXG4gKiA1LiBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgcGF0dGVybnMgYXJlIEIuQy4geWVhcnM6XG4gKlxuICogICAgfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS18LS0tLS18XG4gKiAgICB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICogICAgfCBCQyAxIHwgICAxIHwgICAwIHxcbiAqICAgIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gKlxuICogICAgQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICogICAgd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkOlxuICpcbiAqICAgIHwgWWVhciB8IGB5eWAgfCBgdXVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS0tfC0tLS0tLXxcbiAqICAgIHwgMSAgICB8ICAgMDEgfCAgIDAxIHxcbiAqICAgIHwgMTQgICB8ICAgMTQgfCAgIDE0IHxcbiAqICAgIHwgMzc2ICB8ICAgNzYgfCAgMzc2IHxcbiAqICAgIHwgMTQ1MyB8ICAgNTMgfCAxNDUzIHxcbiAqXG4gKiAgICBUaGUgc2FtZSBkaWZmZXJlbmNlIGlzIHRydWUgZm9yIGxvY2FsIGFuZCBJU08gd2Vlay1udW1iZXJpbmcgeWVhcnMgKGBZYCBhbmQgYFJgKSxcbiAqICAgIGV4Y2VwdCBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFycyBhcmUgZGVwZW5kZW50IG9uIGBvcHRpb25zLndlZWtTdGFydHNPbmBcbiAqICAgIGFuZCBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIChjb21wYXJlIFtnZXRJU09XZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRJU09XZWVrWWVhcn1cbiAqICAgIGFuZCBbZ2V0V2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0V2Vla1llYXJ9KS5cbiAqXG4gKiA2LiBTcGVjaWZpYyBub24tbG9jYXRpb24gdGltZXpvbmVzIGFyZSBjdXJyZW50bHkgdW5hdmFpbGFibGUgaW4gYGRhdGUtZm5zYCxcbiAqICAgIHNvIHJpZ2h0IG5vdyB0aGVzZSB0b2tlbnMgZmFsbCBiYWNrIHRvIEdNVCB0aW1lem9uZXMuXG4gKlxuICogNy4gVGhlc2UgcGF0dGVybnMgYXJlIG5vdCBpbiB0aGUgVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogICAgLSBgaWA6IElTTyBkYXkgb2Ygd2Vla1xuICogICAgLSBgSWA6IElTTyB3ZWVrIG9mIHllYXJcbiAqICAgIC0gYFJgOiBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICogICAgLSBgdGA6IHNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBUYDogbWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgb2A6IG9yZGluYWwgbnVtYmVyIG1vZGlmaWVyXG4gKiAgICAtIGBQYDogbG9uZyBsb2NhbGl6ZWQgZGF0ZVxuICogICAgLSBgcGA6IGxvbmcgbG9jYWxpemVkIHRpbWVcbiAqXG4gKiA4LiBgWVlgIGFuZCBgWVlZWWAgdG9rZW5zIHJlcHJlc2VudCB3ZWVrLW51bWJlcmluZyB5ZWFycyBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCB5ZWFycy5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICpcbiAqIDkuIGBEYCBhbmQgYEREYCB0b2tlbnMgcmVwcmVzZW50IGRheXMgb2YgdGhlIHllYXIgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggZGF5cyBvZiB0aGUgbW9udGguXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0IC0gdGhlIHN0cmluZyBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHtMb2NhbGV9IFtvcHRpb25zLmxvY2FsZT1kZWZhdWx0TG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0LiBTZWUgW0xvY2FsZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9Mb2NhbGV9XG4gKiBAcGFyYW0gezB8MXwyfDN8NHw1fDZ9IFtvcHRpb25zLndlZWtTdGFydHNPbj0wXSAtIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrICgwIC0gU3VuZGF5KVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZT0xXSAtIHRoZSBkYXkgb2YgSmFudWFyeSwgd2hpY2ggaXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgd2Vlay1udW1iZXJpbmcgeWVhciB0b2tlbnMgYFlZYCBhbmQgYFlZWVlgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIGRheSBvZiB5ZWFyIHRva2VucyBgRGAgYW5kIGBERGA7XG4gKiAgIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdW5pY29kZVRva2Vucy5tZFxuICogQHJldHVybnMge1N0cmluZ30gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZ1xuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYGRhdGVgIG11c3Qgbm90IGJlIEludmFsaWQgRGF0ZVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGxvY2FsaXplYCBwcm9wZXJ0eVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMubG9jYWxlYCBtdXN0IGNvbnRhaW4gYGZvcm1hdExvbmdgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy53ZWVrU3RhcnRzT25gIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXlgIGluc3RlYWQgb2YgYFlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYGRgIGluc3RlYWQgb2YgYERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VuaWNvZGVUb2tlbnMubWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgZGRgIGluc3RlYWQgb2YgYEREYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91bmljb2RlVG9rZW5zLm1kXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBmb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDExIEZlYnJ1YXJ5IDIwMTQgaW4gbWlkZGxlLWVuZGlhbiBmb3JtYXQ6XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgMSwgMTEpLCAnTU0vZGQveXl5eScpXG4gKiAvLz0+ICcwMi8xMS8yMDE0J1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMiBKdWx5IDIwMTQgaW4gRXNwZXJhbnRvOlxuICogaW1wb3J0IHsgZW9Mb2NhbGUgfSBmcm9tICdkYXRlLWZucy9sb2NhbGUvZW8nXG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiksIFwiZG8gJ2RlJyBNTU1NIHl5eXlcIiwge1xuICogICBsb2NhbGU6IGVvTG9jYWxlXG4gKiB9KVxuICogLy89PiAnMi1hIGRlIGp1bGlvIDIwMTQnXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEVzY2FwZSBzdHJpbmcgYnkgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnM6XG4gKiBjb25zdCByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiwgMTUpLCBcImggJ28nJ2Nsb2NrJ1wiKVxuICogLy89PiBcIjMgbydjbG9ja1wiXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0KGRpcnR5RGF0ZSwgZGlydHlGb3JtYXRTdHIsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9vcHRpb25zJGxvY2FsZSwgX3JlZjIsIF9yZWYzLCBfcmVmNCwgX29wdGlvbnMkZmlyc3RXZWVrQ29uLCBfb3B0aW9ucyRsb2NhbGUyLCBfb3B0aW9ucyRsb2NhbGUyJG9wdGksIF9kZWZhdWx0T3B0aW9ucyRsb2NhbCwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiwgX3JlZjUsIF9yZWY2LCBfcmVmNywgX29wdGlvbnMkd2Vla1N0YXJ0c09uLCBfb3B0aW9ucyRsb2NhbGUzLCBfb3B0aW9ucyRsb2NhbGUzJG9wdGksIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDMsIF9kZWZhdWx0T3B0aW9ucyRsb2NhbDQ7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZm9ybWF0U3RyID0gU3RyaW5nKGRpcnR5Rm9ybWF0U3RyKTtcbiAgdmFyIGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgdmFyIGxvY2FsZSA9IChfcmVmID0gKF9vcHRpb25zJGxvY2FsZSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5sb2NhbGUpICE9PSBudWxsICYmIF9vcHRpb25zJGxvY2FsZSAhPT0gdm9pZCAwID8gX29wdGlvbnMkbG9jYWxlIDogZGVmYXVsdE9wdGlvbnMubG9jYWxlKSAhPT0gbnVsbCAmJiBfcmVmICE9PSB2b2lkIDAgPyBfcmVmIDogZGVmYXVsdExvY2FsZTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IHRvSW50ZWdlcigoX3JlZjIgPSAoX3JlZjMgPSAoX3JlZjQgPSAoX29wdGlvbnMkZmlyc3RXZWVrQ29uID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX29wdGlvbnMkZmlyc3RXZWVrQ29uICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRmaXJzdFdlZWtDb24gOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUyID0gb3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZTIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUyJG9wdGkgPSBfb3B0aW9ucyRsb2NhbGUyLm9wdGlvbnMpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZTIkb3B0aSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbnMkbG9jYWxlMiRvcHRpLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSkgIT09IG51bGwgJiYgX3JlZjQgIT09IHZvaWQgMCA/IF9yZWY0IDogZGVmYXVsdE9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmMyAhPT0gdm9pZCAwID8gX3JlZjMgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsID0gZGVmYXVsdE9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwyID0gX2RlZmF1bHRPcHRpb25zJGxvY2FsLm9wdGlvbnMpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIuZmlyc3RXZWVrQ29udGFpbnNEYXRlKSAhPT0gbnVsbCAmJiBfcmVmMiAhPT0gdm9pZCAwID8gX3JlZjIgOiAxKTtcblxuICAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDEgYW5kIDcgX2FuZF8gaXMgbm90IE5hTlxuICBpZiAoIShmaXJzdFdlZWtDb250YWluc0RhdGUgPj0gMSAmJiBmaXJzdFdlZWtDb250YWluc0RhdGUgPD0gNykpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZmlyc3RXZWVrQ29udGFpbnNEYXRlIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3IGluY2x1c2l2ZWx5Jyk7XG4gIH1cbiAgdmFyIHdlZWtTdGFydHNPbiA9IHRvSW50ZWdlcigoX3JlZjUgPSAoX3JlZjYgPSAoX3JlZjcgPSAoX29wdGlvbnMkd2Vla1N0YXJ0c09uID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX29wdGlvbnMkd2Vla1N0YXJ0c09uICE9PSB2b2lkIDAgPyBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUzID0gb3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZTMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUzJG9wdGkgPSBfb3B0aW9ucyRsb2NhbGUzLm9wdGlvbnMpID09PSBudWxsIHx8IF9vcHRpb25zJGxvY2FsZTMkb3B0aSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX29wdGlvbnMkbG9jYWxlMyRvcHRpLndlZWtTdGFydHNPbikgIT09IG51bGwgJiYgX3JlZjcgIT09IHZvaWQgMCA/IF9yZWY3IDogZGVmYXVsdE9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmNiAhPT0gdm9pZCAwID8gX3JlZjYgOiAoX2RlZmF1bHRPcHRpb25zJGxvY2FsMyA9IGRlZmF1bHRPcHRpb25zLmxvY2FsZSkgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDQgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwzLm9wdGlvbnMpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kZWZhdWx0T3B0aW9ucyRsb2NhbDQud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmNSAhPT0gdm9pZCAwID8gX3JlZjUgOiAwKTtcblxuICAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDAgYW5kIDYgX2FuZF8gaXMgbm90IE5hTlxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cbiAgaWYgKCFsb2NhbGUubG9jYWxpemUpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbG9jYWxlIG11c3QgY29udGFpbiBsb2NhbGl6ZSBwcm9wZXJ0eScpO1xuICB9XG4gIGlmICghbG9jYWxlLmZvcm1hdExvbmcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbG9jYWxlIG11c3QgY29udGFpbiBmb3JtYXRMb25nIHByb3BlcnR5Jyk7XG4gIH1cbiAgdmFyIG9yaWdpbmFsRGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICBpZiAoIWlzVmFsaWQob3JpZ2luYWxEYXRlKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgfVxuXG4gIC8vIENvbnZlcnQgdGhlIGRhdGUgaW4gc3lzdGVtIHRpbWV6b25lIHRvIHRoZSBzYW1lIGRhdGUgaW4gVVRDKzAwOjAwIHRpbWV6b25lLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdCB3aGVuIFVUQyBmdW5jdGlvbnMgd2lsbCBiZSBpbXBsZW1lbnRlZCwgbG9jYWxlcyB3aWxsIGJlIGNvbXBhdGlibGUgd2l0aCB0aGVtLlxuICAvLyBTZWUgYW4gaXNzdWUgYWJvdXQgVVRDIGZ1bmN0aW9uczogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcbiAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhvcmlnaW5hbERhdGUpO1xuICB2YXIgdXRjRGF0ZSA9IHN1Yk1pbGxpc2Vjb25kcyhvcmlnaW5hbERhdGUsIHRpbWV6b25lT2Zmc2V0KTtcbiAgdmFyIGZvcm1hdHRlck9wdGlvbnMgPSB7XG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiBmaXJzdFdlZWtDb250YWluc0RhdGUsXG4gICAgd2Vla1N0YXJ0c09uOiB3ZWVrU3RhcnRzT24sXG4gICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgX29yaWdpbmFsRGF0ZTogb3JpZ2luYWxEYXRlXG4gIH07XG4gIHZhciByZXN1bHQgPSBmb3JtYXRTdHIubWF0Y2gobG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHApLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgdmFyIGZpcnN0Q2hhcmFjdGVyID0gc3Vic3RyaW5nWzBdO1xuICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gJ3AnIHx8IGZpcnN0Q2hhcmFjdGVyID09PSAnUCcpIHtcbiAgICAgIHZhciBsb25nRm9ybWF0dGVyID0gbG9uZ0Zvcm1hdHRlcnNbZmlyc3RDaGFyYWN0ZXJdO1xuICAgICAgcmV0dXJuIGxvbmdGb3JtYXR0ZXIoc3Vic3RyaW5nLCBsb2NhbGUuZm9ybWF0TG9uZyk7XG4gICAgfVxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnNSZWdFeHApLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgLy8gUmVwbGFjZSB0d28gc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgd2l0aCBvbmUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlclxuICAgIGlmIChzdWJzdHJpbmcgPT09IFwiJydcIikge1xuICAgICAgcmV0dXJuIFwiJ1wiO1xuICAgIH1cbiAgICB2YXIgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyID09PSBcIidcIikge1xuICAgICAgcmV0dXJuIGNsZWFuRXNjYXBlZFN0cmluZyhzdWJzdHJpbmcpO1xuICAgIH1cbiAgICB2YXIgZm9ybWF0dGVyID0gZm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG4gICAgaWYgKGZvcm1hdHRlcikge1xuICAgICAgaWYgKCEob3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnMpICYmIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbihzdWJzdHJpbmcpKSB7XG4gICAgICAgIHRocm93UHJvdGVjdGVkRXJyb3Ioc3Vic3RyaW5nLCBkaXJ0eUZvcm1hdFN0ciwgU3RyaW5nKGRpcnR5RGF0ZSkpO1xuICAgICAgfVxuICAgICAgaWYgKCEob3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgJiYgb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zKSAmJiBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuKHN1YnN0cmluZykpIHtcbiAgICAgICAgdGhyb3dQcm90ZWN0ZWRFcnJvcihzdWJzdHJpbmcsIGRpcnR5Rm9ybWF0U3RyLCBTdHJpbmcoZGlydHlEYXRlKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZm9ybWF0dGVyKHV0Y0RhdGUsIHN1YnN0cmluZywgbG9jYWxlLmxvY2FsaXplLCBmb3JtYXR0ZXJPcHRpb25zKTtcbiAgICB9XG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyLm1hdGNoKHVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0Zvcm1hdCBzdHJpbmcgY29udGFpbnMgYW4gdW5lc2NhcGVkIGxhdGluIGFscGhhYmV0IGNoYXJhY3RlciBgJyArIGZpcnN0Q2hhcmFjdGVyICsgJ2AnKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1YnN0cmluZztcbiAgfSkuam9pbignJyk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBjbGVhbkVzY2FwZWRTdHJpbmcoaW5wdXQpIHtcbiAgdmFyIG1hdGNoZWQgPSBpbnB1dC5tYXRjaChlc2NhcGVkU3RyaW5nUmVnRXhwKTtcbiAgaWYgKCFtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9XG4gIHJldHVybiBtYXRjaGVkWzFdLnJlcGxhY2UoZG91YmxlUXVvdGVSZWdFeHAsIFwiJ1wiKTtcbn0iLCJpbXBvcnQgaXNEYXRlIGZyb20gXCIuLi9pc0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNWYWxpZFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB2YWxpZD9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgZmFsc2UgaWYgYXJndW1lbnQgaXMgSW52YWxpZCBEYXRlIGFuZCB0cnVlIG90aGVyd2lzZS5cbiAqIEFyZ3VtZW50IGlzIGNvbnZlcnRlZCB0byBEYXRlIHVzaW5nIGB0b0RhdGVgLiBTZWUgW3RvRGF0ZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy90b0RhdGV9XG4gKiBJbnZhbGlkIERhdGUgaXMgYSBEYXRlLCB3aG9zZSB0aW1lIHZhbHVlIGlzIE5hTi5cbiAqXG4gKiBUaW1lIHZhbHVlIG9mIERhdGU6IGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuOS4xLjFcbiAqXG4gKiBAcGFyYW0geyp9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlIGlzIHZhbGlkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgyMDE0LCAxLCAzMSkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWx1ZSwgY29udmVydGFibGUgaW50byBhIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKDEzOTM4MDQ4MDAwMDApXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSBpbnZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKCcnKSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNWYWxpZChkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIGlmICghaXNEYXRlKGRpcnR5RGF0ZSkgJiYgdHlwZW9mIGRpcnR5RGF0ZSAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgcmV0dXJuICFpc05hTihOdW1iZXIoZGF0ZSkpO1xufSIsImltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzRGF0ZVxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gdmFsdWUgYSBkYXRlP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLiBUaGUgZnVuY3Rpb24gd29ya3MgZm9yIGRhdGVzIHRyYW5zZmVycmVkIGFjcm9zcyBpZnJhbWVzLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgLSB0aGUgdmFsdWUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIGRhdGVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIGEgdmFsaWQgZGF0ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZShuZXcgRGF0ZSgpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhbiBpbnZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUobmV3IERhdGUoTmFOKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3Igc29tZSB2YWx1ZTpcbiAqIGNvbnN0IHJlc3VsdCA9IGlzRGF0ZSgnMjAxNC0wMi0zMScpXG4gKiAvLz0+IGZhbHNlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhbiBvYmplY3Q6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUoe30pXG4gKiAvLz0+IGZhbHNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzRGF0ZSh2YWx1ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSB8fCBfdHlwZW9mKHZhbHVlKSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufSIsIi8qKlxuICogR29vZ2xlIENocm9tZSBhcyBvZiA2Ny4wLjMzOTYuODcgaW50cm9kdWNlZCB0aW1lem9uZXMgd2l0aCBvZmZzZXQgdGhhdCBpbmNsdWRlcyBzZWNvbmRzLlxuICogVGhleSB1c3VhbGx5IGFwcGVhciBmb3IgZGF0ZXMgdGhhdCBkZW5vdGUgdGltZSBiZWZvcmUgdGhlIHRpbWV6b25lcyB3ZXJlIGludHJvZHVjZWRcbiAqIChlLmcuIGZvciAnRXVyb3BlL1ByYWd1ZScgdGltZXpvbmUgdGhlIG9mZnNldCBpcyBHTVQrMDA6NTc6NDQgYmVmb3JlIDEgT2N0b2JlciAxODkxXG4gKiBhbmQgR01UKzAxOjAwOjAwIGFmdGVyIHRoYXQgZGF0ZSlcbiAqXG4gKiBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgdGhlIG9mZnNldCBpbiBtaW51dGVzIGFuZCB3b3VsZCByZXR1cm4gNTcgZm9yIHRoZSBleGFtcGxlIGFib3ZlLFxuICogd2hpY2ggd291bGQgbGVhZCB0byBpbmNvcnJlY3QgY2FsY3VsYXRpb25zLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgdGltZXpvbmUgb2Zmc2V0IGluIG1pbGxpc2Vjb25kcyB0aGF0IHRha2VzIHNlY29uZHMgaW4gYWNjb3VudC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhkYXRlKSB7XG4gIHZhciB1dGNEYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpLCBkYXRlLmdldEhvdXJzKCksIGRhdGUuZ2V0TWludXRlcygpLCBkYXRlLmdldFNlY29uZHMoKSwgZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSkpO1xuICB1dGNEYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSk7XG4gIHJldHVybiBkYXRlLmdldFRpbWUoKSAtIHV0Y0RhdGUuZ2V0VGltZSgpO1xufSIsImltcG9ydCBhZGRNaWxsaXNlY29uZHMgZnJvbSBcIi4uL2FkZE1pbGxpc2Vjb25kcy9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHN1Yk1pbGxpc2Vjb25kc1xuICogQGNhdGVnb3J5IE1pbGxpc2Vjb25kIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBiZSBzdWJ0cmFjdGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbGxpc2Vjb25kcyBzdWJ0cmFjdGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFN1YnRyYWN0IDc1MCBtaWxsaXNlY29uZHMgZnJvbSAxMCBKdWx5IDIwMTQgMTI6NDU6MzAuMDAwOlxuICogY29uc3QgcmVzdWx0ID0gc3ViTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MjkuMjUwXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN1Yk1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIGFkZE1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIC1hbW91bnQpO1xufSIsImltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGFkZE1pbGxpc2Vjb25kc1xuICogQGNhdGVnb3J5IE1pbGxpc2Vjb25kIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gYmUgYWRkZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV3IGRhdGUgd2l0aCB0aGUgbWlsbGlzZWNvbmRzIGFkZGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEFkZCA3NTAgbWlsbGlzZWNvbmRzIHRvIDEwIEp1bHkgMjAxNCAxMjo0NTozMC4wMDA6XG4gKiBjb25zdCByZXN1bHQgPSBhZGRNaWxsaXNlY29uZHMobmV3IERhdGUoMjAxNCwgNiwgMTAsIDEyLCA0NSwgMzAsIDApLCA3NTApXG4gKiAvLz0+IFRodSBKdWwgMTAgMjAxNCAxMjo0NTozMC43NTBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciB0aW1lc3RhbXAgPSB0b0RhdGUoZGlydHlEYXRlKS5nZXRUaW1lKCk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wICsgYW1vdW50KTtcbn0iLCJpbXBvcnQgaXNTYW1lTW9udGggZnJvbSBcIi4uL2lzU2FtZU1vbnRoL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc1RoaXNNb250aFxuICogQGNhdGVnb3J5IE1vbnRoIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIGluIHRoZSBzYW1lIG1vbnRoIGFzIHRoZSBjdXJyZW50IGRhdGU/XG4gKiBAcHVyZSBmYWxzZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSXMgdGhlIGdpdmVuIGRhdGUgaW4gdGhlIHNhbWUgbW9udGggYXMgdGhlIGN1cnJlbnQgZGF0ZT9cbiAqXG4gKiA+IOKaoO+4jyBQbGVhc2Ugbm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gaXMgbm90IHByZXNlbnQgaW4gdGhlIEZQIHN1Ym1vZHVsZSBhc1xuICogPiBpdCB1c2VzIGBEYXRlLm5vdygpYCBpbnRlcm5hbGx5IGhlbmNlIGltcHVyZSBhbmQgY2FuJ3QgYmUgc2FmZWx5IGN1cnJpZWQuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGUgaXMgaW4gdGhpcyBtb250aFxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHRvZGF5IGlzIDI1IFNlcHRlbWJlciAyMDE0LCBpcyAxNSBTZXB0ZW1iZXIgMjAxNCBpbiB0aGlzIG1vbnRoP1xuICogY29uc3QgcmVzdWx0ID0gaXNUaGlzTW9udGgobmV3IERhdGUoMjAxNCwgOCwgMTUpKVxuICogLy89PiB0cnVlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVGhpc01vbnRoKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIGlzU2FtZU1vbnRoKERhdGUubm93KCksIGRpcnR5RGF0ZSk7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc1NhbWVNb250aFxuICogQGNhdGVnb3J5IE1vbnRoIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFyZSB0aGUgZ2l2ZW4gZGF0ZXMgaW4gdGhlIHNhbWUgbW9udGggKGFuZCB5ZWFyKT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFyZSB0aGUgZ2l2ZW4gZGF0ZXMgaW4gdGhlIHNhbWUgbW9udGggKGFuZCB5ZWFyKT9cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBmaXJzdCBkYXRlIHRvIGNoZWNrXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgc2Vjb25kIGRhdGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZXMgYXJlIGluIHRoZSBzYW1lIG1vbnRoIChhbmQgeWVhcilcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQXJlIDIgU2VwdGVtYmVyIDIwMTQgYW5kIDI1IFNlcHRlbWJlciAyMDE0IGluIHRoZSBzYW1lIG1vbnRoP1xuICogY29uc3QgcmVzdWx0ID0gaXNTYW1lTW9udGgobmV3IERhdGUoMjAxNCwgOCwgMiksIG5ldyBEYXRlKDIwMTQsIDgsIDI1KSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBcmUgMiBTZXB0ZW1iZXIgMjAxNCBhbmQgMjUgU2VwdGVtYmVyIDIwMTUgaW4gdGhlIHNhbWUgbW9udGg/XG4gKiBjb25zdCByZXN1bHQgPSBpc1NhbWVNb250aChuZXcgRGF0ZSgyMDE0LCA4LCAyKSwgbmV3IERhdGUoMjAxNSwgOCwgMjUpKVxuICogLy89PiBmYWxzZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1NhbWVNb250aChkaXJ0eURhdGVMZWZ0LCBkaXJ0eURhdGVSaWdodCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGVMZWZ0ID0gdG9EYXRlKGRpcnR5RGF0ZUxlZnQpO1xuICB2YXIgZGF0ZVJpZ2h0ID0gdG9EYXRlKGRpcnR5RGF0ZVJpZ2h0KTtcbiAgcmV0dXJuIGRhdGVMZWZ0LmdldEZ1bGxZZWFyKCkgPT09IGRhdGVSaWdodC5nZXRGdWxsWWVhcigpICYmIGRhdGVMZWZ0LmdldE1vbnRoKCkgPT09IGRhdGVSaWdodC5nZXRNb250aCgpO1xufSIsImltcG9ydCB7IGZvcm1hdCwgaXNUaGlzTW9udGggfSBmcm9tIFwiZGF0ZS1mbnNcIjtcblxuZXhwb3J0IHtDcmVhdGVUb0RvLCB1cGRhdGVJRCwgaGlkZUFsbE90aGVyRWRpdEJUTnMsIHVuSGlkZUFsbEVkaXRCVE5zLCBcbiAgICB0b2dnbGVBbGxUYXNrc0VkaXRCVE5zLCB0b2dnbGVBbGxQcm9qZWN0c0VkaXRCVE5zLCBjaGVja1N1Ym1pdHRlZEZvcm19O1xuXG5cbmZ1bmN0aW9uIENyZWF0ZVRvRG8oc3VibWl0dGVkRm9ybSkge1xuICAgIGNvbnN0IHRpdGxlTmFtZSA9IHN1Ym1pdHRlZEZvcm1bMF0uY2hpbGROb2Rlc1szXS52YWx1ZTtcbiAgICBsZXQgZHVlRGF0ZSA9IHN1Ym1pdHRlZEZvcm1bMV0uY2hpbGROb2Rlc1szXS52YWx1ZTtcbiAgICBkdWVEYXRlID0gZHVlRGF0ZS5zcGxpdCgnLScpXG4gICAgZHVlRGF0ZSA9IGZvcm1hdChuZXcgRGF0ZShkdWVEYXRlWzBdLCBkdWVEYXRlWzFdIC0gMSwgZHVlRGF0ZVsyXSksICdNTS9kZC95eXl5JylcbiAgICBjb25zdCBwcmlvcml0eSA9IHN1Ym1pdHRlZEZvcm1bMl0uY2hpbGROb2Rlc1szXS52YWx1ZTtcbiAgICBjb25zdCBub3RlID0gc3VibWl0dGVkRm9ybVszXS5jaGlsZE5vZGVzWzNdLnZhbHVlO1xuICAgIHJldHVybiB7dGl0bGVOYW1lLCBkdWVEYXRlLCBwcmlvcml0eSwgbm90ZX07XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUlEKGVsZW1lbnQsIHR5cGU9JycpIHtcbiAgICBpZiAodHlwZSA9PT0gJ3Rhc2snKSB7XG4gICAgICAgIGNvbnN0IHRhc2tzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRhc2snKVxuICAgICAgICB0YXNrcy5mb3JFYWNoKCh0YXNrLCBpbmRleCkgPT57XG4gICAgICAgICAgICB0YXNrLmRhdGFzZXQuaWQgPSBpbmRleDtcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gTnVtYmVyKGVsZW1lbnQuZGF0YXNldC5pZCk7XG59XG5cbmZ1bmN0aW9uIGhpZGVBbGxPdGhlckVkaXRCVE5zKGNsaWNrZWRCdXR0b24sIHR5cGUpIHtcbiAgICBpZiAodHlwZSA9PT0gJ3Rhc2snKSB7XG4gICAgICAgIGNvbnN0IGFsbFRhc2tzRWRpdEJUTiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wcmlvcml0eS1lZGl0LWNvbnRhaW5lciA+IC5lZGl0Jyk7XG4gICAgICAgIGxldCB0b3RhbEJUTkNvdW50ID0gYWxsVGFza3NFZGl0QlROLmxlbmd0aFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvdGFsQlROQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgbGV0IGJ1dHRvbiA9IGFsbFRhc2tzRWRpdEJUTltpXTtcbiAgICAgICAgICAgIGlmICghKGJ1dHRvbiA9PT0gY2xpY2tlZEJ1dHRvbikpIHtcbiAgICAgICAgICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdwcm9qZWN0Jykge1xuICAgICAgICBjb25zdCBhbGxQcm9qZWN0c0VkaXRCVE4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucHJvamVjdC1kcm9wLWRvd24tYnV0dG9ucyA+IC5lZGl0Jyk7XG4gICAgICAgIGxldCB0b3RhbEJUTkNvdW50ID0gYWxsUHJvamVjdHNFZGl0QlROLmxlbmd0aFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvdGFsQlROQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgbGV0IGJ1dHRvbiA9IGFsbFByb2plY3RzRWRpdEJUTltpXTtcbiAgICAgICAgICAgIGlmICghKGJ1dHRvbiA9PT0gY2xpY2tlZEJ1dHRvbikpIHtcbiAgICAgICAgICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIHVuSGlkZUFsbEVkaXRCVE5zKHR5cGUpIHtcbiAgICBpZiAodHlwZSA9PT0gJ3Rhc2snKSB7XG4gICAgICAgIGNvbnN0IGFsbFRhc2tzRWRpdEJUTiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wcmlvcml0eS1lZGl0LWNvbnRhaW5lciA+IC5lZGl0Jyk7XG4gICAgICAgIGFsbFRhc2tzRWRpdEJUTi5mb3JFYWNoKChidXR0b24pID0+IHtcbiAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAncHJvamVjdCcpIHtcbiAgICAgICAgY29uc3QgYWxsUHJvamVjdHNFZGl0QlROID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnByb2plY3QtZHJvcC1kb3duLWJ1dHRvbnMgPiAuZWRpdCcpO1xuICAgICAgICBhbGxQcm9qZWN0c0VkaXRCVE4uZm9yRWFjaCgoYnV0dG9uKSA9PiB7XG4gICAgICAgICAgICBidXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdG9nZ2xlQWxsVGFza3NFZGl0QlROcyh0eXBlPScnKSB7XG4gICAgY29uc3QgYWxsVGFza3NFZGl0QlROID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnByaW9yaXR5LWVkaXQtY29udGFpbmVyID4gLmVkaXQnKTtcbiAgICBpZiAodHlwZSA9PT0gJ2hpZGUnKSB7XG4gICAgICAgIGFsbFRhc2tzRWRpdEJUTi5mb3JFYWNoKChidXR0b24pID0+IHtcbiAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYWxsVGFza3NFZGl0QlROLmZvckVhY2goKGJ1dHRvbikgPT4ge1xuICAgICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHRvZ2dsZUFsbFByb2plY3RzRWRpdEJUTnModHlwZT0nJykge1xuICAgIGNvbnN0IGFsbFByb2plY3RzRWRpdEJUTiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wcm9qZWN0LWRyb3AtZG93bi1idXR0b25zID4gLmVkaXQnKTtcbiAgICBpZiAodHlwZSA9PT0gJ2hpZGUnKSB7XG4gICAgICAgIGFsbFByb2plY3RzRWRpdEJUTi5mb3JFYWNoKChidXR0b24pID0+IHtcbiAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYWxsUHJvamVjdHNFZGl0QlROLmZvckVhY2goKGJ1dHRvbikgPT4ge1xuICAgICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrU3VibWl0dGVkRm9ybShzdWJtaXR0ZWRGb3JtKSB7XG4gICAgY29uc3QgdGl0bGVOYW1lID0gc3VibWl0dGVkRm9ybVswXS5jaGlsZE5vZGVzWzNdLnZhbHVlO1xuICAgIGxldCBkdWVEYXRlID0gc3VibWl0dGVkRm9ybVsxXS5jaGlsZE5vZGVzWzNdLnZhbHVlO1xuICAgIGR1ZURhdGUgPSBkdWVEYXRlLnNwbGl0KCctJyk7XG4gICAgaWYgKHRpdGxlTmFtZS5sZW5ndGggPCAxKSB7XG4gICAgICAgIGFsZXJ0KFwiUHJvamVjdCBtdXN0IGF0IGxlYXN0IGhhdmUgb25lIGxldHRlclwiKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoIShpc1RoaXNNb250aChuZXcgRGF0ZShkdWVEYXRlWzBdLCBkdWVEYXRlWzFdIC0gMSwgZHVlRGF0ZVsyXSkpKSkge1xuICAgICAgICBhbGVydChcIkR1ZSBkYXRlcyBNVVNUIGJlIGluIHRoZSBjdXJyZW50IG1vbnRoXCIpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG4iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHN0YXJ0T2ZEYXlcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBzdGFydCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgZGF5IGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHN0YXJ0IG9mIGEgZGF5XG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgZGF5IGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZkRheShuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApKVxuICogLy89PiBUdWUgU2VwIDAyIDIwMTQgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZkRheShkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCBpc1NhbWVEYXkgZnJvbSBcIi4uL2lzU2FtZURheS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNUb2RheVxuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB0b2RheT9cbiAqIEBwdXJlIGZhbHNlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJcyB0aGUgZ2l2ZW4gZGF0ZSB0b2RheT9cbiAqXG4gKiA+IOKaoO+4jyBQbGVhc2Ugbm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gaXMgbm90IHByZXNlbnQgaW4gdGhlIEZQIHN1Ym1vZHVsZSBhc1xuICogPiBpdCB1c2VzIGBEYXRlLm5vdygpYCBpbnRlcm5hbGx5IGhlbmNlIGltcHVyZSBhbmQgY2FuJ3QgYmUgc2FmZWx5IGN1cnJpZWQuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGUgaXMgdG9kYXlcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB0b2RheSBpcyA2IE9jdG9iZXIgMjAxNCwgaXMgNiBPY3RvYmVyIDE0OjAwOjAwIHRvZGF5P1xuICogY29uc3QgcmVzdWx0ID0gaXNUb2RheShuZXcgRGF0ZSgyMDE0LCA5LCA2LCAxNCwgMCkpXG4gKiAvLz0+IHRydWVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNUb2RheShkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHJldHVybiBpc1NhbWVEYXkoZGlydHlEYXRlLCBEYXRlLm5vdygpKTtcbn0iLCJpbXBvcnQgc3RhcnRPZkRheSBmcm9tIFwiLi4vc3RhcnRPZkRheS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNTYW1lRGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFyZSB0aGUgZ2l2ZW4gZGF0ZXMgaW4gdGhlIHNhbWUgZGF5IChhbmQgeWVhciBhbmQgbW9udGgpP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQXJlIHRoZSBnaXZlbiBkYXRlcyBpbiB0aGUgc2FtZSBkYXkgKGFuZCB5ZWFyIGFuZCBtb250aCk/XG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZUxlZnQgLSB0aGUgZmlyc3QgZGF0ZSB0byBjaGVja1xuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZVJpZ2h0IC0gdGhlIHNlY29uZCBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGVzIGFyZSBpbiB0aGUgc2FtZSBkYXkgKGFuZCB5ZWFyIGFuZCBtb250aClcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQXJlIDQgU2VwdGVtYmVyIDA2OjAwOjAwIGFuZCA0IFNlcHRlbWJlciAxODowMDowMCBpbiB0aGUgc2FtZSBkYXk/XG4gKiBjb25zdCByZXN1bHQgPSBpc1NhbWVEYXkobmV3IERhdGUoMjAxNCwgOCwgNCwgNiwgMCksIG5ldyBEYXRlKDIwMTQsIDgsIDQsIDE4LCAwKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBcmUgNCBTZXB0ZW1iZXIgYW5kIDQgT2N0b2JlciBpbiB0aGUgc2FtZSBkYXk/XG4gKiBjb25zdCByZXN1bHQgPSBpc1NhbWVEYXkobmV3IERhdGUoMjAxNCwgOCwgNCksIG5ldyBEYXRlKDIwMTQsIDksIDQpKVxuICogLy89PiBmYWxzZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBcmUgNCBTZXB0ZW1iZXIsIDIwMTQgYW5kIDQgU2VwdGVtYmVyLCAyMDE1IGluIHRoZSBzYW1lIGRheT9cbiAqIGNvbnN0IHJlc3VsdCA9IGlzU2FtZURheShuZXcgRGF0ZSgyMDE0LCA4LCA0KSwgbmV3IERhdGUoMjAxNSwgOCwgNCkpXG4gKiAvLz0+IGZhbHNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzU2FtZURheShkaXJ0eURhdGVMZWZ0LCBkaXJ0eURhdGVSaWdodCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGVMZWZ0U3RhcnRPZkRheSA9IHN0YXJ0T2ZEYXkoZGlydHlEYXRlTGVmdCk7XG4gIHZhciBkYXRlUmlnaHRTdGFydE9mRGF5ID0gc3RhcnRPZkRheShkaXJ0eURhdGVSaWdodCk7XG4gIHJldHVybiBkYXRlTGVmdFN0YXJ0T2ZEYXkuZ2V0VGltZSgpID09PSBkYXRlUmlnaHRTdGFydE9mRGF5LmdldFRpbWUoKTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vX2xpYi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBzdGFydE9mV2Vla1xuICogQGNhdGVnb3J5IFdlZWsgSGVscGVyc1xuICogQHN1bW1hcnkgUmV0dXJuIHRoZSBzdGFydCBvZiBhIHdlZWsgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhIHdlZWsgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIG9yaWdpbmFsIGRhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHtMb2NhbGV9IFtvcHRpb25zLmxvY2FsZT1kZWZhdWx0TG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0LiBTZWUgW0xvY2FsZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9Mb2NhbGV9XG4gKiBAcGFyYW0gezB8MXwyfDN8NHw1fDZ9IFtvcHRpb25zLndlZWtTdGFydHNPbj0wXSAtIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrICgwIC0gU3VuZGF5KVxuICogQHJldHVybnMge0RhdGV9IHRoZSBzdGFydCBvZiBhIHdlZWtcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMud2Vla1N0YXJ0c09uYCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNlxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBUaGUgc3RhcnQgb2YgYSB3ZWVrIGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZldlZWsobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gU3VuIEF1ZyAzMSAyMDE0IDAwOjAwOjAwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHRoZSB3ZWVrIHN0YXJ0cyBvbiBNb25kYXksIHRoZSBzdGFydCBvZiB0aGUgd2VlayBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZXZWVrKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCksIHsgd2Vla1N0YXJ0c09uOiAxIH0pXG4gKiAvLz0+IE1vbiBTZXAgMDEgMjAxNCAwMDowMDowMFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mV2VlayhkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9yZWYyLCBfcmVmMywgX29wdGlvbnMkd2Vla1N0YXJ0c09uLCBfb3B0aW9ucyRsb2NhbGUsIF9vcHRpb25zJGxvY2FsZSRvcHRpbywgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyO1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IHRvSW50ZWdlcigoX3JlZiA9IChfcmVmMiA9IChfcmVmMyA9IChfb3B0aW9ucyR3ZWVrU3RhcnRzT24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gIT09IHZvaWQgMCA/IF9vcHRpb25zJHdlZWtTdGFydHNPbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPSBfb3B0aW9ucyRsb2NhbGUub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlJG9wdGlvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUkb3B0aW8ud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmMyAhPT0gdm9pZCAwID8gX3JlZjMgOiBkZWZhdWx0T3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiAwKTtcblxuICAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDAgYW5kIDYgX2FuZF8gaXMgbm90IE5hTlxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0RGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCBpc1NhbWVXZWVrIGZyb20gXCIuLi9pc1NhbWVXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBpc1RoaXNXZWVrXG4gKiBAY2F0ZWdvcnkgV2VlayBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSBpbiB0aGUgc2FtZSB3ZWVrIGFzIHRoZSBjdXJyZW50IGRhdGU/XG4gKiBAcHVyZSBmYWxzZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSXMgdGhlIGdpdmVuIGRhdGUgaW4gdGhlIHNhbWUgd2VlayBhcyB0aGUgY3VycmVudCBkYXRlP1xuICpcbiAqID4g4pqg77iPIFBsZWFzZSBub3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBpcyBub3QgcHJlc2VudCBpbiB0aGUgRlAgc3VibW9kdWxlIGFzXG4gKiA+IGl0IHVzZXMgYERhdGUubm93KClgIGludGVybmFsbHkgaGVuY2UgaW1wdXJlIGFuZCBjYW4ndCBiZSBzYWZlbHkgY3VycmllZC5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gY2hlY2tcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSB0aGUgb2JqZWN0IHdpdGggb3B0aW9uc1xuICogQHBhcmFtIHtMb2NhbGV9IFtvcHRpb25zLmxvY2FsZT1kZWZhdWx0TG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0LiBTZWUgW0xvY2FsZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9Mb2NhbGV9XG4gKiBAcGFyYW0gezB8MXwyfDN8NHw1fDZ9IFtvcHRpb25zLndlZWtTdGFydHNPbj0wXSAtIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrICgwIC0gU3VuZGF5KVxuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlIGlzIGluIHRoaXMgd2Vla1xuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy53ZWVrU3RhcnRzT25gIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHRvZGF5IGlzIDI1IFNlcHRlbWJlciAyMDE0LCBpcyAyMSBTZXB0ZW1iZXIgMjAxNCBpbiB0aGlzIHdlZWs/XG4gKiBjb25zdCByZXN1bHQgPSBpc1RoaXNXZWVrKG5ldyBEYXRlKDIwMTQsIDgsIDIxKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB0b2RheSBpcyAyNSBTZXB0ZW1iZXIgMjAxNCBhbmQgd2VlayBzdGFydHMgd2l0aCBNb25kYXlcbiAqIC8vIGlzIDIxIFNlcHRlbWJlciAyMDE0IGluIHRoaXMgd2Vlaz9cbiAqIGNvbnN0IHJlc3VsdCA9IGlzVGhpc1dlZWsobmV3IERhdGUoMjAxNCwgOCwgMjEpLCB7IHdlZWtTdGFydHNPbjogMSB9KVxuICogLy89PiBmYWxzZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVGhpc1dlZWsoZGlydHlEYXRlLCBvcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICByZXR1cm4gaXNTYW1lV2VlayhkaXJ0eURhdGUsIERhdGUubm93KCksIG9wdGlvbnMpO1xufSIsImltcG9ydCBzdGFydE9mV2VlayBmcm9tIFwiLi4vc3RhcnRPZldlZWsvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzU2FtZVdlZWtcbiAqIEBjYXRlZ29yeSBXZWVrIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFyZSB0aGUgZ2l2ZW4gZGF0ZXMgaW4gdGhlIHNhbWUgd2VlayAoYW5kIG1vbnRoIGFuZCB5ZWFyKT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFyZSB0aGUgZ2l2ZW4gZGF0ZXMgaW4gdGhlIHNhbWUgd2VlayAoYW5kIG1vbnRoIGFuZCB5ZWFyKT9cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBmaXJzdCBkYXRlIHRvIGNoZWNrXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgc2Vjb25kIGRhdGUgdG8gY2hlY2tcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHtMb2NhbGV9IFtvcHRpb25zLmxvY2FsZT1kZWZhdWx0TG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0LiBTZWUgW0xvY2FsZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9Mb2NhbGV9XG4gKiBAcGFyYW0gezB8MXwyfDN8NHw1fDZ9IFtvcHRpb25zLndlZWtTdGFydHNPbj0wXSAtIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrICgwIC0gU3VuZGF5KVxuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlcyBhcmUgaW4gdGhlIHNhbWUgd2VlayAoYW5kIG1vbnRoIGFuZCB5ZWFyKVxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMud2Vla1N0YXJ0c09uYCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNlxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBcmUgMzEgQXVndXN0IDIwMTQgYW5kIDQgU2VwdGVtYmVyIDIwMTQgaW4gdGhlIHNhbWUgd2Vlaz9cbiAqIGNvbnN0IHJlc3VsdCA9IGlzU2FtZVdlZWsobmV3IERhdGUoMjAxNCwgNywgMzEpLCBuZXcgRGF0ZSgyMDE0LCA4LCA0KSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB3ZWVrIHN0YXJ0cyB3aXRoIE1vbmRheSxcbiAqIC8vIGFyZSAzMSBBdWd1c3QgMjAxNCBhbmQgNCBTZXB0ZW1iZXIgMjAxNCBpbiB0aGUgc2FtZSB3ZWVrP1xuICogY29uc3QgcmVzdWx0ID0gaXNTYW1lV2VlayhuZXcgRGF0ZSgyMDE0LCA3LCAzMSksIG5ldyBEYXRlKDIwMTQsIDgsIDQpLCB7XG4gKiAgIHdlZWtTdGFydHNPbjogMVxuICogfSlcbiAqIC8vPT4gZmFsc2VcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQXJlIDEgSmFudWFyeSAyMDE0IGFuZCAxIEphbnVhcnkgMjAxNSBpbiB0aGUgc2FtZSB3ZWVrP1xuICogY29uc3QgcmVzdWx0ID0gaXNTYW1lV2VlayhuZXcgRGF0ZSgyMDE0LCAwLCAxKSwgbmV3IERhdGUoMjAxNSwgMCwgMSkpXG4gKiAvLz0+IGZhbHNlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzU2FtZVdlZWsoZGlydHlEYXRlTGVmdCwgZGlydHlEYXRlUmlnaHQsIG9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlTGVmdFN0YXJ0T2ZXZWVrID0gc3RhcnRPZldlZWsoZGlydHlEYXRlTGVmdCwgb3B0aW9ucyk7XG4gIHZhciBkYXRlUmlnaHRTdGFydE9mV2VlayA9IHN0YXJ0T2ZXZWVrKGRpcnR5RGF0ZVJpZ2h0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGRhdGVMZWZ0U3RhcnRPZldlZWsuZ2V0VGltZSgpID09PSBkYXRlUmlnaHRTdGFydE9mV2Vlay5nZXRUaW1lKCk7XG59IiwiaW1wb3J0IHsgY3JlYXRlVGFzayB9IGZyb20gXCIuL1RvRG9cIjtcbmltcG9ydCB7IGNsZWFyVGFiLCBkZWxldGVBZGRUYXNrRGl2IH0gZnJvbSBcIi4vVUlcIjtcbmltcG9ydCB7IGxvYWRUb2RvcyB9IGZyb20gXCIuL3N0b3JhZ2VcIjtcbmltcG9ydCB7Zm9ybWF0LCBpc1RvZGF5LCBpc1RoaXNXZWVrLCBpc1RoaXNNb250aCwgc3RhcnRPZldlZWssIGVuZE9mV2Vla30gZnJvbSBcImRhdGUtZm5zXCI7XG5cbmV4cG9ydCB7aW5ib3hUYWIsIHRvZGF5VGFiLCB3ZWVrVGFiLCBtb250aFRhYiwgc3dpdGNoVGFifVxuXG5mdW5jdGlvbiBpbmJveFRhYigpIHtcbiAgICBjb25zdCBpbmJveFRhYiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbmJveCcpO1xuICAgIGluYm94VGFiLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBjb25zdCB0YWJUaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50aXRsZS1vZi10YWInKTtcbiAgICAgICAgdGFiVGl0bGUuaW5uZXJIVE1MID0gJ0luYm94J1xuICAgICAgICBjbGVhclRhYigpO1xuICAgICAgICBjb25zdCBpbmJveCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2luYm94JykpO1xuICAgICAgICBsb2FkVG9kb3MoaW5ib3gpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiB0b2RheVRhYigpIHtcbiAgICBjb25zdCB0b2RheVRhYiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b2RheScpO1xuICAgIHRvZGF5VGFiLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBsZXQgdGFiTmFtZSA9ICdUb2RheSc7XG4gICAgICAgIGNsZWFyVGFiKCk7XG4gICAgICAgIGRlbGV0ZUFkZFRhc2tEaXYoKTtcbiAgICAgICAgZ2V0VGFiVG9Eb3ModGFiTmFtZSk7XG4gICAgICAgIGFkanVzdFRhYkluZm8odGFiTmFtZSlcbiAgICB9KVxufVxuXG5mdW5jdGlvbiB3ZWVrVGFiKCkge1xuICAgIGNvbnN0IHdlZWtUYWIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud2VlaycpO1xuICAgIHdlZWtUYWIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGxldCB0YWJOYW1lID0gJ1dlZWsnXG4gICAgICAgIGNsZWFyVGFiKCk7XG4gICAgICAgIGRlbGV0ZUFkZFRhc2tEaXYoKTtcbiAgICAgICAgZ2V0VGFiVG9Eb3ModGFiTmFtZSlcbiAgICAgICAgYWRqdXN0VGFiSW5mbyh0YWJOYW1lKVxuICAgIH0pXG59XG4gXG5mdW5jdGlvbiBtb250aFRhYigpIHtcbiAgICBjb25zdCBtb250aFRhYiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb250aCcpO1xuICAgIG1vbnRoVGFiLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBsZXQgdGFiTmFtZSA9ICdNb250aCc7XG4gICAgICAgIGNsZWFyVGFiKCk7XG4gICAgICAgIGRlbGV0ZUFkZFRhc2tEaXYoKTtcbiAgICAgICAgZ2V0VGFiVG9Eb3ModGFiTmFtZSlcbiAgICAgICAgYWRqdXN0VGFiSW5mbyh0YWJOYW1lKVxuICAgIH0pXG59XG5cbmZ1bmN0aW9uIHN3aXRjaFRhYigpIHtcbiAgICBjb25zdCB0YWJUaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50aXRsZS1vZi10YWInKTtcbiAgICB0YWJUaXRsZS5pbm5lckhUTUwgPSAnSW5ib3gnXG4gICAgY2xlYXJUYWIoKTtcbiAgICBjb25zdCBpbmJveCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2luYm94JykpO1xuICAgIGxvYWRUb2RvcyhpbmJveCk7XG59XG5cblxuZnVuY3Rpb24gZ2V0VGFiVG9Eb3ModGFiTmFtZSkge1xuICAgIGNvbnN0IGluYm94ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnaW5ib3gnKSk7XG4gICAgY29uc3QgcHJvamVjdHMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwcm9qZWN0cycpKTtcbiAgICBpZiAoQm9vbGVhbihpbmJveFswXSkgPT09IGZhbHNlICYmIEJvb2xlYW4ocHJvamVjdHNbMF0pID09PSBmYWxzZSkgcmV0dXJuO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5ib3gubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGlzVG9kYXkobmV3IERhdGUoaW5ib3hbaV0uZHVlRGF0ZSkpICYmIHRhYk5hbWUgPT09ICdUb2RheScpIHtcbiAgICAgICAgICAgIGNyZWF0ZVRhc2soaW5ib3hbaV0udGl0bGVOYW1lLCBcbiAgICAgICAgICAgICAgICBpbmJveFtpXS5kdWVEYXRlLCBcbiAgICAgICAgICAgICAgICBpbmJveFtpXS5wcmlvcml0eSwgXG4gICAgICAgICAgICAgICAgaW5ib3hbaV0ubm90ZSxcbiAgICAgICAgICAgICAgICAnKEluYm94KScpXG4gICAgICAgIH0gZWxzZSBpZiAoaXNUaGlzV2VlayhuZXcgRGF0ZShpbmJveFtpXS5kdWVEYXRlKSkgJiYgdGFiTmFtZSA9PT0gJ1dlZWsnKSB7XG4gICAgICAgICAgICBjcmVhdGVUYXNrKGluYm94W2ldLnRpdGxlTmFtZSwgXG4gICAgICAgICAgICAgICAgaW5ib3hbaV0uZHVlRGF0ZSwgXG4gICAgICAgICAgICAgICAgaW5ib3hbaV0ucHJpb3JpdHksIFxuICAgICAgICAgICAgICAgIGluYm94W2ldLm5vdGUsXG4gICAgICAgICAgICAgICAgJyhJbmJveCknKVxuICAgICAgICB9IGVsc2UgaWYgKGlzVGhpc01vbnRoKG5ldyBEYXRlKGluYm94W2ldLmR1ZURhdGUpKSAmJiB0YWJOYW1lID09PSAnTW9udGgnKSB7XG4gICAgICAgICAgICBjcmVhdGVUYXNrKGluYm94W2ldLnRpdGxlTmFtZSwgXG4gICAgICAgICAgICAgICAgaW5ib3hbaV0uZHVlRGF0ZSwgXG4gICAgICAgICAgICAgICAgaW5ib3hbaV0ucHJpb3JpdHksIFxuICAgICAgICAgICAgICAgIGluYm94W2ldLm5vdGUsXG4gICAgICAgICAgICAgICAgJyhJbmJveCknKVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChCb29sZWFuKHByb2plY3RzWzBdKSA9PT0gZmFsc2UpIHJldHVybjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb2plY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBwcm9qZWN0TmFtZSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHByb2plY3RzW2ldKVswXTtcbiAgICAgICAgbGV0IHByb2plY3QgPSBwcm9qZWN0c1tpXVtbcHJvamVjdE5hbWVdXVxuICAgICAgICBwcm9qZWN0LmZvckVhY2godG9kbyA9PiB7XG4gICAgICAgICAgICBpZiAoaXNUb2RheShuZXcgRGF0ZSh0b2RvLmR1ZURhdGUpKSAmJiB0YWJOYW1lID09PSAnVG9kYXknKSB7XG4gICAgICAgICAgICAgICAgY3JlYXRlVGFzayh0b2RvLnRpdGxlTmFtZSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9kby5kdWVEYXRlLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2RvLnByaW9yaXR5LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2RvLm5vdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCgke3Byb2plY3ROYW1lfSlgKVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1RoaXNXZWVrKG5ldyBEYXRlKHRvZG8uZHVlRGF0ZSkpICYmIHRhYk5hbWUgPT09ICdXZWVrJykge1xuICAgICAgICAgICAgICAgIGNyZWF0ZVRhc2sodG9kby50aXRsZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9kby5kdWVEYXRlLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2RvLnByaW9yaXR5LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2RvLm5vdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCgke3Byb2plY3ROYW1lfSlgKVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1RoaXNNb250aChuZXcgRGF0ZSh0b2RvLmR1ZURhdGUpKSAmJiB0YWJOYW1lID09PSAnTW9udGgnKSB7XG4gICAgICAgICAgICAgICAgY3JlYXRlVGFzayh0b2RvLnRpdGxlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2RvLmR1ZURhdGUsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvZG8ucHJpb3JpdHksIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvZG8ubm90ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgKCR7cHJvamVjdE5hbWV9KWApXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYWRqdXN0VGFiSW5mbyh0YWJOYW1lKSB7XG4gICAgLy8gVG8gdW5kZXJzdGFuZCB0aGUgZm9ybWF0IGZ1bmN0aW9uLCB2aXNpdCB0aGlzIHdlYnNpdGUgZm9yIGRvY3VtZW50YXRpb246IGh0dHBzOi8vZGF0ZS1mbnMub3JnL3YyLjMwLjAvZG9jcy9mb3JtYXRcbiAgICBjb25zdCB0YWJUaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50aXRsZS1vZi10YWInKTtcbiAgICBjb25zdCBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgIGlmICh0YWJOYW1lID09PSAnVG9kYXknKSB7XG4gICAgICAgIGNvbnN0IGRhdGVTcGFuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmRhdGUnKTtcbiAgICAgICAgZGF0ZVNwYW4uZm9yRWFjaChzcGFuID0+IHtcbiAgICAgICAgICAgIHNwYW4ucmVtb3ZlKClcbiAgICAgICAgfSk7XG4gICAgICAgIHRhYlRpdGxlLnRleHRDb250ZW50ID0gdGFiTmFtZVxuICAgICAgICBzcGFuLmlubmVySFRNTCA9IGAke2Zvcm1hdChuZXcgRGF0ZSgpLCAnTU1NIGRvJyl9YCBcbiAgICAgICAgdGFiVGl0bGUuYXBwZW5kQ2hpbGQoc3Bhbik7XG4gICAgfSBlbHNlIGlmICh0YWJOYW1lID09PSAnV2VlaycpIHtcbiAgICAgICAgdGFiVGl0bGUudGV4dENvbnRlbnQgPSBgVGhpcyAke3RhYk5hbWV9YFxuICAgICAgICBzcGFuLmlubmVySFRNTCA9IGAke2Zvcm1hdChzdGFydE9mV2VlayhuZXcgRGF0ZSgpKSwgJ01NL2RkJyl9IC0gJHtmb3JtYXQoZW5kT2ZXZWVrKG5ldyBEYXRlKCkpLCAnTU0vZGQnKX1gXG4gICAgICAgIHRhYlRpdGxlLmFwcGVuZENoaWxkKHNwYW4pO1xuICAgIH0gZWxzZSBpZiAodGFiTmFtZSA9PT0gJ01vbnRoJykge1xuICAgICAgICB0YWJUaXRsZS5pbm5lckhUTUwgPSBgVGhpcyAke3RhYk5hbWV9YFxuICAgICAgICBzcGFuLmlubmVySFRNTCA9IGAke2Zvcm1hdChuZXcgRGF0ZSgpLCAnTU1NTScpfWA7XG4gICAgICAgIHRhYlRpdGxlLmFwcGVuZENoaWxkKHNwYW4pXG4gICAgfVxufVxuIiwiaW1wb3J0IHsgZ2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tIFwiLi4vX2xpYi9kZWZhdWx0T3B0aW9ucy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgZW5kT2ZXZWVrXG4gKiBAY2F0ZWdvcnkgV2VlayBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIGVuZCBvZiBhIHdlZWsgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBlbmQgb2YgYSB3ZWVrIGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqIFRoZSByZXN1bHQgd2lsbCBiZSBpbiB0aGUgbG9jYWwgdGltZXpvbmUuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHBhcmFtIHswfDF8MnwzfDR8NXw2fSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgZW5kIG9mIGEgd2Vla1xuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy53ZWVrU3RhcnRzT25gIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBlbmQgb2YgYSB3ZWVrIGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gZW5kT2ZXZWVrKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCkpXG4gKiAvLz0+IFNhdCBTZXAgMDYgMjAxNCAyMzo1OTo1OS45OTlcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSWYgdGhlIHdlZWsgc3RhcnRzIG9uIE1vbmRheSwgdGhlIGVuZCBvZiB0aGUgd2VlayBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IGVuZE9mV2VlayhuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApLCB7IHdlZWtTdGFydHNPbjogMSB9KVxuICogLy89PiBTdW4gU2VwIDA3IDIwMTQgMjM6NTk6NTkuOTk5XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVuZE9mV2VlayhkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgdmFyIF9yZWYsIF9yZWYyLCBfcmVmMywgX29wdGlvbnMkd2Vla1N0YXJ0c09uLCBfb3B0aW9ucyRsb2NhbGUsIF9vcHRpb25zJGxvY2FsZSRvcHRpbywgX2RlZmF1bHRPcHRpb25zJGxvY2FsLCBfZGVmYXVsdE9wdGlvbnMkbG9jYWwyO1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRlZmF1bHRPcHRpb25zID0gZ2V0RGVmYXVsdE9wdGlvbnMoKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IHRvSW50ZWdlcigoX3JlZiA9IChfcmVmMiA9IChfcmVmMyA9IChfb3B0aW9ucyR3ZWVrU3RhcnRzT24gPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyR3ZWVrU3RhcnRzT24gIT09IHZvaWQgMCA/IF9vcHRpb25zJHdlZWtTdGFydHNPbiA6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9vcHRpb25zJGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlKSA9PT0gbnVsbCB8fCBfb3B0aW9ucyRsb2NhbGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfb3B0aW9ucyRsb2NhbGUkb3B0aW8gPSBfb3B0aW9ucyRsb2NhbGUub3B0aW9ucykgPT09IG51bGwgfHwgX29wdGlvbnMkbG9jYWxlJG9wdGlvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfb3B0aW9ucyRsb2NhbGUkb3B0aW8ud2Vla1N0YXJ0c09uKSAhPT0gbnVsbCAmJiBfcmVmMyAhPT0gdm9pZCAwID8gX3JlZjMgOiBkZWZhdWx0T3B0aW9ucy53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IChfZGVmYXVsdE9wdGlvbnMkbG9jYWwgPSBkZWZhdWx0T3B0aW9ucy5sb2NhbGUpID09PSBudWxsIHx8IF9kZWZhdWx0T3B0aW9ucyRsb2NhbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZhdWx0T3B0aW9ucyRsb2NhbDIgPSBfZGVmYXVsdE9wdGlvbnMkbG9jYWwub3B0aW9ucykgPT09IG51bGwgfHwgX2RlZmF1bHRPcHRpb25zJGxvY2FsMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmF1bHRPcHRpb25zJGxvY2FsMi53ZWVrU3RhcnRzT24pICE9PSBudWxsICYmIF9yZWYgIT09IHZvaWQgMCA/IF9yZWYgOiAwKTtcblxuICAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDAgYW5kIDYgX2FuZF8gaXMgbm90IE5hTlxuICBpZiAoISh3ZWVrU3RhcnRzT24gPj0gMCAmJiB3ZWVrU3RhcnRzT24gPD0gNikpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2Vla1N0YXJ0c09uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA2IGluY2x1c2l2ZWx5Jyk7XG4gIH1cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0RGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IC03IDogMCkgKyA2IC0gKGRheSAtIHdlZWtTdGFydHNPbik7XG4gIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIGRpZmYpO1xuICBkYXRlLnNldEhvdXJzKDIzLCA1OSwgNTksIDk5OSk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB7IGNoZWNrSWZQcm9qZWN0RXhpc3RzLCBhZGRQcm9qZWN0VG9TdG9yYWdlLCBsb2FkVG9kb3MgfSBmcm9tIFwiLi9zdG9yYWdlXCI7XG5pbXBvcnQgeyBjbGVhclRhYiB9IGZyb20gXCIuL1VJXCI7XG5pbXBvcnQgeyBzd2l0Y2hUYWIgfSBmcm9tIFwiLi90YWJzXCI7XG5pbXBvcnQge3VwZGF0ZUlELCBoaWRlQWxsT3RoZXJFZGl0QlROcywgdW5IaWRlQWxsRWRpdEJUTnMsIHRvZ2dsZUFsbFByb2plY3RzRWRpdEJUTnN9IGZyb20gXCIuL2FwcFwiO1xuXG5leHBvcnQge2NyZWF0ZUFkZFByb2plY3RMSSwgY3JlYXRlUHJvamVjdCwgZGVsZXRlQWRkUHJvamVjdExJfTtcblxuZnVuY3Rpb24gY3JlYXRlQWRkUHJvamVjdExJKCkge1xuICAgIGNvbnN0IHByb2plY3RzVWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvamVjdHMnKTtcbiAgICBjb25zdCBhZGRQcm9qZWN0TEkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgIGFkZFByb2plY3RMSS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2FkZC1wcm9qZWN0JylcbiAgICBhZGRQcm9qZWN0TEkuaW5uZXJIVE1MID0gYDxpbWcgc3JjPVwiLi9pY29ucy9wbHVzLnN2Z1wiIGFsdD1cIlBsdXMgaWNvblwiIGNsYXNzPVwicGx1cy1pY29uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5BZGQgcHJvamVjdDwvc3Bhbj5gO1xuICAgIHByb2plY3RzVWwuYXBwZW5kQ2hpbGQoYWRkUHJvamVjdExJKTtcbiAgICBhZGRQcm9qZWN0TEkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIHRvZ2dsZUFsbFByb2plY3RzRWRpdEJUTnMoJ2hpZGUnKVxuICAgICAgICBkZWxldGVBZGRQcm9qZWN0TEkoKTtcbiAgICAgICAgY3JlYXRlUHJvamVjdE5hbWVGb3JtKHByb2plY3RzVWwpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVQcm9qZWN0TmFtZUZvcm0ocHJvamVjdHNVbCkge1xuICAgIGNvbnN0IHByb2plY3ROYW1lRm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcbiAgICBwcm9qZWN0TmFtZUZvcm0uc2V0QXR0cmlidXRlKCdjbGFzcycsICdjcmVhdGUtcHJvamVjdCcpO1xuICAgIHByb2plY3ROYW1lRm9ybS5pbm5lckhUTUwgPSBcbiAgICAgICAgYDxsYWJlbCBmb3I9XCJpbnB1dC1wcm9qZWN0LW5hbWVcIj48L2xhYmVsPlxuICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwicHJvamVjdC1uYW1lXCIgaWQ9XCJpbnB1dC1wcm9qZWN0LW5hbWVcIiBtYXhsZW5ndGg9XCIyMFwiIGF1dG9jb21wbGV0ZT1cIm9mZlwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicHJvamVjdC1mb3JtLWJ1dHRvbnNcIj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJzdWJtaXRcIiB0eXBlPVwiYnV0dG9uXCI+Q3JlYXRlPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiY2FuY2VsXCIgdHlwZT1cImJ1dHRvblwiPkNhbmNlbDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5gO1xuICAgIHByb2plY3RzVWwuYXBwZW5kQ2hpbGQocHJvamVjdE5hbWVGb3JtKTtcbiAgICBjYW5jZWxQcm9qZWN0TmFtZUZvcm0ocHJvamVjdE5hbWVGb3JtKTtcbiAgICBzdWJtaXRQcm9qZWN0TmFtZUZvcm0ocHJvamVjdE5hbWVGb3JtKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUHJvamVjdCh0aXRsZSkge1xuICAgIGNvbnN0IHByb2plY3RzVWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvamVjdHMnKTtcbiAgICBjb25zdCBwcm9qZWN0TEkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgIHByb2plY3RMSS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3Byb2plY3QnKTtcbiAgICBjb25zdCBwcm9qZWN0TmFtZVNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgY29uc3QgcHJvamVjdERyb3BEb3duSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgIHByb2plY3REcm9wRG93bkljb24uc2V0QXR0cmlidXRlKCdzcmMnLCAnLi9pY29ucy90cmlhbmdsZS1kb3duLnBuZycpO1xuICAgIHByb2plY3REcm9wRG93bkljb24uc2V0QXR0cmlidXRlKCdhbHQnLCAnRHJvcCBkb3duIGljb24nKTtcbiAgICBwcm9qZWN0RHJvcERvd25JY29uLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnZGV0YWlscycpO1xuICAgIHByb2plY3RMSS5hcHBlbmRDaGlsZChwcm9qZWN0TmFtZVNwYW4pO1xuICAgIHByb2plY3RMSS5hcHBlbmRDaGlsZChwcm9qZWN0RHJvcERvd25JY29uKTtcbiAgICBwcm9qZWN0TmFtZVNwYW4uaW5uZXJIVE1MID0gdGl0bGU7XG4gICAgcHJvamVjdHNVbC5hcHBlbmQocHJvamVjdExJKTtcbiAgICBjb25zdCBwcm9qZWN0SUQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucHJvamVjdCcpLmxlbmd0aCAtIDE7XG4gICAgcHJvamVjdExJLnNldEF0dHJpYnV0ZSgnZGF0YS1JZCcsIHByb2plY3RJRCk7XG4gICAgcHJvamVjdE5hbWVTcGFuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBjbGVhclRhYigpXG4gICAgICAgIHRpdGxlID0gcHJvamVjdE5hbWVTcGFuLmlubmVySFRNTFxuICAgICAgICBvcGVuUHJvamVjdCh0aXRsZSwgcHJvamVjdExJKTtcbiAgICB9KTtcbiAgICBcbiAgICBjcmVhdGVQcm9qZWN0RGV0YWlscyhwcm9qZWN0SUQsIHByb2plY3REcm9wRG93bkljb24sIHByb2plY3RMSSlcbn1cblxuZnVuY3Rpb24gY2FuY2VsUHJvamVjdE5hbWVGb3JtKHByb2plY3ROYW1lRm9ybSkge1xuICAgIGNvbnN0IGNhbmNlbEJUTiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9qZWN0LWZvcm0tYnV0dG9ucyA+IC5jYW5jZWwnKTtcbiAgICBjYW5jZWxCVE4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIHByb2plY3ROYW1lRm9ybS5yZW1vdmUoKTtcbiAgICAgICAgY3JlYXRlQWRkUHJvamVjdExJKCk7XG4gICAgICAgIHRvZ2dsZUFsbFByb2plY3RzRWRpdEJUTnMoKVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBzdWJtaXRQcm9qZWN0TmFtZUZvcm0ocHJvamVjdE5hbWVGb3JtKSB7XG4gICAgY29uc3Qgc3VibWl0QlROID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2plY3QtZm9ybS1idXR0b25zID4gLnN1Ym1pdCcpO1xuICAgIHN1Ym1pdEJUTi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgaWYgKGNoZWNrSWZQcm9qZWN0RXhpc3RzKHByb2plY3ROYW1lRm9ybS5jaGlsZE5vZGVzWzJdLnZhbHVlKSkge1xuICAgICAgICAgICAgYWxlcnQoJ1Byb2plY3RzIG11c3QgaGF2ZSBkaWZmZXJlbnQgbmFtZXMnKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3JlYXRlUHJvamVjdChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaW5wdXQtcHJvamVjdC1uYW1lJykudmFsdWUpO1xuICAgICAgICAgICAgYWRkUHJvamVjdFRvU3RvcmFnZShwcm9qZWN0TmFtZUZvcm0uY2hpbGROb2Rlc1syXS52YWx1ZSlcbiAgICAgICAgICAgIHByb2plY3ROYW1lRm9ybS5yZW1vdmUoKTtcbiAgICAgICAgICAgIGNyZWF0ZUFkZFByb2plY3RMSSgpXG4gICAgICAgICAgICB0b2dnbGVBbGxQcm9qZWN0c0VkaXRCVE5zKClcbiAgICAgICAgfTtcbiAgICB9KTtcbn1cblxuXG5mdW5jdGlvbiBvcGVuUHJvamVjdCh0aXRsZSwgcHJvamVjdExJKSB7XG4gICAgY29uc3QgdGFiVGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGl0bGUtb2YtdGFiJyk7XG4gICAgdGFiVGl0bGUuaW5uZXJIVE1MID0gdGl0bGU7XG4gICAgbGV0IHByb2plY3RzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvamVjdHMnKSk7XG4gICAgbGV0IHByb2plY3RJbmRleCA9IHByb2plY3RMSS5kYXRhc2V0LmlkXG4gICAgbG9hZFRvZG9zKHByb2plY3RzW3Byb2plY3RJbmRleF1bW3RpdGxlXV0pXG59XG5cbmZ1bmN0aW9uIGRlbGV0ZUFkZFByb2plY3RMSSgpIHtcbiAgICBjb25zdCBhZGRQcm9qZWN0TEkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdsaS5hZGQtcHJvamVjdCcpO1xuICAgIGFkZFByb2plY3RMSS5yZW1vdmUoKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVQcm9qZWN0RGV0YWlscyhpZCwgZHJvcERvd25JY29uKSB7XG4gICAgbGV0IHByb2plY3RMSSA9IHJldHVyblByb3BlclByb2plY3RMSShpZClcbiAgICBjb25zdCBwcm9qZWN0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wcm9qZWN0Jyk7XG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGl2LmNsYXNzTGlzdC5hZGQoJ3Byb2plY3QtZHJvcC1kb3duLWJ1dHRvbnMnLCAnaGlkZGVuJyk7XG4gICAgY29uc3QgZWRpdEJUTiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIGVkaXRCVE4uaW5uZXJIVE1MID0gJ0VkaXQnO1xuICAgIGVkaXRCVE4uc2V0QXR0cmlidXRlKCdjbGFzcycsICdlZGl0Jyk7XG4gICAgY29uc3QgZGVsZXRlQlROID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgZGVsZXRlQlROLmlubmVySFRNTCA9ICdEZWxldGUnO1xuICAgIGRlbGV0ZUJUTi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2RlbGV0ZScpO1xuICAgIGRpdi5hcHBlbmRDaGlsZChlZGl0QlROKTtcbiAgICBkaXYuYXBwZW5kQ2hpbGQoZGVsZXRlQlROKTtcbiAgICBwcm9qZWN0c1tpZF0uYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICB2aWV3UHJvamVjdERldGFpbHMoZHJvcERvd25JY29uLCBwcm9qZWN0TEkpXG4gICAgZWRpdEJUTi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgaWQgPSB1cGRhdGVJRChwcm9qZWN0TEkpXG4gICAgICAgIGhpZGVBbGxPdGhlckVkaXRCVE5zKGVkaXRCVE4sICdwcm9qZWN0JylcbiAgICAgICAgZWRpdFByb2plY3ROYW1lRm9ybShpZClcbiAgICAgICAgXG4gICAgfSk7XG4gICAgZGVsZXRlQlROLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBpZCA9IHVwZGF0ZUlEKHByb2plY3RMSSlcbiAgICAgICAgZGVsZXRlUHJvamVjdChpZClcbiAgICAgICAgc3dpdGNoVGFiKClcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdmlld1Byb2plY3REZXRhaWxzKGRyb3BEb3duSWNvbiwgcHJvamVjdExJKSB7XG4gICAgZHJvcERvd25JY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBkcm9wRG93bkljb24uc2V0QXR0cmlidXRlKCdzcmMnLCAnLi9pY29ucy90cmlhbmdsZS5wbmcnKTtcbiAgICAgICAgaWYgKHByb2plY3RMSS5jaGlsZE5vZGVzWzJdKSB7XG4gICAgICAgICAgICBwcm9qZWN0TEkuY2hpbGROb2Rlc1syXS5jbGFzc0xpc3QudG9nZ2xlKCdoaWRkZW4nKTtcbiAgICAgICAgICAgIGlmICgnaGlkZGVuJyA9PT0gcHJvamVjdExJLmNoaWxkTm9kZXNbMl0uY2xhc3NMaXN0WzFdKSB7XG4gICAgICAgICAgICAgICAgZHJvcERvd25JY29uLnNldEF0dHJpYnV0ZSgnc3JjJywgJy4vaWNvbnMvdHJpYW5nbGUtZG93bi5wbmcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZWRpdFByb2plY3ROYW1lRm9ybShpZCkge1xuICAgIGxldCBwcm9qZWN0TEkgPSByZXR1cm5Qcm9wZXJQcm9qZWN0TEkoaWQpO1xuICAgIGNvbnN0IHByb2plY3ROYW1lRm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcbiAgICBwcm9qZWN0TmFtZUZvcm0uc2V0QXR0cmlidXRlKCdjbGFzcycsICdjcmVhdGUtcHJvamVjdCcpO1xuICAgIHByb2plY3ROYW1lRm9ybS5pbm5lckhUTUwgPSBcbiAgICAgICAgYDxsYWJlbCBmb3I9XCJpbnB1dC1wcm9qZWN0LW5hbWVcIj48L2xhYmVsPlxuICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwicHJvamVjdC1uYW1lXCIgaWQ9XCJpbnB1dC1wcm9qZWN0LW5hbWVcIiBtYXhsZW5ndGg9XCIyMFwiIGF1dG9jb21wbGV0ZT1cIm9mZlwiIGNsYXNzPVwibmV3LW5hbWUtZm9ybVwiIHJlcXVpcmVkPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicHJvamVjdC1mb3JtLWJ1dHRvbnMgbmV3LW5hbWVcIj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJzdWJtaXRcIiB0eXBlPVwiYnV0dG9uXCI+U2F2ZTwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImNhbmNlbFwiIHR5cGU9XCJidXR0b25cIj5DYW5jZWw8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+YDtcbiAgICB0b2dnbGVIaWRkZW4ocHJvamVjdExJKVxuICAgIHByb2plY3RMSS5pbnNlcnRCZWZvcmUocHJvamVjdE5hbWVGb3JtLCBwcm9qZWN0TEkuY2hpbGROb2Rlc1swXSk7XG4gICAgbmV3TmFtZUNhbmNlbEJUTihwcm9qZWN0TmFtZUZvcm0sIHByb2plY3RMSSlcbiAgICBuZXdOYW1lU3VibWl0QlROKHByb2plY3ROYW1lRm9ybSwgcHJvamVjdExJLCBpZCkgIFxufVxuXG5mdW5jdGlvbiBkZWxldGVQcm9qZWN0KGlkKSB7XG4gICAgbGV0IHByb2plY3RzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvamVjdHMnKSlcbiAgICBsZXQgcHJvamVjdCA9IHJldHVyblByb3BlclByb2plY3RMSShpZCk7XG4gICAgcHJvamVjdC5yZW1vdmUoKVxuICAgIHByb2plY3RzLnNwbGljZShpZCwgMSlcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncHJvamVjdHMnLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0cykpXG4gICAgdXBkYXRlUHJvamVjdElkKClcbn1cblxuZnVuY3Rpb24gcmV0dXJuUHJvcGVyUHJvamVjdExJKGlkKSB7XG4gICAgbGV0IHByb2plY3RMSSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wcm9qZWN0Jyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9qZWN0TEkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKE51bWJlcihwcm9qZWN0TElbaV0uZGF0YXNldC5pZCkgPT09IGlkKXtcbiAgICAgICAgICAgIHJldHVybiBwcm9qZWN0TElbaV07XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5ld05hbWVDYW5jZWxCVE4ocHJvamVjdE5hbWVGb3JtLCBwcm9qZWN0TEkpIHtcbiAgICBjb25zdCBuZXdOYW1lQ2FuY2VsQlROID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5ldy1uYW1lID4gYnV0dG9uLmNhbmNlbCcpO1xuICAgIG5ld05hbWVDYW5jZWxCVE4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIHByb2plY3ROYW1lRm9ybS5yZW1vdmUoKTtcbiAgICAgICAgdG9nZ2xlSGlkZGVuKHByb2plY3RMSSlcbiAgICAgICAgdW5IaWRlQWxsRWRpdEJUTnMoJ3Byb2plY3QnKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gbmV3TmFtZVN1Ym1pdEJUTihwcm9qZWN0TmFtZUZvcm0sIHByb2plY3RMSSwgaWQpIHtcbiAgICBjb25zdCBuZXdOYW1lU3VibWl0QlROID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5ldy1uYW1lID4gYnV0dG9uLnN1Ym1pdCcpO1xuICAgIG5ld05hbWVTdWJtaXRCVE4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGlmIChjaGVja0lmUHJvamVjdEV4aXN0cyhwcm9qZWN0TmFtZUZvcm0uY2hpbGROb2Rlc1syXS52YWx1ZSkpIHtcbiAgICAgICAgICAgIGFsZXJ0KCdQcm9qZWN0cyBtdXN0IGhhdmUgZGlmZmVyZW50IG5hbWVzJylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKEJvb2xlYW4ocHJvamVjdE5hbWVGb3JtLmNoaWxkTm9kZXNbMl0udmFsdWUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGFsZXJ0KCdQcm9qZWN0cyBtdXN0IGhhdmUgYSBuYW1lJylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcm9qZWN0TmFtZUZvcm0ucmVtb3ZlKCk7XG4gICAgICAgICAgICBwcm9qZWN0TEkuY2hpbGROb2Rlc1swXS5jbGFzc0xpc3QudG9nZ2xlKCdoaWRkZW4nKVxuICAgICAgICAgICAgcHJvamVjdExJLmNoaWxkTm9kZXNbMV0uY2xhc3NMaXN0LnRvZ2dsZSgnaGlkZGVuJylcbiAgICAgICAgICAgIHByb2plY3RMSS5jaGlsZE5vZGVzWzFdLnNldEF0dHJpYnV0ZSgnc3JjJywgJy4vaWNvbnMvdHJpYW5nbGUtZG93bi5wbmcnKTtcbiAgICAgICAgICAgIGluc2VydE5ld1Byb2plY3ROYW1lKHByb2plY3ROYW1lRm9ybSwgcHJvamVjdExJLCBpZCk7XG4gICAgICAgICAgICBjbGVhclRhYigpO1xuICAgICAgICAgICAgb3BlblByb2plY3QocHJvamVjdE5hbWVGb3JtLmNoaWxkTm9kZXNbMl0udmFsdWUsIHByb2plY3RMSSk7XG4gICAgICAgICAgICB1bkhpZGVBbGxFZGl0QlROcygncHJvamVjdCcpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGluc2VydE5ld1Byb2plY3ROYW1lKHByb2plY3ROYW1lRm9ybSwgcHJvamVjdExJLCBpZCkge1xuICAgIGxldCBwcm9qZWN0ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvamVjdHMnKSlcbiAgICBsZXQgcHJvamVjdE5hbWUgPSBwcm9qZWN0TEkuY2hpbGROb2Rlc1swXS5pbm5lckhUTUxcbiAgICBsZXQgbmV3UHJvamVjdE5hbWUgPSBwcm9qZWN0TmFtZUZvcm0uY2hpbGROb2Rlc1syXS52YWx1ZVxuICAgIGNvbnN0IG5ld1Byb2plY3QgPSB7W25ld1Byb2plY3ROYW1lXTogW119XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9qZWN0W2lkXVtwcm9qZWN0TmFtZV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbmV3UHJvamVjdFtuZXdQcm9qZWN0TmFtZV0ucHVzaChwcm9qZWN0W2lkXVtbcHJvamVjdE5hbWVdXVtpXSlcbiAgICB9XG4gICAgcHJvamVjdC5zcGxpY2UoaWQsIDEpO1xuICAgIHByb2plY3Quc3BsaWNlKGlkLCAwLCBuZXdQcm9qZWN0KTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncHJvamVjdHMnLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0KSlcbiAgICBwcm9qZWN0TEkuY2hpbGROb2Rlc1swXS5pbm5lckhUTUwgPSBwcm9qZWN0TmFtZUZvcm0uY2hpbGROb2Rlc1syXS52YWx1ZTtcbn1cblxuZnVuY3Rpb24gdG9nZ2xlSGlkZGVuKHByb2plY3RMSSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvamVjdExJLmNoaWxkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcHJvamVjdExJLmNoaWxkTm9kZXNbaV0uY2xhc3NMaXN0LnRvZ2dsZSgnaGlkZGVuJylcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVByb2plY3RJZCgpIHtcbiAgICBjb25zdCBwcm9qZWN0TElzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnByb2plY3QnKVxuICAgIGlmIChwcm9qZWN0TElzID09PSBmYWxzZSkgcmV0dXJuO1xuICAgIHByb2plY3RMSXMuZm9yRWFjaCgocHJvamVjdCwgdmFsdWUpID0+IHtcbiAgICAgICAgcHJvamVjdC5zZXRBdHRyaWJ1dGUoJ2RhdGEtSWQnLCB2YWx1ZSlcbiAgICB9KVxufSIsImltcG9ydCB7IGNyZWF0ZVRhc2sgfSBmcm9tIFwiLi9Ub0RvXCI7XG5pbXBvcnQgeyBjcmVhdGVBZGRUYXNrRGl2LCBkZWxldGVBZGRUYXNrRGl2IH0gZnJvbSBcIi4vVUlcIjtcbmltcG9ydCB7IGNyZWF0ZUFkZFByb2plY3RMSSwgY3JlYXRlUHJvamVjdCwgZGVsZXRlQWRkUHJvamVjdExJIH0gZnJvbSBcIi4vcHJvamVjdFwiO1xuXG5leHBvcnQgeyBzZXRMb2NhbFN0b3JhZ2VJdGVtc09uUGFnZUxvYWQsIGFkZFRvRG9Ub0luYm94LCBhZGRUb0RvVG9Qcm9qZWN0U3RvcmFnZSwgXG4gICAgYWRkUHJvamVjdFRvU3RvcmFnZSwgY2hlY2tJZlByb2plY3RFeGlzdHMsIGNoZWNrTG9jYWxTdG9yYWdlT25QYWdlTG9hZCwgXG4gICAgbG9hZFRvZG9zLCBsb2FkUHJvamVjdHMsIGNoZWNrSWZUb0RvRXhpc3RzSW5Qcm9qZWN0T3JJbmJveH1cblxuZnVuY3Rpb24gc2V0TG9jYWxTdG9yYWdlSXRlbXNPblBhZ2VMb2FkKCkge1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdoaWdoJywgJ3JlZCcpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdtZWRpdW0nLCAnI2ZiYmYyNCcpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdsb3cnLCAnYmx1ZScpO1xuICAgIGlmIChCb29sZWFuKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdpbmJveCcpKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJpbmJveFwiLCBKU09OLnN0cmluZ2lmeShbXSkpXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwcm9qZWN0cycsIEpTT04uc3RyaW5naWZ5KFtdKSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBhZGRUb0RvVG9JbmJveCh0b2RvKSB7XG4gICAgbGV0IGluYm94ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnaW5ib3gnKSk7XG4gICAgaW5ib3gucHVzaCh0b2RvKVxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiaW5ib3hcIiwgSlNPTi5zdHJpbmdpZnkoaW5ib3gpKVxufVxuXG5mdW5jdGlvbiBhZGRQcm9qZWN0VG9TdG9yYWdlKHByb2plY3ROYW1lKSB7XG4gICAgbGV0IHByb2plY3RzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvamVjdHMnKSk7XG4gICAgcHJvamVjdHMucHVzaCh7W3Byb2plY3ROYW1lXTogW119KVxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwcm9qZWN0cycsIEpTT04uc3RyaW5naWZ5KHByb2plY3RzKSlcbn1cblxuZnVuY3Rpb24gY2hlY2tJZlByb2plY3RFeGlzdHMocHJvamVjdE5hbWUpIHtcbiAgICBsZXQgcHJvamVjdHMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwcm9qZWN0cycpKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb2plY3RzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgaWYgKHByb2plY3RzW2ldLmhhc093blByb3BlcnR5KHByb2plY3ROYW1lKSl7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tJZlRvRG9FeGlzdHNJblByb2plY3RPckluYm94KFRvRG9OYW1lLCBvcmlnaW4pIHtcbiAgICBpZiAob3JpZ2luID09PSAnSW5ib3gnKSB7XG4gICAgICAgIGxldCBpbmJveCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2luYm94JykpO1xuICAgICAgICBpZiAoQm9vbGVhbihpbmJveFswXSkgPT09IGZhbHNlKSByZXR1cm47XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5ib3gubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgaWYgKGluYm94W2ldLnRpdGxlTmFtZSA9PT0gVG9Eb05hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHByb2plY3RzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvamVjdHMnKSk7XG4gICAgICAgIGxldCBwcm9qZWN0SUQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IHByb2plY3RMSXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucHJvamVjdCcpO1xuICAgICAgICBwcm9qZWN0TElzLmZvckVhY2goKHByb2plY3QpID0+IHtcbiAgICAgICAgICAgIGxldCBwcm9qZWN0TmFtZSA9IHByb2plY3QuY2hpbGROb2Rlc1swXS50ZXh0Q29udGVudDtcbiAgICAgICAgICAgIGlmIChwcm9qZWN0TmFtZSA9PT0gb3JpZ2luKSB7XG4gICAgICAgICAgICAgICAgcHJvamVjdElEID0gcHJvamVjdC5kYXRhc2V0LmlkXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoQm9vbGVhbihwcm9qZWN0c1twcm9qZWN0SURdW1tvcmlnaW5dXVswXSkgPT09IGZhbHNlKSByZXR1cm47XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvamVjdHNbcHJvamVjdElEXVtbb3JpZ2luXV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCB0b2RvID0gcHJvamVjdHNbcHJvamVjdElEXVtbb3JpZ2luXV1baV07XG4gICAgICAgICAgICBpZiAodG9kby50aXRsZU5hbWUgPT09IFRvRG9OYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gICAgICAgXG4gICAgfVxuICAgIFxufVxuXG5mdW5jdGlvbiBhZGRUb0RvVG9Qcm9qZWN0U3RvcmFnZSh0b2RvLCBwcm9qZWN0TmFtZSkge1xuICAgIGxldCBwcm9qZWN0cyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Byb2plY3RzJykpO1xuICAgIGNvbnN0IHByb2plY3RzTEkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucHJvamVjdCcpO1xuICAgIHByb2plY3RzTEkuZm9yRWFjaCgocHJvamVjdCwgcHJvamVjdEluZGV4KSA9PiB7XG4gICAgICAgIHByb2plY3QgPSBwcm9qZWN0LmNoaWxkTm9kZXNbMF0udGV4dENvbnRlbnRcbiAgICAgICAgaWYgKHByb2plY3ROYW1lID09PSBwcm9qZWN0KSB7XG4gICAgICAgICAgICBwcm9qZWN0c1twcm9qZWN0SW5kZXhdW1twcm9qZWN0TmFtZV1dLnB1c2godG9kbyk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncHJvamVjdHMnLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0cykpO1xufVxuXG5mdW5jdGlvbiBjaGVja0xvY2FsU3RvcmFnZU9uUGFnZUxvYWQoKSB7XG4gICAgY29uc3QgcHJvamVjdHMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwcm9qZWN0cycpKTtcbiAgICBpZiAoQm9vbGVhbihwcm9qZWN0c1swXSkpIHtcbiAgICAgICAgbG9hZFByb2plY3RzKHByb2plY3RzKVxuICAgIH1cbiAgICBjb25zdCBpbmJveCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2luYm94JykpO1xuICAgIGlmIChCb29sZWFuKGluYm94WzBdKSkge1xuICAgICAgICBsb2FkVG9kb3MoaW5ib3gpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbG9hZFByb2plY3RzKHByb2plY3RzKSB7XG4gICAgZGVsZXRlQWRkUHJvamVjdExJKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9qZWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgcHJvamVjdE5hbWUgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhwcm9qZWN0c1tpXSlbMF07XG4gICAgICAgIGNyZWF0ZVByb2plY3QocHJvamVjdE5hbWUpO1xuICAgIH1cbiAgICBjcmVhdGVBZGRQcm9qZWN0TEkoKTtcbn1cblxuZnVuY3Rpb24gbG9hZFRvZG9zKHN0b3JhZ2UpIHtcbiAgICBkZWxldGVBZGRUYXNrRGl2KCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdG9yYWdlLmxlbmd0aCA7IGkrKykge1xuICAgICAgICBjcmVhdGVUYXNrKHN0b3JhZ2VbaV0udGl0bGVOYW1lLCBzdG9yYWdlW2ldLmR1ZURhdGUsIHN0b3JhZ2VbaV0ucHJpb3JpdHksIHN0b3JhZ2VbaV0ubm90ZSk7XG4gICAgfVxuICAgIGNyZWF0ZUFkZFRhc2tEaXYoKVxufSIsImltcG9ydCB7Q3JlYXRlVG9EbywgdG9nZ2xlQWxsVGFza3NFZGl0QlROcywgY2hlY2tTdWJtaXR0ZWRGb3JtfSBmcm9tIFwiLi9hcHBcIjtcbmltcG9ydCB7Y3JlYXRlQWRkUHJvamVjdExJfSBmcm9tIFwiLi9wcm9qZWN0XCI7XG5pbXBvcnQge2NyZWF0ZVRhc2t9IGZyb20gXCIuL1RvRG9cIjtcbmltcG9ydCB7IGFkZFRvRG9Ub0luYm94LCBhZGRUb0RvVG9Qcm9qZWN0U3RvcmFnZSwgY2hlY2tJZlRvRG9FeGlzdHNJblByb2plY3RPckluYm94IH0gZnJvbSBcIi4vc3RvcmFnZVwiO1xuaW1wb3J0IHsgaW5ib3hUYWIsIHRvZGF5VGFiLCB3ZWVrVGFiLCBtb250aFRhYn0gZnJvbSBcIi4vdGFic1wiO1xuXG5leHBvcnQge2NyZWF0ZUFkZFRhc2tEaXYsIGRlbGV0ZUFkZFRhc2tEaXYsIGNsZWFyVGFiLCBjcmVhdGVMYXlvdXR9XG5cbmNvbnN0IGNvbnRlbnREaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbnRlbnRcIik7XG5cblxuZnVuY3Rpb24gY3JlYXRlTGF5b3V0KCkge1xuICAgIGNyZWF0ZUhlYWRlcigpO1xuICAgIGNyZWF0ZVNpZGViYXIoKTtcbiAgICBjcmVhdGVUb0RvQ29udGFpbmVyKCk7XG4gICAgaW5ib3hUYWIoKTtcbiAgICB0b2RheVRhYigpO1xuICAgIHdlZWtUYWIoKTtcbiAgICBtb250aFRhYigpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVIZWFkZXIoKSB7XG4gICAgY29uc3QgaGVhZGVyRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBoZWFkZXJEaXYuc2V0QXR0cmlidXRlKCdjbGFzcycsICdoZWFkZXInKTtcbiAgICBoZWFkZXJEaXYuaW5uZXJIVE1MID0gYDxpbWcgc3JjPVwiLi9pY29ucy9saXN0LWJveC1vdXRsaW5lLnN2Z1wiIGFsdD1cIkhlYWRlciBpY29uIHRoYXQgcmVzZW1ibGVzIGEgY2hlY2tsaXN0XCIgY2xhc3M9XCJoZWFkZXItaWNvblwiPiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUb0RvIExpc3RgXG4gICAgY29udGVudERpdi5hcHBlbmRDaGlsZChoZWFkZXJEaXYpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVTaWRlYmFyKCkge1xuICAgIGNvbnN0IHNpZGViYXJEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBzaWRlYmFyRGl2LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnc2lkZWJhcicpO1xuICAgIHNpZGViYXJEaXYuaW5uZXJIVE1MID0gYFxuICAgIDxkaXYgY2xhc3M9XCJzaWRlYmFyXCI+XG4gICAgICAgIDx1bCBjbGFzcz1cInRhYnNcIj5cbiAgICAgICAgICAgIDxsaSBjbGFzcz1cInNpZGViYXItdGFiIGluYm94XCI+XG4gICAgICAgICAgICAgICAgPGltZyBzcmM9XCIuL2ljb25zL2luYm94LW91dGxpbmUucG5nXCIgYWx0PVwiSW5ib3ggaWNvblwiIGNsYXNzPVwic2lkZWJhci1pY29uXCI+IFxuICAgICAgICAgICAgICAgIEluYm94XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPGxpIGNsYXNzPVwic2lkZWJhci10YWIgdG9kYXlcIj5cbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIi4vaWNvbnMvY2FsZW5kYXItdG9kYXktb3V0bGluZS5wbmdcIiBhbHQ9XCJBIGNhbGVuZGFyIHdpdGggYSBkYXkgaGlnaGxpZ2h0ZWRcIiBjbGFzcz1cInNpZGViYXItaWNvblwiPlxuICAgICAgICAgICAgICAgIFRvZGF5XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPGxpIGNsYXNzPVwic2lkZWJhci10YWIgd2Vla1wiPlxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiLi9pY29ucy9jYWxlbmRhci13ZWVrLW91dGxpbmUucG5nXCIgYWx0PVwiQSBjYWxlbmRhciB3aXRoIGEgd2VlayBoaWdobGlnaHRlZFwiIGNsYXNzPVwic2lkZWJhci1pY29uXCI+XG4gICAgICAgICAgICAgICAgVGhpcyBXZWVrXG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPGxpIGNsYXNzPVwic2lkZWJhci10YWIgbW9udGhcIj5cbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIi4vaWNvbnMvY2FsZW5kYXItbW9udGgtb3V0bGluZS5wbmdcIiBhbHQ9XCJBIGNhbGVuZGFyIHdpdGggYSB3ZWVrIGhpZ2hsaWdodGVkXCIgY2xhc3M9XCJzaWRlYmFyLWljb25cIj5cbiAgICAgICAgICAgICAgICBUaGlzIE1vbnRoXG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICA8L3VsPlxuICAgICAgICA8dWwgY2xhc3M9XCJwcm9qZWN0c1wiPlxuICAgICAgICAgICAgPHNwYW4+UHJvamVjdHM8L3NwYW4+XG4gICAgICAgIDwvdWw+XG4gICAgPC9kaXY+YFxuICAgIGNvbnRlbnREaXYuYXBwZW5kQ2hpbGQoc2lkZWJhckRpdik7XG4gICAgY3JlYXRlQWRkUHJvamVjdExJKCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRvRG9Db250YWluZXIoKSB7XG4gICAgY29uc3QgY29udGFpbmVyRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29udGFpbmVyRGl2LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAndG9kb3MtY29udGFpbmVyJyk7XG4gICAgY29udGFpbmVyRGl2LmlubmVySFRNTCA9IGBcbiAgICAgICAgPGRpdiBjbGFzcz1cInRpdGxlLW9mLXRhYlwiPkluYm94PC9kaXY+XG4gICAgICAgIDx1bCBjbGFzcz1cInRvZG9zXCI+PC91bD5gXG4gICAgY29udGVudERpdi5hcHBlbmRDaGlsZChjb250YWluZXJEaXYpO1xuICAgIGNyZWF0ZUFkZFRhc2tEaXYoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGFza0Zvcm0oKSB7XG4gICAgY29uc3QgdG9kb3NVTCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b2RvcycpO1xuICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdmb3JtJyk7XG4gICAgZm9ybS5zZXRBdHRyaWJ1dGUoJ2FjdGlvbicsICcgJyk7XG4gICAgZm9ybS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3RvZG8tZm9ybScpO1xuICAgIGZvcm0uaW5uZXJIVE1MID0gYFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRpdGxlXCI+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cInRpdGxlXCI+VGl0bGU6PC9sYWJlbD5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwidGl0bGVcIiBpZD1cInRpdGxlXCIgYXV0b2ZvY3VzIGF1dG9jb21wbGV0ZT1cIm9mZlwiIG1heGxlbmd0aD1cIjUwXCIgcGxhY2Vob2xkZXI9XCJUYWtlIHRoZSB0cmFzaCBvdXRcIiBtaW49XCIxXCIgcmVxdWlyZWQ+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImR1ZS1kYXRlXCI+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImR1ZS1kYXRlXCI+RHVlIERhdGU8L2xhYmVsPlxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiZGF0ZVwiIG5hbWU9XCJkdWUtZGF0ZVwiIGlkPVwiZHVlLWRhdGVcIiByZXF1aXJlZD5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJpb3JpdHlcIj5cbiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwicHJpb3JpdHlcIj5Qcmlvcml0eTwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPHNlbGVjdCBuYW1lPVwicHJpb3JpdHlcIiBpZD1cInByaW9yaXR5XCIgcmVxdWlyZWQ+XG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJsb3dcIj5Mb3c8L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIm1lZGl1bVwiPk1lZGl1bTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiaGlnaFwiPkhpZ2g8L29wdGlvbj5cbiAgICAgICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibm90ZVwiPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJub3RlXCI+Tm90ZTogKE9wdGlvbmFsKTwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPHRleHRhcmVhIG5hbWU9XCJub3RlXCIgaWQ9XCJub3RlXCIgY29scz1cIjkwXCIgcm93cz1cIjZcIiBtYXhsZW5ndGg9XCI1MDBcIiBwbGFjZWhvbGRlcj1cIlNvbWV0aGluZyBleHRyYSBhYm91dCB0YWtpbmcgdGhlIHRyYXNoIG91dFwiPjwvdGV4dGFyZWE+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJidXR0b25zXCI+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJzdWJtaXRcIj5TdWJtaXQ8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImNhbmNlbFwiPkNhbmNlbDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+YDtcbiAgICB0b2Rvc1VMLmFwcGVuZENoaWxkKGZvcm0pO1xuICAgIGNhbmNlbEZvcm1CVE4oZm9ybSk7XG4gICAgc3VibWl0Rm9ybUJUTihmb3JtKTtcbn1cblxuZnVuY3Rpb24gY2FuY2VsRm9ybUJUTihmb3JtKSB7XG4gICAgY29uc3QgY2FuY2VsQlROID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJ1dHRvbnMgPiAuY2FuY2VsJyk7XG4gICAgY2FuY2VsQlROLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBmb3JtLnJlbW92ZSgpO1xuICAgICAgICBjcmVhdGVBZGRUYXNrRGl2KCk7XG4gICAgICAgIHRvZ2dsZUFsbFRhc2tzRWRpdEJUTnMoKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gc3VibWl0Rm9ybUJUTihmb3JtKSB7XG4gICAgY29uc3Qgc3VibWl0QlROID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJ1dHRvbnMgPiAuc3VibWl0Jyk7XG4gICAgc3VibWl0QlROLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBzdWJtaXR0ZWRGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRvZG8tZm9ybSA+IGRpdicpO1xuICAgICAgICBpZiAoIShjaGVja1N1Ym1pdHRlZEZvcm0oc3VibWl0dGVkRm9ybSkpKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHRhYiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50aXRsZS1vZi10YWInKS50ZXh0Q29udGVudDtcbiAgICAgICAgY29uc3QgVG9EbyA9IENyZWF0ZVRvRG8oc3VibWl0dGVkRm9ybSk7XG4gICAgICAgIGlmIChjaGVja0lmVG9Eb0V4aXN0c0luUHJvamVjdE9ySW5ib3goVG9Eby50aXRsZU5hbWUsIHRhYikpIHtcbiAgICAgICAgICAgIGFsZXJ0KCdUb0RvcyBtdXN0IGhhdmUgZGlmZmVyZW50IG5hbWVzJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhYiA9PT0gJ0luYm94Jykge1xuICAgICAgICAgICAgYWRkVG9Eb1RvSW5ib3goVG9Ebyk7XG4gICAgICAgIH0gZWxzZSB7IFxuICAgICAgICAgICAgYWRkVG9Eb1RvUHJvamVjdFN0b3JhZ2UoVG9EbywgdGFiKTtcbiAgICAgICAgfVxuICAgICAgICBjcmVhdGVUYXNrKFRvRG8udGl0bGVOYW1lLCBUb0RvLmR1ZURhdGUsIFRvRG8ucHJpb3JpdHksIFRvRG8ubm90ZSk7XG4gICAgICAgIGZvcm0ucmVtb3ZlKCk7XG4gICAgICAgIGNyZWF0ZUFkZFRhc2tEaXYoKTtcbiAgICAgICAgdG9nZ2xlQWxsVGFza3NFZGl0QlROcygpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVBZGRUYXNrRGl2KCkge1xuICAgIGNvbnN0IHRvZG9zVUwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudG9kb3MnKTtcbiAgICBjb25zdCBhZGRUYXNrTEkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICAgIGFkZFRhc2tMSS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2FkZC10YXNrJyk7XG4gICAgYWRkVGFza0xJLmlubmVySFRNTCA9IGA8aW1nIHNyYz1cIi4vaWNvbnMvcGx1cy5zdmdcIiBhbHQ9XCJQbHVzIGljb25cIiBjbGFzcz1cInBsdXMtaWNvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+QWRkIHRhc2s8L3NwYW4+YFxuICAgIGFkZFRhc2tMSS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdG9nZ2xlQWxsVGFza3NFZGl0QlROcygnaGlkZScpXG4gICAgICAgIGNyZWF0ZVRhc2tGb3JtKCk7XG4gICAgICAgIGRlbGV0ZUFkZFRhc2tEaXYoKTtcbiAgICB9KTtcbiAgICB0b2Rvc1VMLmFwcGVuZENoaWxkKGFkZFRhc2tMSSk7XG59XG5cbmZ1bmN0aW9uIGRlbGV0ZUFkZFRhc2tEaXYoKSB7XG4gICAgY29uc3QgYWRkVGFza0xJID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbGkuYWRkLXRhc2snKTtcbiAgICBpZiAoIShhZGRUYXNrTEkpKXtcbiAgICAgICAgY3JlYXRlQWRkVGFza0RpdigpO1xuICAgICAgICBkZWxldGVBZGRUYXNrRGl2KCk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYWRkVGFza0xJLnJlbW92ZSgpXG59XG5cbmZ1bmN0aW9uIGNsZWFyVGFiKCkge1xuICAgIGNvbnN0IHRhc2tzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRhc2snKTtcbiAgICB0YXNrcy5mb3JFYWNoKCh0YXNrKSA9PiB7XG4gICAgICAgIHRhc2sucmVtb3ZlKClcbiAgICB9KTtcbiAgICBjb25zdCB0b2RvRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b2RvLWZvcm0nKTtcbiAgICBpZiAodG9kb0Zvcm0pXG4gICAgICAgIHRvZG9Gb3JtLnJlbW92ZSgpXG59IiwiaW1wb3J0IHsgZGVsZXRlQWRkVGFza0RpdiwgY3JlYXRlQWRkVGFza0RpdiB9IGZyb20gXCIuL1VJXCI7XG5pbXBvcnQgeyBDcmVhdGVUb0RvLCB1cGRhdGVJRCwgaGlkZUFsbE90aGVyRWRpdEJUTnMsIHVuSGlkZUFsbEVkaXRCVE5zLCBjaGVja1N1Ym1pdHRlZEZvcm0gfSBmcm9tIFwiLi9hcHBcIjtcblxuZXhwb3J0IHtjcmVhdGVUYXNrfVxuXG5mdW5jdGlvbiBjcmVhdGVUYXNrKHRpdGxlLCBkdWVEYXRlLCBwcmlvcml0eSwgbm90ZSwgb3JpZ2luID0gJycpIHtcbiAgICBjb25zdCB0b2Rvc1VMID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRvZG9zJyk7XG4gICAgY29uc3QgdGFzayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgdGFzay5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3Rhc2snKTtcbiAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZm9ybScpO1xuICAgIGZvcm0uc2V0QXR0cmlidXRlKCdjbGFzcycsICdjaGVjaycpO1xuICAgIGZvcm0uaW5uZXJIVE1MID0gYDxsYWJlbCBmb3I9XCJtYXJrLXRhc2tcIj48L2xhYmVsPmBcbiAgICBjb25zdCBjaGVja01hcmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgIGNoZWNrTWFyay5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAncmFkaW8nKTtcbiAgICBjaGVja01hcmsuc2V0QXR0cmlidXRlKCduYW1lJywgJ21hcmstdGFzaycpO1xuICAgIGNoZWNrTWFyay5zZXRBdHRyaWJ1dGUoJ2lkJywgJ21hcmstdGFzaycpO1xuICAgIGNoZWNrTWFyay5zdHlsZVsnYm9yZGVyLWNvbG9yJ10gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShwcmlvcml0eSk7XG4gICAgZm9ybS5hcHBlbmQoY2hlY2tNYXJrKTtcbiAgICBjb25zdCB0YXNrVGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgdGFza1RpdGxlLmlubmVySFRNTCA9IHRpdGxlO1xuICAgIGNvbnN0IG9yaWdpblNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgb3JpZ2luU3Bhbi5pbm5lckhUTUwgPSBvcmlnaW47XG4gICAgb3JpZ2luU3Bhbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ29yaWdpbicpO1xuICAgIGZvcm0uYXBwZW5kQ2hpbGQodGFza1RpdGxlKTtcbiAgICBmb3JtLmFwcGVuZENoaWxkKG9yaWdpblNwYW4pO1xuICAgIHRhc2suYXBwZW5kQ2hpbGQoZm9ybSk7XG4gICAgY29uc3Qgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICBjb25zdCBkYXRlU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICBkYXRlU3Bhbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2RhdGUnKTtcbiAgICBkYXRlU3Bhbi5pbm5lckhUTUwgPSBkdWVEYXRlO1xuICAgIGNvbnN0IHRhc2tEcm9wRG93bkljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICB0YXNrRHJvcERvd25JY29uLnNldEF0dHJpYnV0ZSgnc3JjJywgJy4vaWNvbnMvdHJpYW5nbGUtZG93bi5wbmcnKTtcbiAgICB0YXNrRHJvcERvd25JY29uLnNldEF0dHJpYnV0ZSgnYWx0JywgJ0Ryb3AgZG93biBpY29uJyk7XG4gICAgdGFza0Ryb3BEb3duSWNvbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2RldGFpbHMnKTtcbiAgICBzcGFuLmFwcGVuZENoaWxkKGRhdGVTcGFuKTtcbiAgICBzcGFuLmFwcGVuZENoaWxkKHRhc2tEcm9wRG93bkljb24pO1xuICAgIHRhc2suYXBwZW5kQ2hpbGQoc3Bhbik7XG4gICAgdG9kb3NVTC5hcHBlbmRDaGlsZCh0YXNrKTtcbiAgICBsZXQgaWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGFzaycpLmxlbmd0aCAtIDE7XG4gICAgdGFzay5zZXRBdHRyaWJ1dGUoJ2RhdGEtSWQnLCBpZCk7XG4gICAgbGV0IHRhc2tMSSA9IHJldHVyblByb3BlclRhc2tMSShpZCk7XG4gICAgY2hlY2tNYXJrLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRhc2tMSS5yZW1vdmUoKTtcbiAgICAgICAgICAgIGRlbGV0ZVRvRG8odGFza0xJLmRhdGFzZXQuaWQpXG4gICAgICAgIH0sICcxMDAwJylcbiAgICAgICAgdXBkYXRlSUQodGFza0xJLCAndGFzaycpO1xuICAgIH0pO1xuICAgIGNyZWF0ZVRvRG9EZXRhaWxzKHByaW9yaXR5LCBub3RlLCBpZCwgdGFza0Ryb3BEb3duSWNvbik7XG59XG5cbmZ1bmN0aW9uIHZpZXdUb0RvRGV0YWlscyh0YXNrRHJvcERvd25JY29uLCB0YXNrTEkpIHtcbiAgICB0YXNrRHJvcERvd25JY29uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICB0YXNrRHJvcERvd25JY29uLnNldEF0dHJpYnV0ZSgnc3JjJywgJy4vaWNvbnMvdHJpYW5nbGUucG5nJyk7XG4gICAgICAgIGlmICh0YXNrTEkuY2hpbGROb2Rlc1syXSkge1xuICAgICAgICAgICAgdGFza0xJLmNoaWxkTm9kZXNbMl0uY2xhc3NMaXN0LnRvZ2dsZSgnaGlkZGVuJyk7XG4gICAgICAgICAgICBpZiAoJ2hpZGRlbicgPT09IHRhc2tMSS5jaGlsZE5vZGVzWzJdLmNsYXNzTGlzdFsxXSkge1xuICAgICAgICAgICAgICAgIHRhc2tEcm9wRG93bkljb24uc2V0QXR0cmlidXRlKCdzcmMnLCAnLi9pY29ucy90cmlhbmdsZS1kb3duLnBuZycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IFxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUb0RvRGV0YWlscyhwcmlvcml0eSwgbm90ZSwgaWQsIHRhc2tEcm9wRG93bkljb24pIHtcbiAgICBsZXQgdGFza0xJID0gcmV0dXJuUHJvcGVyVGFza0xJKGlkKVxuICAgIGNvbnN0IGRldGFpbHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkZXRhaWxzLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAndmlldycpO1xuICAgIGRldGFpbHMuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgZGV0YWlscy5pbm5lckhUTUwgPSBgPHRleHRhcmVhIGNsYXNzPVwibm90ZS1zcGFuXCIgcm93cz1cIjZcIiByZWFkb25seT48L3RleHRhcmVhPmBcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaXYuc2V0QXR0cmlidXRlKCdjbGFzcycsICdwcmlvcml0eS1lZGl0LWNvbnRhaW5lcicpO1xuICAgIGRpdi5pbm5lckhUTUwgPSBgPHNwYW4+PC9zcGFuPmBcbiAgICBjb25zdCBlZGl0VG9Eb0JUTiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgIGVkaXRUb0RvQlROLmlubmVySFRNTCA9ICdFZGl0JztcbiAgICBlZGl0VG9Eb0JUTi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2VkaXQnKTtcbiAgICBjb25zdCBkZWxldGVUb0RvQlROID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgZGVsZXRlVG9Eb0JUTi5pbm5lckhUTUwgPSAnRGVsZXRlJztcbiAgICBkZWxldGVUb0RvQlROLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnZGVsZXRlJyk7XG4gICAgZGl2LmFwcGVuZENoaWxkKGVkaXRUb0RvQlROKTtcbiAgICBkaXYuYXBwZW5kQ2hpbGQoZGVsZXRlVG9Eb0JUTik7XG4gICAgZGV0YWlscy5hcHBlbmRDaGlsZChkaXYpXG4gICAgdGFza0xJLmFwcGVuZENoaWxkKGRldGFpbHMpO1xuICAgIGNvbnN0IG5vdGVUZXh0ID0gdGFza0xJLmNoaWxkTm9kZXNbMl0uY2hpbGROb2Rlc1swXTtcbiAgICBub3RlVGV4dC5pbm5lckhUTUwgPSBgTm90ZTogJHtub3RlfWA7XG4gICAgY29uc3QgcHJpb3JpdHlTcGFuID0gdGFza0xJLmNoaWxkTm9kZXNbMl0uY2hpbGROb2Rlc1sxXS5jaGlsZE5vZGVzWzBdO1xuICAgIHByaW9yaXR5U3Bhbi5pbm5lckhUTUwgPSBgUHJpb3JpdHk6ICR7cHJpb3JpdHl9YDtcbiAgICB2aWV3VG9Eb0RldGFpbHModGFza0Ryb3BEb3duSWNvbiwgdGFza0xJKTtcbiAgICBlZGl0VG9Eb0JUTi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdGFza0xJLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgICAgICBkZWxldGVBZGRUYXNrRGl2KCk7XG4gICAgICAgIGhpZGVBbGxPdGhlckVkaXRCVE5zKGVkaXRUb0RvQlROLCAndGFzaycpO1xuICAgICAgICBlZGl0VG9Eb3NJbmZvKHRhc2tMSSk7XG4gICAgfSk7XG4gICAgZGVsZXRlVG9Eb0JUTi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdGFza0xJLnJlbW92ZSgpO1xuICAgICAgICBkZWxldGVUb0RvKHRhc2tMSS5kYXRhc2V0LmlkKVxuICAgICAgICB1cGRhdGVJRCh0YXNrTEksICd0YXNrJylcbiAgICB9KTtcbiAgICBcbn1cblxuZnVuY3Rpb24gZWRpdFRvRG9zSW5mbyh0YXNrTEkpIHtcbiAgICBjb25zdCB0b2Rvc1VMID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRvZG9zJyk7XG4gICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcbiAgICBmb3JtLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAndG9kby1mb3JtJylcbiAgICBmb3JtLmlubmVySFRNTCA9IGBcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0aXRsZVwiPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJ0aXRsZVwiPlRpdGxlOjwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInRpdGxlXCIgaWQ9XCJ0aXRsZVwiIGF1dG9mb2N1cyBhdXRvY29tcGxldGU9XCJvZmZcIiBtYXhsZW5ndGg9XCI1MFwiIHBsYWNlaG9sZGVyPVwiVGFrZSB0aGUgdHJhc2ggb3V0XCI+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImR1ZS1kYXRlXCI+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cImR1ZS1kYXRlXCI+RHVlIERhdGU8L2xhYmVsPlxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiZGF0ZVwiIG5hbWU9XCJkdWUtZGF0ZVwiIGlkPVwiZHVlLWRhdGVcIj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJpb3JpdHlcIj5cbiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwicHJpb3JpdHlcIj5Qcmlvcml0eTwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPHNlbGVjdCBuYW1lPVwicHJpb3JpdHlcIiBpZD1cInByaW9yaXR5XCI+XG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJsb3dcIj5Mb3c8L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIm1lZGl1bVwiPk1lZGl1bTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiaGlnaFwiPkhpZ2g8L29wdGlvbj5cbiAgICAgICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibm90ZVwiPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJub3RlXCI+Tm90ZTogKE9wdGlvbmFsKTwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPHRleHRhcmVhIG5hbWU9XCJub3RlXCIgaWQ9XCJub3RlXCIgY29scz1cIjkwXCIgcm93cz1cIjZcIiBtYXhsZW5ndGg9XCI1MDBcIiBwbGFjZWhvbGRlcj1cIlNvbWV0aGluZyBleHRyYSBhYm91dCB0YWtpbmcgdGhlIHRyYXNoIG91dFwiPjwvdGV4dGFyZWE+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJidXR0b25zIGVkaXQtdG9kb1wiPlxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwic3VibWl0XCI+U2F2ZTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiY2FuY2VsXCI+Q2FuY2VsPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5gO1xuICAgIHRvZG9zVUwuaW5zZXJ0QmVmb3JlKGZvcm0sIHRhc2tMSSk7XG5cbiAgICAvKiBDb3VsZG4ndCBib3RoZXIgcHV0dGluZyB0aGUgcmVzdCBvZiB0aGUgY29kZSBiZWxvdyBpbnRvIHNlcGFyYXRlIGZ1bmN0aW9ucyBcbiAgICAgICAgbGlrZSBJIGRpZCBpbiBwcm9qZWN0LmpzIHNvIGl0cyBhbGwgaGVyZVxuICAgICAgICBUTDtDQlIgKFRvbyBsb25nLCBjYW50IGJvdGhlciByZWFkaW5nKVxuICAgICAgICBXb3JrcyB0aGUgc2FtZSBhcyBuZXdOYW1lQ2FuY2VsQlROIGFuZCBuZXdOYW1lU3VibWl0QlROIGluIHByb2plY3QuanNcbiAgICAgICAgZXhjZXB0IGZvciBUb0Rvcy5cblxuICAgICAgICA+IFNhdmUgYnV0dG9uIGNsaWNrZWQgXG4gICAgICAgID4gY2hlY2sgd2hlcmUgdGhlIGVkaXRpbmcgaGFwcGVuZWQgKGluYm94IG9yIGEgcHJvamVjdCkgXG4gICAgICAgID4gcmVwbGFjZSBvbGQgVG9EbyBpbiBsb2NhbCBzdG9yYWdlIHdpdGggZWRpdGVkIFRvRG8gXG4gICAgICAgID4gcmVtb3ZlIGFuZCBhZGQvYWRqdXN0IG5lY2Vzc2FyeSBET00gZWxlbWVudHNcblxuICAgICAgICBUaGUgY2FuY2VsIGJ1dHRvbiBqdXN0IGRvZXMgdGhhdCBsYXN0IGxpbmVcbiAgICAqL1xuICAgIGNvbnN0IHRvZG9TYXZlQlROID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmVkaXQtdG9kbyA+IC5zdWJtaXQnKTtcbiAgICB0b2RvU2F2ZUJUTi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgY29uc3Qgc3VibWl0dGVkRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50b2RvLWZvcm0gPiBkaXYnKTtcbiAgICAgICAgaWYgKCEoY2hlY2tTdWJtaXR0ZWRGb3JtKHN1Ym1pdHRlZEZvcm0pKSkgcmV0dXJuO1xuICAgICAgICBjb25zdCB0YWIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGl0bGUtb2YtdGFiJykudGV4dENvbnRlbnQ7XG4gICAgICAgIGNvbnN0IFRvRG8gPSBDcmVhdGVUb0RvKHN1Ym1pdHRlZEZvcm0pO1xuICAgICAgICBsZXQgdGFza0luZGV4ID0gdGFza0xJLmRhdGFzZXQuaWRcbiAgICAgICAgaWYgKHRhYiA9PT0gJ0luYm94Jykge1xuICAgICAgICAgICAgY29uc3QgaW5ib3ggPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdpbmJveCcpKVxuICAgICAgICAgICAgaW5ib3guc3BsaWNlKHRhc2tJbmRleCwgMSwgVG9Ebyk7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnaW5ib3gnLCBKU09OLnN0cmluZ2lmeShpbmJveCkpXG4gICAgICAgIH0gZWxzZSB7IFxuICAgICAgICAgICAgbGV0IHByb2plY3RzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvamVjdHMnKSk7XG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0c0xJID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnByb2plY3QnKTtcbiAgICAgICAgICAgIHByb2plY3RzTEkuZm9yRWFjaCgocHJvamVjdCwgcHJvamVjdEluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgcHJvamVjdCA9IHByb2plY3QuY2hpbGROb2Rlc1swXS50ZXh0Q29udGVudFxuICAgICAgICAgICAgICAgIGlmICh0YWIgPT09IHByb2plY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdHNbcHJvamVjdEluZGV4XVtbdGFiXV0uc3BsaWNlKHRhc2tJbmRleCwgMSwgVG9Ebyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncHJvamVjdHMnLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0cykpO1xuICAgICAgICB9XG4gICAgICAgIC8qIExpbmUgMTQ5IG1ha2VzIHRoZSB0b2RvIHZpZXdhYmxlIHdoaWxlIHRoZSB0d28gbGluZXMgYWZ0ZXIgXG4gICAgICAgICAgICBqdXN0IGNoYW5nZSB0aGUgdG9kbydzIHRpdGxlIGFuZCBjaGVjayBtYXJrIGJvcmRlciBjb2xvclxuICAgICAgICAqL1xuICAgICAgICB0YXNrTEkuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICAgIHRhc2tMSS5jaGlsZE5vZGVzWzBdLmNoaWxkTm9kZXNbM10udGV4dENvbnRlbnQgPSBUb0RvLnRpdGxlTmFtZTtcbiAgICAgICAgdGFza0xJLmNoaWxkTm9kZXNbMF0uY2hpbGROb2Rlc1syXS5zdHlsZVsnYm9yZGVyLWNvbG9yJ10gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShUb0RvLnByaW9yaXR5KTtcbiAgICAgICAgY29uc3QgdmlldyA9IHRhc2tMSS5jaGlsZE5vZGVzWzJdO1xuICAgICAgICBjb25zdCBkZXRhaWxzID0gdGFza0xJLmNoaWxkTm9kZXNbMV0uY2hpbGROb2Rlc1sxXTtcbiAgICAgICAgdmlldy5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcbiAgICAgICAgZGV0YWlscy5zZXRBdHRyaWJ1dGUoJ3NyYycsICcuL2ljb25zL3RyaWFuZ2xlLWRvd24ucG5nJyk7XG4gICAgICAgIGZvcm0ucmVtb3ZlKCk7XG4gICAgICAgIGNyZWF0ZUFkZFRhc2tEaXYoKTtcbiAgICAgICAgdW5IaWRlQWxsRWRpdEJUTnMoJ3Rhc2snKTtcbiAgICB9KTtcbiAgICBjb25zdCB0b2RvQ2FuY2VsQlROID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmVkaXQtdG9kbyA+IC5jYW5jZWwnKTtcbiAgICB0b2RvQ2FuY2VsQlROLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICB0YXNrTEkuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XG4gICAgICAgIGNvbnN0IHZpZXcgPSB0YXNrTEkuY2hpbGROb2Rlc1syXTtcbiAgICAgICAgY29uc3QgZGV0YWlscyA9IHRhc2tMSS5jaGlsZE5vZGVzWzFdLmNoaWxkTm9kZXNbMV07XG4gICAgICAgIHZpZXcuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XG4gICAgICAgIGRldGFpbHMuc2V0QXR0cmlidXRlKCdzcmMnLCAnLi9pY29ucy90cmlhbmdsZS1kb3duLnBuZycpO1xuICAgICAgICBmb3JtLnJlbW92ZSgpO1xuICAgICAgICBjcmVhdGVBZGRUYXNrRGl2KCk7XG4gICAgICAgIHVuSGlkZUFsbEVkaXRCVE5zKCd0YXNrJyk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGRlbGV0ZVRvRG8oaWQpIHtcbiAgICBjb25zdCB0YWIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGl0bGUtb2YtdGFiJykudGV4dENvbnRlbnQ7XG4gICAgaWYgKHRhYiA9PT0gJ0luYm94Jykge1xuICAgICAgICBjb25zdCBpbmJveCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2luYm94JykpXG4gICAgICAgIGluYm94LnNwbGljZShpZCwgMSk7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdpbmJveCcsIEpTT04uc3RyaW5naWZ5KGluYm94KSlcbiAgICB9IGVsc2UgeyBcbiAgICAgICAgbGV0IHByb2plY3RzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvamVjdHMnKSk7XG4gICAgICAgIGNvbnN0IHByb2plY3RzTEkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucHJvamVjdCcpO1xuICAgICAgICBwcm9qZWN0c0xJLmZvckVhY2goKHByb2plY3QsIHByb2plY3RJbmRleCkgPT4ge1xuICAgICAgICAgICAgcHJvamVjdCA9IHByb2plY3QuY2hpbGROb2Rlc1swXS50ZXh0Q29udGVudFxuICAgICAgICAgICAgaWYgKHRhYiA9PT0gcHJvamVjdCkge1xuICAgICAgICAgICAgICAgIHByb2plY3RzW3Byb2plY3RJbmRleF1bW3RhYl1dLnNwbGljZShpZCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncHJvamVjdHMnLCBKU09OLnN0cmluZ2lmeShwcm9qZWN0cykpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcmV0dXJuUHJvcGVyVGFza0xJKGlkKSB7XG4gICAgbGV0IHRhc2tMSSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50YXNrJyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YXNrTEkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKE51bWJlcih0YXNrTElbaV0uZGF0YXNldC5pZCkgPT09IGlkKXtcbiAgICAgICAgICAgIHJldHVybiB0YXNrTElbaV07XG4gICAgICAgIH1cbiAgICB9XG59IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgc2V0TG9jYWxTdG9yYWdlSXRlbXNPblBhZ2VMb2FkLCBjaGVja0xvY2FsU3RvcmFnZU9uUGFnZUxvYWQgfSBmcm9tICcuL21vZHVsZXMvc3RvcmFnZSc7XG5pbXBvcnQgeyBjcmVhdGVMYXlvdXQgfSBmcm9tICcuL21vZHVsZXMvVUknO1xuaW1wb3J0ICcuL3N0eWxlLmNzcydcblxuY3JlYXRlTGF5b3V0KCk7XG5zZXRMb2NhbFN0b3JhZ2VJdGVtc09uUGFnZUxvYWQoKTtcbmNoZWNrTG9jYWxTdG9yYWdlT25QYWdlTG9hZCgpO1xuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJuYyIsIl90eXBlb2YiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicmVxdWlyZWRBcmdzIiwicmVxdWlyZWQiLCJhcmdzIiwiVHlwZUVycm9yIiwidG9EYXRlIiwiYXJndW1lbnQiLCJhcmd1bWVudHMiLCJhcmdTdHIiLCJEYXRlIiwiZ2V0VGltZSIsImNvbnNvbGUiLCJ3YXJuIiwic3RhY2siLCJOYU4iLCJ0b0ludGVnZXIiLCJkaXJ0eU51bWJlciIsIm51bWJlciIsIk51bWJlciIsImlzTmFOIiwiTWF0aCIsImNlaWwiLCJmbG9vciIsInN0YXJ0T2ZVVENJU09XZWVrIiwiZGlydHlEYXRlIiwiZGF0ZSIsImRheSIsImdldFVUQ0RheSIsImRpZmYiLCJzZXRVVENEYXRlIiwiZ2V0VVRDRGF0ZSIsInNldFVUQ0hvdXJzIiwiZ2V0VVRDSVNPV2Vla1llYXIiLCJ5ZWFyIiwiZ2V0VVRDRnVsbFllYXIiLCJmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyIiwic2V0VVRDRnVsbFllYXIiLCJzdGFydE9mTmV4dFllYXIiLCJmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyIiwic3RhcnRPZlRoaXNZZWFyIiwiZGVmYXVsdE9wdGlvbnMiLCJnZXREZWZhdWx0T3B0aW9ucyIsInN0YXJ0T2ZVVENXZWVrIiwiX3JlZiIsIl9yZWYyIiwiX3JlZjMiLCJfb3B0aW9ucyR3ZWVrU3RhcnRzT24iLCJfb3B0aW9ucyRsb2NhbGUiLCJfb3B0aW9ucyRsb2NhbGUkb3B0aW8iLCJfZGVmYXVsdE9wdGlvbnMkbG9jYWwiLCJfZGVmYXVsdE9wdGlvbnMkbG9jYWwyIiwid2Vla1N0YXJ0c09uIiwibG9jYWxlIiwiUmFuZ2VFcnJvciIsImdldFVUQ1dlZWtZZWFyIiwiX29wdGlvbnMkZmlyc3RXZWVrQ29uIiwiZmlyc3RXZWVrQ29udGFpbnNEYXRlIiwiZmlyc3RXZWVrT2ZOZXh0WWVhciIsImZpcnN0V2Vla09mVGhpc1llYXIiLCJhZGRMZWFkaW5nWmVyb3MiLCJ0YXJnZXRMZW5ndGgiLCJzaWduIiwib3V0cHV0IiwiYWJzIiwidG9rZW4iLCJzaWduZWRZZWFyIiwibW9udGgiLCJnZXRVVENNb250aCIsIlN0cmluZyIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJudW1iZXJPZkRpZ2l0cyIsIm1pbGxpc2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsInBvdyIsIkciLCJsb2NhbGl6ZSIsImVyYSIsIndpZHRoIiwieSIsIm9yZGluYWxOdW1iZXIiLCJ1bml0IiwibGlnaHRGb3JtYXR0ZXJzIiwiWSIsInNpZ25lZFdlZWtZZWFyIiwid2Vla1llYXIiLCJSIiwidSIsIlEiLCJxdWFydGVyIiwiY29udGV4dCIsInEiLCJNIiwiTCIsInciLCJ3ZWVrIiwiZmlyc3RXZWVrIiwic3RhcnRPZlVUQ1dlZWtZZWFyIiwicm91bmQiLCJnZXRVVENXZWVrIiwiSSIsImlzb1dlZWsiLCJmb3VydGhPZkphbnVhcnkiLCJzdGFydE9mVVRDSVNPV2Vla1llYXIiLCJnZXRVVENJU09XZWVrIiwiRCIsImRheU9mWWVhciIsInRpbWVzdGFtcCIsInNldFVUQ01vbnRoIiwiZGlmZmVyZW5jZSIsImdldFVUQ0RheU9mWWVhciIsIkUiLCJkYXlPZldlZWsiLCJsb2NhbERheU9mV2VlayIsImMiLCJpc29EYXlPZldlZWsiLCJkYXlQZXJpb2RFbnVtVmFsdWUiLCJkYXlQZXJpb2QiLCJ0b0xvd2VyQ2FzZSIsImIiLCJob3VycyIsIkIiLCJoIiwiSCIsIksiLCJtIiwicyIsIlMiLCJYIiwiX2xvY2FsaXplIiwidGltZXpvbmVPZmZzZXQiLCJfb3JpZ2luYWxEYXRlIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXMiLCJmb3JtYXRUaW1lem9uZSIsIngiLCJPIiwiZm9ybWF0VGltZXpvbmVTaG9ydCIsInoiLCJ0Iiwib3JpZ2luYWxEYXRlIiwiVCIsIm9mZnNldCIsImRpcnR5RGVsaW1pdGVyIiwiYWJzT2Zmc2V0IiwibWludXRlcyIsImRlbGltaXRlciIsImRhdGVMb25nRm9ybWF0dGVyIiwicGF0dGVybiIsImZvcm1hdExvbmciLCJ0aW1lTG9uZ0Zvcm1hdHRlciIsInRpbWUiLCJwIiwiUCIsImRhdGVUaW1lRm9ybWF0IiwibWF0Y2hSZXN1bHQiLCJtYXRjaCIsImRhdGVQYXR0ZXJuIiwidGltZVBhdHRlcm4iLCJkYXRlVGltZSIsInJlcGxhY2UiLCJwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMiLCJwcm90ZWN0ZWRXZWVrWWVhclRva2VucyIsInRocm93UHJvdGVjdGVkRXJyb3IiLCJmb3JtYXQiLCJpbnB1dCIsImZvcm1hdERpc3RhbmNlTG9jYWxlIiwibGVzc1RoYW5YU2Vjb25kcyIsIm9uZSIsIm90aGVyIiwieFNlY29uZHMiLCJoYWxmQU1pbnV0ZSIsImxlc3NUaGFuWE1pbnV0ZXMiLCJ4TWludXRlcyIsImFib3V0WEhvdXJzIiwieEhvdXJzIiwieERheXMiLCJhYm91dFhXZWVrcyIsInhXZWVrcyIsImFib3V0WE1vbnRocyIsInhNb250aHMiLCJhYm91dFhZZWFycyIsInhZZWFycyIsIm92ZXJYWWVhcnMiLCJhbG1vc3RYWWVhcnMiLCJidWlsZEZvcm1hdExvbmdGbiIsImRlZmF1bHRXaWR0aCIsImZvcm1hdHMiLCJmdWxsIiwibG9uZyIsIm1lZGl1bSIsInNob3J0IiwiZm9ybWF0UmVsYXRpdmVMb2NhbGUiLCJsYXN0V2VlayIsInllc3RlcmRheSIsInRvZGF5IiwidG9tb3Jyb3ciLCJuZXh0V2VlayIsImJ1aWxkTG9jYWxpemVGbiIsImRpcnR5SW5kZXgiLCJ2YWx1ZXNBcnJheSIsImZvcm1hdHRpbmdWYWx1ZXMiLCJkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIiwiX2RlZmF1bHRXaWR0aCIsIl93aWR0aCIsInZhbHVlcyIsImFyZ3VtZW50Q2FsbGJhY2siLCJfb3B0aW9ucyIsInJlbTEwMCIsIm5hcnJvdyIsImFiYnJldmlhdGVkIiwid2lkZSIsImFtIiwicG0iLCJtaWRuaWdodCIsIm5vb24iLCJtb3JuaW5nIiwiYWZ0ZXJub29uIiwiZXZlbmluZyIsIm5pZ2h0IiwiYnVpbGRNYXRjaEZuIiwic3RyaW5nIiwibWF0Y2hQYXR0ZXJuIiwibWF0Y2hQYXR0ZXJucyIsImRlZmF1bHRNYXRjaFdpZHRoIiwidmFsdWUiLCJtYXRjaGVkU3RyaW5nIiwicGFyc2VQYXR0ZXJucyIsImRlZmF1bHRQYXJzZVdpZHRoIiwiQXJyYXkiLCJpc0FycmF5IiwiYXJyYXkiLCJwcmVkaWNhdGUiLCJ0ZXN0IiwiZmluZEluZGV4Iiwib2JqZWN0IiwiZmluZEtleSIsInZhbHVlQ2FsbGJhY2siLCJyZXN0Iiwic2xpY2UiLCJwYXJzZVBhdHRlcm4iLCJwYXJzZUludCIsInBhcnNlUmVzdWx0IiwiYW55IiwiY29kZSIsImZvcm1hdERpc3RhbmNlIiwidG9rZW5WYWx1ZSIsImFkZFN1ZmZpeCIsImNvbXBhcmlzb24iLCJmb3JtYXRSZWxhdGl2ZSIsIl9kYXRlIiwiX2Jhc2VEYXRlIiwiZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwIiwiZXNjYXBlZFN0cmluZ1JlZ0V4cCIsImRvdWJsZVF1b3RlUmVnRXhwIiwidW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAiLCJkaXJ0eUZvcm1hdFN0ciIsIl9yZWY0IiwiX29wdGlvbnMkbG9jYWxlMiIsIl9vcHRpb25zJGxvY2FsZTIkb3B0aSIsIl9yZWY1IiwiX3JlZjYiLCJfcmVmNyIsIl9vcHRpb25zJGxvY2FsZTMiLCJfb3B0aW9ucyRsb2NhbGUzJG9wdGkiLCJfZGVmYXVsdE9wdGlvbnMkbG9jYWwzIiwiX2RlZmF1bHRPcHRpb25zJGxvY2FsNCIsImZvcm1hdFN0ciIsImRlZmF1bHRMb2NhbGUiLCJpc0RhdGUiLCJpc1ZhbGlkIiwidXRjRGF0ZSIsIlVUQyIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsImdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMiLCJkaXJ0eUFtb3VudCIsImFtb3VudCIsImFkZE1pbGxpc2Vjb25kcyIsInN1Yk1pbGxpc2Vjb25kcyIsImZvcm1hdHRlck9wdGlvbnMiLCJzdWJzdHJpbmciLCJmaXJzdENoYXJhY3RlciIsImxvbmdGb3JtYXR0ZXIiLCJtYXRjaGVkIiwiZm9ybWF0dGVyIiwidXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zIiwiaW5kZXhPZiIsInVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnMiLCJpc1Byb3RlY3RlZERheU9mWWVhclRva2VuIiwiaXNUaGlzTW9udGgiLCJkaXJ0eURhdGVMZWZ0IiwiZGlydHlEYXRlUmlnaHQiLCJkYXRlTGVmdCIsImRhdGVSaWdodCIsImlzU2FtZU1vbnRoIiwibm93IiwiQ3JlYXRlVG9EbyIsInN1Ym1pdHRlZEZvcm0iLCJ0aXRsZU5hbWUiLCJjaGlsZE5vZGVzIiwiZHVlRGF0ZSIsInNwbGl0IiwicHJpb3JpdHkiLCJub3RlIiwidXBkYXRlSUQiLCJ0eXBlIiwiZGF0YXNldCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwidGFzayIsImhpZGVBbGxPdGhlckVkaXRCVE5zIiwiY2xpY2tlZEJ1dHRvbiIsImFsbFRhc2tzRWRpdEJUTiIsInRvdGFsQlROQ291bnQiLCJidXR0b24iLCJjbGFzc0xpc3QiLCJhZGQiLCJhbGxQcm9qZWN0c0VkaXRCVE4iLCJ1bkhpZGVBbGxFZGl0QlROcyIsInRvZ2dsZUFsbFRhc2tzRWRpdEJUTnMiLCJ0b2dnbGVBbGxQcm9qZWN0c0VkaXRCVE5zIiwiY2hlY2tTdWJtaXR0ZWRGb3JtIiwiYWxlcnQiLCJzdGFydE9mRGF5Iiwic2V0SG91cnMiLCJpc1RvZGF5IiwiZGF0ZUxlZnRTdGFydE9mRGF5IiwiZGF0ZVJpZ2h0U3RhcnRPZkRheSIsImlzU2FtZURheSIsInN0YXJ0T2ZXZWVrIiwiZ2V0RGF5Iiwic2V0RGF0ZSIsImlzVGhpc1dlZWsiLCJkYXRlTGVmdFN0YXJ0T2ZXZWVrIiwiZGF0ZVJpZ2h0U3RhcnRPZldlZWsiLCJpc1NhbWVXZWVrIiwiZ2V0VGFiVG9Eb3MiLCJ0YWJOYW1lIiwiaW5ib3giLCJwYXJzZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJwcm9qZWN0cyIsIkJvb2xlYW4iLCJjcmVhdGVUYXNrIiwicHJvamVjdE5hbWUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwidG9kbyIsImFkanVzdFRhYkluZm8iLCJ0YWJUaXRsZSIsInNwYW4iLCJ0ZXh0Q29udGVudCIsImlubmVySFRNTCIsImVuZE9mV2VlayIsImNyZWF0ZUFkZFByb2plY3RMSSIsInByb2plY3RzVWwiLCJhZGRQcm9qZWN0TEkiLCJhZGRFdmVudExpc3RlbmVyIiwiZGVsZXRlQWRkUHJvamVjdExJIiwicHJvamVjdE5hbWVGb3JtIiwiY2FuY2VsUHJvamVjdE5hbWVGb3JtIiwiY2hlY2tJZlByb2plY3RFeGlzdHMiLCJjcmVhdGVQcm9qZWN0Iiwic2V0SXRlbSIsImFkZFByb2plY3RUb1N0b3JhZ2UiLCJzdWJtaXRQcm9qZWN0TmFtZUZvcm0iLCJjcmVhdGVQcm9qZWN0TmFtZUZvcm0iLCJ0aXRsZSIsInByb2plY3RMSSIsInByb2plY3ROYW1lU3BhbiIsInByb2plY3REcm9wRG93bkljb24iLCJhcHBlbmQiLCJwcm9qZWN0SUQiLCJjbGVhclRhYiIsIm9wZW5Qcm9qZWN0IiwiZHJvcERvd25JY29uIiwicmV0dXJuUHJvcGVyUHJvamVjdExJIiwiZGl2IiwiZWRpdEJUTiIsImRlbGV0ZUJUTiIsInRvZ2dsZSIsInZpZXdQcm9qZWN0RGV0YWlscyIsInRvZ2dsZUhpZGRlbiIsImluc2VydEJlZm9yZSIsIm5ld05hbWVDYW5jZWxCVE4iLCJwcm9qZWN0IiwibmV3UHJvamVjdE5hbWUiLCJuZXdQcm9qZWN0IiwiaW5zZXJ0TmV3UHJvamVjdE5hbWUiLCJuZXdOYW1lU3VibWl0QlROIiwiZWRpdFByb2plY3ROYW1lRm9ybSIsInByb2plY3RMSXMiLCJ1cGRhdGVQcm9qZWN0SWQiLCJkZWxldGVQcm9qZWN0IiwibG9hZFRvZG9zIiwiY3JlYXRlUHJvamVjdERldGFpbHMiLCJjb250ZW50RGl2IiwiZ2V0RWxlbWVudEJ5SWQiLCJjcmVhdGVBZGRUYXNrRGl2IiwidG9kb3NVTCIsImFkZFRhc2tMSSIsImZvcm0iLCJjYW5jZWxGb3JtQlROIiwidGFiIiwiVG9EbyIsIlRvRG9OYW1lIiwib3JpZ2luIiwiY2hlY2tJZlRvRG9FeGlzdHNJblByb2plY3RPckluYm94IiwiYWRkVG9Eb1RvSW5ib3giLCJwcm9qZWN0SW5kZXgiLCJhZGRUb0RvVG9Qcm9qZWN0U3RvcmFnZSIsInN1Ym1pdEZvcm1CVE4iLCJjcmVhdGVUYXNrRm9ybSIsImRlbGV0ZUFkZFRhc2tEaXYiLCJ0b2RvRm9ybSIsImNoZWNrTWFyayIsInRhc2tUaXRsZSIsIm9yaWdpblNwYW4iLCJkYXRlU3BhbiIsInRhc2tEcm9wRG93bkljb24iLCJ0YXNrTEkiLCJyZXR1cm5Qcm9wZXJUYXNrTEkiLCJzZXRUaW1lb3V0IiwiZGVsZXRlVG9EbyIsImRldGFpbHMiLCJlZGl0VG9Eb0JUTiIsImRlbGV0ZVRvRG9CVE4iLCJ2aWV3VG9Eb0RldGFpbHMiLCJ0YXNrSW5kZXgiLCJ2aWV3IiwiZWRpdFRvRG9zSW5mbyIsImNyZWF0ZVRvRG9EZXRhaWxzIiwic3RvcmFnZSIsImxvY2FscyIsImhlYWRlckRpdiIsImNyZWF0ZUhlYWRlciIsInNpZGViYXJEaXYiLCJjcmVhdGVTaWRlYmFyIiwiY29udGFpbmVyRGl2IiwiY3JlYXRlVG9Eb0NvbnRhaW5lciIsImxvYWRQcm9qZWN0cyIsImNoZWNrTG9jYWxTdG9yYWdlT25QYWdlTG9hZCJdLCJzb3VyY2VSb290IjoiIn0=